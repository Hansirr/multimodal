node {
  name: "lstm_1_input"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 30
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.15220388770103455
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.15220388770103455
      }
    }
  }
}
node {
  name: "lstm_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "lstm_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 7483752
    }
  }
}
node {
  name: "lstm_1/random_uniform/sub"
  op: "Sub"
  input: "lstm_1/random_uniform/max"
  input: "lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/random_uniform/mul"
  op: "Mul"
  input: "lstm_1/random_uniform/RandomUniform"
  input: "lstm_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/random_uniform"
  op: "Add"
  input: "lstm_1/random_uniform/mul"
  input: "lstm_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/kernel/Assign"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "lstm_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/kernel/read"
  op: "Identity"
  input: "lstm_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
        tensor_content: "\037\221\032\275\354\365\000<\277\277\264\274V\315\274=(r$=:\010\250\275\0268\251=q\322\177\271\252s\022\275{d\014\275-So\2755\t)<@e\n\273\037\320\232\274\257\336b=|\237\273=Yp\177=\273\335\010\274)\350\227<\267\224\334=\256\336x<\215^:=\374\037o\275{\001F\274{\357n<\226~\000= N\262\273\007Q+\276\216{\242=\302\356\244=\253/9=\"\242A<\342\036\031\276,k\273\275.\234\270\275\204\372\254=\217\321\365\275z\275\216;\231p\306\275\021\027M=gO\337=\342;a\275\020\202\037=\034\017\364;5\335\345;\r\225O<\277\027\032\274\013\253\001<\362\253\030\2749g\251<u~\177\275I\265v\275\306b\232\274\246\243\205=\206yp<\n\222\237=\361\271\226<\223S\032\275\316#\352\274\213\326\226=\367@\025\276\221\225\321\274\341\2349\274j=?\275O\343\003\276\335%\236\275\351\210\304::m\000=|\005\344\274v\211\204=5.\332;}\301~;\224\306A=R\344\032\275\203\204i=\r\007\373<3\314\273=g\300\227\274\tF\032<\263\274E;u,w=\347\030Y\275.\034r\274\034\366u=(X\357<%\275\247=\3056\216=\245H\007>\006\332\017=6\321\220=[\345$<*A:\275\217\335\363\275U\017\257;\232UN\275\301\327[\275Ob\022=z\034\346\274\277\245\221=\225AB=\210\035\222\274&f\235\275\334N\323\274\270\240\267=\r\247k=|h#=^\273.\2752\251z<\274\220\310\275\356W\014\276O\342\024\275-\352\240\275\025Ah=\010M\346\275\332e\360\275\377\326\233=\334\373h\273V\357\005=\222\267\220\274q\262q<\267\270\302=6\262\356;iy\036<\373M\252<\236<V\275\240\236\351\274\'W\312=}f\250\274\023g_\274\261bC\276\223{s<\244\0229\276\221\3439\275?\244-\275\300f\023=\244\367\234\274*\245\261\275hV\221\275\002\243\177\275\022\214\234\274\236 \014\276\315M(\274c\320\320=\350\345\341\274\034\212\341\275Gi\215\275\225\027\n\275\304\321T=\356h\216\275\204|\346\274\036\371p<?}\241=\001\317\366=\200\233\321\273=\225\346=F\021\214\275\335\313\250<\302\370p\275\001\313*<\2217\207\275\214\262\322\272c#\003<\304\325\363<O \275<@\367\240\275:\236\016<\033\024@\273\371\276Z<\352\013R=\251\360\237=\263O\227\273\217\037\030=2,\251=\2727\223\275vWs\275\214d\024\274&\225\201=#\3059=Z\265\006:Vz\320\275d\246\311<\252\344k\275\342\032\227=\010(q=\014\341\206=\010xT;\014;\327\274\nEZ=\336\022\007\276\245-\304<5\007\310\274AC\214=\013\342\014\2758`\230=\366\220\214\275\215\316\312\275&L\343\275\266\307\343=\311G\207\273{\322\262\275\303c\325\273%e\312\275c\312#>\007\n\002\275\rG\t=\342\200\362\274\236\203,\272\210;\200\272U$\262\273\223qi\274~\326\210\274\354\336k\275\022~!=p,\334\273\201,\377\275\263\255j<\306\272`\275\3069\n=C\222\232\275\272\202\226<\275@\'<\031_\226\274\204t\222<\227:\227\275\244\024\363\274\323\376\260;\251\276\206<3\327\326\274D\271\257<9\255\246\275\344\342s=\220\033E\275\276\302\t\2769\267\031=|\000?\274x\264\275\274\311\341X=A\352R\271\220\331\311\275\223pz=\n\206\232\2747\010!\275\316\207\252\275\346\366\207\274\364}q=_\253\275<\212Q=\275+\264\250=\201\214\312<\270\n\320=\315\034\233\274+\014\016<\363D\350;k\274\005\275\314@\317\274\247\003\212=\334\253\313\273i%]<\320\320\250<\r\376\321:\301\r\332<\273\007r<\261\025\247=\367\346@\275[\007\244=\350\336\374\274\360\207\036=\305\300\250\275,k\244=\035\255\017=\366M\307=\254\322\224\274\252\263\204\271\273\342{\275\315\350\254:\264\314\201\275j\223\261=\027\342\002\274\t\000\236\275G?\261\275ba\362;\251\232#\275\034\351y\2753\025\242\275C\305\251=\235\240\n=\333S\347;\232\305\347=\025\177%=\344@\264=\003h\001<\334]\331\275v\230\024=\203\341\245<\252\236\237<\n.\235=\035\030\240\274\304\377{\275\273\275\251\274\274\257\024=\033a\244\274\227\347o=^\370V\275\"\350b\275\327\355\242\275\214\333U\275\230IZ\274\312\245\273=\216L\223\275\305q\300\275\363&L=\271\247!<\000\305\213<\320\217\241<\316\231\263\275\0326<>c\016\203=\2112+<\240I\037<\373\r\207=AP[=\"yb=\347\263p\275\342\354U=\033\302\302=\245\027\323=\262\032\007\2753\360\346\274\027\351\367\274&\001y\275\346\212]\274\373~\371<\221\212\016\275\364:n=4\331[;\302\237h\275\375*\206\275\306\"\217\275\232\221\363:u\333v\275\220\317,\275ou\254\274\324\212\021=%\272\355<J`\n>\305i\276\274\307G)={T\035\275\332\037\344<\210\311,=\370\345-\273\037\224\005\275`\027\211\275\361m\250\275\227\262\n\276\250\224\311\275\301Y\247\274\377(-\275@\034\300\274\366\303\005\274\203\370\226\273\375E\235<EMh\275\271\213\340;\010\336\323\274\365dk=4;\240<\273\363L\274\340]\030\275\352\273\314\275D\330z=\220\007\363\274\035\252\262\275V\024\002\275\231Vo\275\210\320\002=*\022\263\274\203{>=\274\337\303;\343\230\211\274\361\307\246\274z\247\256\275\343\233\354=+~\356<fN\273\275c\300\035=\202\210\321:\321\273\327=\213\360\202\274](\223<\241\312\214=\024C@\274\304K\210<\322\322`=v\267T\275\023\3373=\363#\357\2752(\220\274B\222\304\273\233\021\034\274\365kS\275h\270\234\275\353hM\274\335=\375\274FS\246\274J\3072=\307\026\336\274\016^\344\274g\tl=q\003\n>\235\021!\275\367\337\227=*\317\212=\322-\007>\233\354\243\274z\273\221<wn$\276\363\0175\275v\333\211\274D\345\232=\264I\354<\300\326J\275?\331\375<@\003\212\275\221\221\022=\324{\n\275\177\346\273=50A=\373\224\311\274/\321\355\275\270\351\353=\330O\203=\341|\034;\254/\357<j\324\022\276\217\000\310\274n\323\200<\223n\237\273w\323\245=r/V=\203U\004\276\177\366\246\275\314W/<\263\211\267=a\177\n\275P\251\004=\315u6\274\234\316\376\273>No\275:\340\324<<\231\224\275\312\002\331=\226\350\242\274\021\027\311<o9\006\276\370\017\377<i\265d=\014Z\213=;W\t=\245\0026\275\264\'y\274Dk?\275\034\022\350\274\n\335Y=\241<\016\275\024(G<[\010\222=\013\314\205=Z\374\264\274\236*\314=\n\003\003\275#\t\317\275s\346\002>\313Y\272\275\036\304a\275\323\323\271=\021u\273=\270\306L\275L\363b\275\312T\017=\310\031\225<T\321\360\275$\265\032\275\260\3557=v\\==\375\270\303\274\203\342\244\275\343\207\357\274@t\232\275\2146\021<\375\243\217<\027\021\013\276\212\025\177=\271m\240\274\310\255\304=#^\204=j*v=\031\317\211\274d\332\200\275\272\321\032\275\247\003\300<;\317N\275\033\224V\275(F =\346\"z\275\315\232\314\2748\005\222\2750\242\035\276\3633*\276\312\206\352\275\232\202\226\275\016\334}\274\372\000\277<\030\327\025\274\333-\356=\032b}=m\025\023\275\014\302h\275\370G\231\273f\3144\274\\\354\341\274\215s\276=\370\365p<b4\234<S\004\325\272\327z\342=\340\307f\275\247o\276\275\201~X\274l\305\032\276\2514\321\275\360\333q\273\376\377\177=\340\025\\\274V\0256\275P\231O\275\3257\265=W\005\302\275?\211w=\230\353T\275\307\022z\275#\371\237\275h\374\322;\027\230\216=\352S\372\274\246\025\300<\212\004\256\275\021\'\224\274\nv\326\273\007\260\371<{\334\213\275\313\335\231\275\207E\\\275p\213\316:i\367\033=\221\223\r=&\327\261=\225rd\275\3547\306\274\270\327\217={~9\274K\304.=@:\200=\262\271.\275\237\022\026<\254R\201\273-\326\320\275og\005>\240\256Y\275\272\247\035\272\353\227/=\345%0\275#j\207\275\211\r\260\275a\277\205<hag\275\004\276\306<\336L\205\275\2031m\275~\2479=\002H\005>L3\253\275\231\300A=\371_a\275\311\274j\273\327\002\215\275H\003\032<\260>\006\275\315\376%=\025\212\032<\355Nl\275)\345F9\243\355z\275\230\312\270=\014\203\372\272\347\265\270\274uq\337<M\034\207\275\274\357\026\276\271\347\014\275\364\264i\275*\005\207\274\222\245\r<B\227\202;\034V\333\274\245q\374\275\306V\264\275\024o\262\273u\014\350\275\362\277J=\210\017\024\275\263H\224\275\251\201E=\343\276\270=;\305\226\275\213\334\330=\005\351\022\275\313I\206<\351\351y=Om\277\275xT\242\275\327m\270\275z\207\005\275\301:E<dr`\275\261:\375=@v\'<\022\263\325<\262\270\207\275j\016]\273\261\352\313\274\352\213\364\273\324\366\312\273\312\377\210=X3`\275s\216\220=\004\332\322=Y7b\275,\222\344;/\\\r=tU\245\273\225=$=2\014\355=\357+y\275`,\210\275s\206\255=<\254\362\274\324\037\002\276\200o4\275\\\203s\274`L\245\273\236\323B\274\243IB<\232\374\366;!\003\257<\036\001\245\275\234\306\013\275\357\201\354\275\343\342\315=\016c(=\240\036K=x\243\230=zn\213=\016c\357\275R\320\221<46\246\275}\364`<fY\243\275\320\200\002\275ut\371< \316\205=\254\240\265\274,E%\275\322n\237=\223\371\200\273\270\030\204\275\316\355l=7\270\235\275\334rF\275\202(\325;\tb\275\274\005Oi\273;\367\302=v\t\360<\225o\233=\222\032B=Wf\212\275\360\257S\275G\332\366;o\335\217\274\013\302\264\275\031\314\351\274\214\"\255\275\014\250\004>\017W\303<\200\030%=\204\210\267=\377\023\203=!\r\033>K\347g=n\350\214=\212f\203\275\311\307\303=u|\352=\300\315\032\274c\236\037\275P\250\352\270Y\322p=O\361Q\275oY\007=\260*\304\275\225\323\246=2\027\327\275\275a\213\275\205\207R;\322\204:\275\304!\347=\013\204\345;\366\216F\274!d2\274\346\354\226\274\325X\243\275\352&\005>\256t\007=\230\021\327<\307\256W\275\350\013s\274\316p\202\275\210\351c=\344\351\217\274\3239/\275v\031\206=\303o\202\2741J[\275\026\032\334=\037\"\010\276T\322\003=\230\010\034=e\263\340\274\375d\314\274 \251y\275\315^\251\275\340\007\026\275\263\202t<\036\237Y9+\241\242\274\332e\241=\026\374\347<q\256\017\275\035\021v<\237T\377<\325\315\263=\302\322\'=\241\363\315<\266A<\275\032\315O\274\024\301\251=Z\\\346\274\027\002 \275t\257+<\265B\364\274G\304$\276fj\331\273\302\026\377\274\001\310\377<]|\n>u.\255\275\240\005%\275\364\311\200\275\t\260\274\275g`\020=\307\340;\275AqR\275\317~\304\274\203c\341\275\215\331\021\2767 &=.v\264<\253k\224<\274,)=\010\021\030\274\374\017<\275\033\305\261\274\207\006\343\275\203\001\336:\033|\266<u\3307\275[\2400\274E\341\373<\342\345\362<O\\\274\274\217,\010\275\277\261\245=\026\t,=\'B\356<\\$\022\275\200\313\242;M\004:\275Gs\360=2\341\255=\316,\305\274\354_h\275Ha|\275\030fB=w\371\261<\264\177[=H\323u=yJ!=MEV>B\264F<\032\217\230=\026\005\221\275\334\033\314=\312\313i=\243\313\240=\236+\333<x\212\251<<J\020\275Y\253t=\210\255\322=W\367L\275\237kv<\333[7=\305\3005=\224\221\031=\273\030\262<\353\260\002=w\024\350<\n\037\314=K\232\237=\254\252Z\275\210\205\310\275\272\327,\275\262\035\t\275*2d\275\340\313\326\274\241\314\303\274iQ\367\275s\224\330\274MP\211\275h\311]<\002\t=\274d\013\325<E@\025\275?k\202\275pb\"=\373\351\306\274\313c&\276\240\247\324<,F\202\275g\204\204\275\261<@\275\244P>=\335r\265;\364<\353;\024/\210\275\n\034W;\210\0235\275\326N\323\275\251\017\n\275J\273\202\275\333\341\024\275\261\215\263=:\260T\275Lt+<\335\241\210\275\255>\r=R=a=@\310O\275\301{\224\274\244\301\264=\315\312\213=\206wD=\270\032\216\275\376\031\330<iH\365\2742g\014>1\357[\275\0378\217\274b\303{\275?\304\245=\375\311\001\275)\364\207\2758\262\021\275\202\314\325<\311%\203<\3025\320\275\007\205\304\275\254\010\220\275\022^\013>\242\377\346;p7&=\365\324\343<4ri=\265\020<\275\203#\214=\351d\355=\023In=\207YP\275\224P\266\274\251:\305\274\232e%=\261@\327=\035\247\262\275Z\372\236\274\356\203\036\275\026\303\231<K\310\352\274h~\'=\255\017\252\275\312I\236\275r\263-\274\363e\243<\365<\037\276\237\017\321\274\r\1776=~\324\036\275dnK=\220\2645\275\215\224\212;\237z\021>\357\010\305\274\226\311<\275k\'F=m\325\231\275\323vr=\222\277\264\274p+\273\275\017\n\256=\377\021*\275\322_\212=2\250\231=}\364\037\273\315\2402\275\r>\224=\225=\370\274\323[\301<\214C=\274,\247L\275\244\033\247\275\240S\246\275\255\334r=\357\342\315=lH\205\275n)O=\036&\227=\330t\021\275\023\337\200<-\3638=a\3706\275I\335\215=\016\205\024\275\301tA=\244\316\337=\352\355\361\274?s_\2755\005\"=o\036o=M\353^\274\254\002\261=\352\351\021\275\314\347\231=\332\337\203\274\274\341<<\r\301\263=\226\241G\2754#\210\275\310\245\264<|\005?<8\273\213=k\234\323\274\266F\340=\032S\247\274H\207\177=o\314w\273l\230\311\275\0052\025\275}\216\341<\224MP=\232\006\233\275\264h\272=,\310\253=\251(o\274\224F\005=n\214\216:\t\005\277=\367\303\217<8\274\256\275\003\335\361<\207gk<qe\326\275\231\024\222\275g\376\321==\016v;\251\313P\275\353\254o=|\213X;>\3735=\024\014\243\275\210(:\274\246D\010=]\252\242\275.\'\237\275<\314\020\276\371\027#;\303\271\210\275D\252#=\r\263\254=\"j\227=UO\304\275\350\300\201\275%\t\272<\357\234\\\275*jl\275[\003}=r<\365=\306\337\017\274\267<{\273D\026\007=\240,\357=#\227\316=\270\231\005\274\243\t\214\274\374\237m\2754(\336<}\\\005=\301\021=<P\005g=\246\223\234={\325\276=\305\357\242\275\254rM\274zF\240<\014\245\222\274\346\n\370\274la2\276O\351 \275\203!f\275\010\316Y\274\362\016x=\350\226\223=\345\305-=\326\207E<\034\205Z\275E\t\304\275\3200\335\275F\350\202\275\234\370\001\275\225\243!=\326\020\027=\262h\010\2768\035\302\275C\020\253=\325\342]\275\241U\202\275\'\303\375=)\371\251;\247\025h=s\360\372;{k\211=\301.\202\275\332\200\361=_\037\305<\321\364\226=knX\2744\277$\274\033\257\314\274\005/i\272@1\207=`\250\334\275\206\301\305\275\000\034\371<N\361\000\274\217\275\312\275\204f\204<\003c\322<C&\331<\021\243z=\366\325\254\2743\331\230\275:\300\"=\013\354\327=\247\225\036\274\351\365v<\322\272o=`\310+\275\004c\225\275\270\037\221<\300\013\217\2734\263\022\274\206U\220\275\026\243\313<\341\310\223=\306mR\275\377 \r\2759O\021=\224\341C=^O~=\330\035\240=\0102\311\275\233\034\023;\255\n-\275\256a\202\276A\343\"\271/\205W<\315\377\305\274\315U\r=\026%\371\274\223\250\242<\r7\211\274\030\"\214\274R\224\224=EH\214\275\025!\205=\257Np=*n)\274X\213^\275Y\372]=\331v\t\274\325,\000\275\246l\302<r p=\334\320\341\274\212\3770\2744\377U=\303\222\341=\311\221\310\273\226\211+<Az\231\275\274\365x<(2\004\2756V<=(\312\322\274)l\303\273\341\204C\275\317\343\227\275\210SF=0eJ=\223\201\325;1\321\n\274\373\021\240\273\322\306\004==\331\200\2747\207\213=\217\376\250\274\255\326\372=\200\255\216\274^:\270:\356v*\274R%\002\276\351\232\234\274\210\375J\274\364\025z\274\0220V\275\020\210\342\274X\250\205=>k4=\037S\257=\227(\333\274\200\246\206\274\345\t>=$\315+<\361\025\376=7<\237=\353(<=\034C\222=\203\216\256=\036\332U=g\000e\275\360\371\216<*W9=\305X\356<\025\036\252=|j\333:\340T\223\274*S\340<\245\307\035\274\202\007\230=\365g\331\272=\272+\275\346f\262\275\232\245a\275_&t=}\367\302\275\014h?\275\260\002\\\275\345<\252=\3354\017=Z\320\035\275\342\322\257\274\016\224&\276\201\2037\275zP\031=d\262E\274o\341:=H<\002\274\363w\226;\341\322\235=\003\273\323\274\330R\220\275\250Bl<\037\202\252\275<u\374\2754\300\253\275\017t\274\274\205\222!\275\262\300\305\275\260E;=\2054\203=\351\026\220\275_~\350;&\252\332\275\300\036\253\275#2\317<\342\032\034\275)\330\370\272\370\027\022=\215\000\352<\325%\336<k\010\334=\0021e={\252]\2751\237\267=\2075o=\000\332c\275\253\354\250<N\334\030\274\267\211\361=\025\010\\\275\352\006w<\006\014\266=\033\007\260\275\207\245{;\266\005\235=\215#1=\326\352\220\272A\205@=\224\300\261=1\024\342<\273\003C\275\231\251\274\274\254\3729\275\371/\324=\345\325\212\275\002\376u=\034\322}<W\275~=;\023\205=\225\021\034<t\251\210;\220uo=~d\255\275\200\227\222\275\303\373\224;\254f\014>n)\250\275\311=\232\274\251\345\033<}!\316=\360Le\275\340\232i\274]\255\203=\275x\206=\352RA\275Wo\205=\177\275\307=|g\303;\ry\204\275\213\005\376<\226\250\222\274\300\326b\275wr\340=S\0314>\272\373%>\337G\034\274\267hZ=\274\303\213<\220\301n;\3062\241=\221\216\201\274\326\225\373<j3];\313{\221\2754\265\035=\201tr=\240\214\245=\007\200\347=\21168>\360\244+\276\370)\356\272U\272`=\226\364\353=\230\352e=Ek\235=d\n\342<\375|\037\275\235N:\275\342\237t=\227\311}\275#\212]=\302}\232<\0037\244\274\237RR>\313\234\030\275\t~&=}\344\027\273\351\203b\275S\037G\274\234\313\270=\303\267\017\275gE\345<\007\355Q=\314\306x\274C\321\203\274\240\005]\275m\244\226=\334\273\250<\213\001\247<\203\265F\274\273\277g<NA6<G\310R\275\001=\034\275\374\342\211\274\344j\265<\001N/\275\260u\352\274\354\037\344<\033\326a:\231\257J\275=\237\377=\006\2631=U\210I\275q#a<\231;\271\273\235\320\245\2742W\031\276y\007U<y\326\215\275Tu\201\274\337+\234<i\324\320\274\031\037\325\275Jc-=\263`\264\274\324 )\275\307\250\362\275\034\265\010\275gb6\275y\206\227\275\352\260[<J\273\344<4\\\031=\233!\370<\317\363\240=_\312\257<r\251\226\275\2179\326<~Q\020\276x\2142\275B\207\000\276Wu_=\304\'`=\257i\311<\372\032\t=s\364\221<\250\322\034=\250\350C\272\326\340\034=\276\241\226\274NQ\004\274\226\361\333\274\214\244\"=R.\347<9Nw\274\2342\250<3\025\035\275\330\\,\275\237f\246\275\210\226\222\273[\226\235<\rd|=\267\023\254<\271\216\222=\213f\'\275)\276\271<\033\266a<\301O\347=\234\201\311<\203\225\204=D\342\016\275\017\034O\275\r\275;=\371\301\246=f98\275d\367\242<\3319N\275\017$\253\273\317\205\200;\253\375\360\275\250\251\033\275\367\023\331\275\255\214\274<\335t\214\275\344\215\020\275\310 \235\275n\315\326=\251A\215=\003S8=\036u\220<:\216\030>!I\255\274E!\211\275\243a+=\245SY<\343\306\">K\305T\275%\352\324\274\241\306M<+\366u\275\214eu\275:j\356<\346\n\037\273\344\355\304=\356\375\244<\232\255\317=\323T\211=\2128\356\273\352\221\333\275\344\334\010\276\324\260\310<yb\302=\234\346L\273\203-2<\200\362y\273\312\022{<\206\301!<\017\345\177=\3449\373\275\nG\014\274\376f\303=\301s\273\275\017\243(=\013\202\353<\252\263\331\274\201n\362;P\312P\275?\005o=\re\247=\005Yn\275\301\031\211<F\000\236\275\373\355\340=\2477C\275\010y\211\275i[\326<f\207\342\273\217b\254\275\025\004\000\275WX?=i?\230<\212?\272<\277\302\303=\215\210\331\275\321\315\207\275R\022\013=\022\230i\274.O_=m\234+=\360\323\024=\254w^=0\250\272\272\336I\207\274\317\360\004;\030\305\355<\\\256\303=wM\320\274\r/);Z~\003\276\327\376\227=\002W\245<\306\205\243\275\232\233\242\275\014\234\363<\371\224;=\236Rw;\003q\261\275D\222\233\275\n~\214<\024C\"\274\300\346B\275z\324\014\274Y\010\336=\373\313\215\274!\204\360<Y\243\364=\277\272\007\275Q\270\354\274\322/\323\275\336OH=I\317\326;e?\253\274J6\243=\016b\231<\030\213\356<\234\310\364=\274\235\226\275a\273\t\2757\274\233=Z\r\177<\\\362\217\274\237q\220<\345\006\265\275Ee\027>v\342\016\275j\347\256\275\031\217\322\275\036\371\370\274\264,\211<\240{\002\275M\314\252\275\006\212\021=,\372D=\366\241\237<7\325K\275\3167\t\276\277\347\301=(\0335\275\336;\272\275\325\362\234=\031\211\250\274\336\311\207=\222\325\n=\206_\026\275\224|\030\275\362\343\324\274\271\302s\275\002\215.\274>Q\027>\344]\240=\205]\020=\367<\235=t\311\366\275\343\250|=\273/\314=:ze\2753z\210=\002\033\377\274\302\247!=h \321=\206v\006\276o\276\251<\252r#\275\374\307\371\273p\230 =\307\355Q\275\242\013\037\275\025Y#\275_e\305=\241\333R=\274\341\333\2747\336\221=\tH\315\274\364\223\237<\262\354\372\274\356\253\n=\323Ts=\210GS\275\331\221\211=u\206\026<\367I\r\275\336\376\224;e\327q<\234;~\275\240\366o\273\026pk\275q7\032=\236\222\330\274\220\027\301=\223\317\024\275\022\351\026\276\020c>;\007\024\260=\241\001E=\205\303[\275 \240\313\275\227NI\275\323\007\322=r\352a:N\245\356\270^\017\201;s\244\305\274\316\231\203\275U%\304=A\326\014\275s\036\243=\326\366\246\275\314\220O\275\021\271\273\275\241\370\360=\356\344\n\275/0\031\275{`\024=Yh\363\274<\207\227\275l\243\271\275}j\334<\331z\200\275\233\211\221\275[\217\014=\332Z\365\274\211\002\355\2749\016\220\275\002&\355\274\356\024?=`\261p\275\021;t\275\300\221\025\276\211\3330\2750\237\371\275\224\204==\222\'X=KYP\274\3007\341\274\246JI>\035\272\337=\341\036G\2752\3134;h\336\263: \023\271;6\\\235\275\203\254\220\275\312W\3139\207\3437=oO\221:\205\\\027\274\nd]\275\345\344c\275\300\3377<\357\237\202<p\200%=\253\277/=\343\360\246=\366\244\224\275\203\254\357\273\354c\372\275\253\277f:\367\333\225\275\021\370\235\275\2445\377\275f\274\215=\306\3335\275\275\254\214=\034\215\033={\211\216\275Q\010\266=\333\004\232\274;\325\266\274Q{\223\275\316R:\274\205\224\237<\\\037\325\275 \232\266=O\230\222\275\004\355\314<a\326m\274\356\347\214=\004G\260\274\265am<\316e\326<\270\354\213<\327\213\030\274k\207\203<5W\014\274\226\\/\275\327@M\274\371\347p=M\331\370;\221\030\177\275\334\375\264\274\016\251\340\275\336 \304<\252\306v\274\000\201\\\275\224|9=I\304\327;VV\330;\177`\036\276[\271U=\251X\013<\\i\262\275x\240\032=\212\341\215\275\367\214h<\335ur=\366\004\346;Hi\303\275\003\241\245\275\275D\370\274\216W7\276\253`G\274\340N\204=;r\231=\251\355\311\275y\327\301=\000\303\020>\201a\356:f\207\221\273v\312v<\331\333\262\274\210\324\220\275\345X\247\275\245\374\315<\010\214V\275\236>\375<\232\211\366\274\327c\303=*n\334\273\315{n=\017r\265\275\204\033\"=Ad\r\274\324\022\360=\345(Q<\364\020\352\274\254\005\033\275p2{=pZ\306\274+\266w\275\360\201\302\275GH \275\037q@\274SW\234\275\235G)\276\215\315V<\022i\220\275\361\022<\275\r\207\231\275w\2314=\003q\232\272\3041\341<\367\331\315\275\226\321\347\274\000\2414\275>\266\266\274,2\235=Nk>\274\363\010\235=\360qK=\030V\231\2752\331-<,\275Q:q\245\235\275Sk\222\275\325\356\007=\327b\222<k\000/\275S\373\310=\014\177\263\273\'\353\003<\270\036\204=\373\2067=M.\221=\351[5;8\216V=h]\344=\376\373s=\260L\2669\006OC=uIF=\332?\330<o7\274=\204\2262<`>3=FS/<d(\221=e\3253\275\3573\225;\345\323~=\372?\221\275\200\217\014\275u\"\377\274\224\363\t>1GD<\300G\217\272\2571q=\372B\263<pt\030\274\206H\331;xz\347<\026\253F;\346\214b\275#s\231=\324\177\314=\177\207\026;P\217\023=e:\234<\347\251\211=\263jR\275\'\313 \274_a\010\275\330?\356\274\230\022@=q\2239=\\\377\000=\024\227a\275\026sg<\221\255\303\275\231\375\235\275\356\362\177\274\340+\243\274\261\177$=d\351\266<Kj\232=\026nj<\361\000\245<\332\003\006>|i\252=\324\265\206=\216_\005\275\365\337g\275\225mg\275\237\205\224=\302\267\320\275\267F\256\274\236<k\275\306EF=\rM8\276\313\373m=U+\232=\023NM\275\245\250\226\275*\006\271\270\3048\006\276\"\222\377\275\204&\251\273\327\340_<t\225@;\344>\204\275\342\256\031\275\014\261\215\275\t\273\362\275|\200\250\275S%\213<\005m\347<P\352\033\275W\020\220\275\031a\314\275\326/,\275\371/\211\275\300h\217\274\222\367*=a\336\263\275\032\273\313\275\000\222\022\276\006\325\266\274\217\207\034\274\250; = \331\310\274\020f\007=qk\267<+j\235\275D\231\205\2752o\255\275w\007\344\275\316[=\274d\272\304\275&\215\255\274z\224A\276\315\226\351<\304(|<\225\0167\275\366\243\245\275_2\207\274N3\035=\302\312\307\273\352l<9\014\231\007<\251\007\234\275\250\020\363\275\325e\371\275i\373+=:\311\255\274x\014\036=\227\237\007\275\221\036\257\273\366\244\312;\274\024\340\274:\321\233\275B\322\227\275g\301\304<3\316\317\274/O\216<\326\373\335<(}\025=\307\205\224=B\010\25098\022\256\274d\3449=D\226\377\274)_\351;\203\247:\2757\364\024=\327\3555=\030\365a\275\341\026\244\275\235{\316\274:v\'>,\316u=\361\260R\275K\344E<\356-\267=\360\244\356\275O\016\311=\206n\024>\266\247\227\275\362\252\210=(\237\r;\005Q\204\275$\255\237\274\216\352\372\274\202\206^\275\027\357\353\274J\316h=\027\327\002=\240\3558\273\263\355\301\275\334\017\004=\3022F\275\374\260d<\003,`\275V\353|<\200\360r\275\317e\354<o\230\320=\330\225\034=_;\206\273j\315\r\275\365\t\217=\247\311/\274\230:\226=5$\331\274y\233\335\275\203\252#>\0165_\274\271k\210\274X\251\254<\340J+\275r|\005=\377\344\241\275s\340\357\274\022\326\013\274\010\231\263<\302\320\223=Pm\027<\3269\002=o\200l=\245\354\375\275Q\320\206=\346\356R<&\207\252\274\330ZB\275d \027=7\337\247<m\346\232\275\316\261\337\274\207\226G=\014xa\275O\320y=\370\303\313\2747D\265<\375\342\200<\177\022\252=\213\216\177;\017:\\<B\321t\2746\323\017\275\211p\205<\013\023\236\271\217.~\274h\025*\276rG\206\274\211\246\202\275y<\243\272\234\310\030\275\016\003\001\274\257\313\305\274\316\314\225<\364m\302\274\220J\316=C\233\240\275W\352\331<3p\031>{\261g\274\303\367f=\030\224B=}\3708\275\276\023+=p\031\212\275\021e\347=\032r?\275\002\322\007\275Yg-\275\265nU\274e\210m\275U\245*=\367X\306\274\365\336~;\244A@\275P\236\213\275zS\350\274C\022P\275\363\354\t>\242\200?=\337\343\315<\265\217\324\274<\212\\\275J\205\315<\024\256\t=\024\rS=\314\255\264\274\274\356)\275\004\200\275=\343\272\007=D\213e\275\341\233{\275z\t\252=\374\017\006>\\\335\251<\357\365I<40\367\274\334\r\303\2750V\237\274\332R\265\274J\025\250=\303\370\265=\235\361g;M\326><\2032\037>\"\310\252=\254\203\332=\235Q~\274k/\006=&Y@\2735$\257=\177U\237</\025:\275\310b\";\334\203,<\221\263\264\274\350\272\r>P\306\205=|Y =\0315\202\275\202\212\216\275 &\264\275>\017\026=\345\026\240\274J\250 \275|b\256\275t\377\316<\372D\020=\227\021h;@[3<\027\373\017\274\335\021\004<\365yg=\325\032\031\275G_\275\274\210\265\223=\r\022\341\274\317V\361<z\235\346\274q\253\'=\254KO\275\216r\355;\310#\251\2755! \274X\274\251\275.\002\332<\207\267\315\275\025A\024\275g\331(<\035\353%\2755\365\231=g\372\035\275\0169%<\321\205h<\217.\215\273e\202\235=8o\260\275&E\257\274\244+s\274#\023\025\275\214\016q\275\310\236\320\275\273:\330\275\003+\213\275&\024k=\250,\304=\202\324\022\275\017CI>\364\3724\275S\035\004\276\371K\260\274jW\311\274\236\365\367<x\256\215\275\017\017\315=6C[\275\214\n$=\372\241\222;\310\313O\275\365\265L=K\277\246=\"X\t\276\214\243\350\273\301/\202<\267O\005\274\344\313H=;z\364\275\313\321\243\275\036\262\203\274X\324\357<\204\234\337<\214\367G>\037\226n\274\370\007\260<\360$\030=\3011\262<\307\010\305=\246Ye\275\253:\225=X\373\337\274p!\326;\245\270\020=@)#\275\177s\036=\376\221.=\311\363);\366j\313\275\3534\307\274\014:\263=\026\332\222\274\371J\272<L\245\363;\234\305M<c\320\306=I\300\244\275\320L\327=\224\273\210=\327\222\223=#\002\375\275\324hc\275\300\266\031\272\353\363\'\274\302*\344<\276\352\230=\307=\225\271gJ6=\222\010\327<m4B=\222r\223\274\212\361\336\274\273\236,\275\221\236\302<\245t\355\274\006\206]\275\374E\234\274\373 \202\274@\no<\234\211m\274m\243;\275X\'N<\370Z\347;\177\264\210\274&\223\001=\263rp\274|\336.=\"\237\364\274s\253\244=\232\262N<I\301\354\275y\264\000\275\307\333\300\273\340\200:=\001\263J\275\270\372\332\275j<\306\274-\376\222\275f\207<=33G\274\207#3</\002\007\275\2649\361=\025\020U<^[\023\275t\377\r<\267\010\006>\307\337q=*\262\324=\362\311C\275W\373\026<y\031\227\274\217\214\014>\226\n\023=\027E&=r\264\313\275>5K\270ll\002<\223\274\344\273Yz\211\2758$\200\275R\t$\275\302\356\224\275\376\n\325\275\252\301\247\275~@W\275\205+Z\275O\360\346<6\266\215\275\343\377\374\275\247^\205<\252v\t\275\"\254\336\275*p\321<\332\"&;gp\375\274\020\300\255\274!1V=\357\204\346<\360\377\242\274\307o&\275o)9\274=\207\366;\252\004\236=\204\223s\275\224\356\225\275\350\226\236\275\0017\000>\216@h={\021%\274\317xV\2756\321\266\274n\020\035\275\000,\003\276cC\354\274\000f\217\274\370\340m=\357\352\032\2757\374\263=\031\213\016=i\027\r=\032\337\354\275\270\010$>)\303-=\320\367\034>\315\027Q=\235n)=hn\235\274\374\nt=J\326W\275\200\025;\274\207Z\303=\2077\010=W\010?\274(w.<\211\267\277=\004\343;\275\363\237$\275\311\327\246\274\325\301\\=\321\201a=\257\260\274=\246XB\275\236\247\263\273lg\327\275\r6\242=A9\242\275\246\365\337<\305\244\313\275\271\361x=\365\301\335\274u\3705<\315M9\274C\220\313=\240A\237\275CG\360\274S\'k\275\227\244\201\275_\326\017\275\233N\022<\213\343\260\274%\001\353<\341\376\233=q\367\263\274+\311\243\274]\272\342\275\260C(\275fX\t=\255b\352\275\341\207\304\275*1\005>\n`\273\2756\272\223\275\231MZ=_\205\030=9\377\270\275\335\323\000\275O\235\372\274a<)=\330Vi\275\374\263\n\275\032\000G<\365s\010<A\321\360=\320\210\316\274\273\223\237<U \324\275\3340\030:\236Q3\276,\"e=\271\276\004\275kU\275\275\304p\245=\030\213a=\253\334J\274\010\010\366\275\032\274\353<1\306\351\274T\251#\274\034\236\216=\260\213$\275\372\342S=\252\305\326\275\240O\206\275H\242\213\275\240L\020\273\336F\033\275$V\203\275Z_\256<\257\375\235\275(\375\010\276T\203\247<6\270\326=j\236m<\006}\335\274Qt\243\275+U\217\275HB\027\275\243\265~\275 \261k\275\376\207\363\274\245\252\260\275\266)v=\241?\004\276\276\035\027\276q\360\222\275\353\317\267\273\247\017\331<a\r\023\274\201u:\274\t+N\275\333\253\301\273\326\007\260=\307\001V<>\232\276\275\376q\221\275\013\242\005<D\367\320\275\327`j;\025\221\232<\245\375\335<h\302\264\275\335\205P<\366\2165\274r\204p\273\006\362%\275S\017\262=\\\331\336\275N\025O=\345\236\233\275\211\352\271\275\357\243\270\275\322\316\245=qi\220=\325\241\t\275\005@\245=H\350\234\275\n\344\216=\307\006\001=\206\251\203=B\025\217=\235\216j=\327=$<\224\231\227=:\241\322\274\013\210\344<`\302\214\275#\217\020>\245i\357\274\330\276\223\2755\272K=\367fU\275\001\257\n\276\376\240\315\273\021y-;b\211\211=\343\270G\275\367\237G=.\360f\274\'\346\357\274I\313\212\275\005\263\207\274\205\325\246=\251\022\220\275O\247B\275\260\024\033<\311\3402=a\372H\274\330\265\243<\3001\270=\020Q\365\275\006=\037=\2542,>\232\262\253\275m\360\003=\235\314e\274\255\376\r\275\202\017?\275\022\345y\274\203l\310=v\355<\275\327\311\240<\250\303\220\275fA\202\275\367\366\000=\n\304\222\275Z\236\271\275\023\354#\275\345\022\007\275\333\347\200=\313_M\274\370\201\330\274=\211\237==\313\354\274B\360U<\326\214\027>\243H\200\275\177+\307=w\020\275\275\364\037\341;\263b\024=CV\220\275T\026W=\345\202s\274Y\375\244:(\305\226\274\032*\005\2751\270X<5\022\037=\244l\306=\254\004\306\275Jr\367\274\027(b<\337D@\275\0316\304;D\215W;\032\257\000>a|\r\275\357F\n=\261\317w\274sb\246\275\025\033A=\211\263;\272\360\247F\274$mB\275K$\216=\342T\252=\371\244\263=x\366\203\275\325\344\312;\253U\214<\202\t\242\275\'\305\200=\261)\000\275-5\226=\340\304\363=.\227\334\275Y\377\373\2742\377\253\275?UL\275@I\014\275YV\226\275\226\202\311=\245\2639=\367w\235=T7\370<\213\307\216\274\\f,<\343\260\300=W\200N=oB\n\274\003\026\032\275\322\035\022\275\300,)=\364\260\345\275\331\231\177=\3772\025\275\264U\036\274\3724\001=\225\022\214\275\263T\337\274%5\016;\\\273\212=x\031\035=.\344+=\223U\227<\377\2023=\353\036\036=\330\023\237\275\330d\036\274\353\016\231:\302\264\205;\370\262\r\275\205\247\002<\314\253\241=\205>7\274\302\211\372\275\022d\210\275\341\034h<\373\334\207\275\363\014^\275A\242X;\240}><\304\003g\275k{\002=\301\213\267;\203\306\002\273\277\374\307<\013\244\250=\230o\363=fI^\274T\017\261=\035\007\234\274H\222\214=Go\037=S\361\"=\337\201\327<\304\357\277=\231\324\213=\024yd=Ul\343=sE\217\275\020\232\004=\250y\276\274\3647y\275\034\302\\<,~\321\274%\262\257\275\205\363>=b\214+=4\007\304</`\341<\273\332\223\275g\027b\275![\200=\035\341\037=\177\205\363=v2\244\275\204\026`\275\312\322G\275\035\317x=|\223\010=u\343\226<&\343\235<\372L\017=\325\313\205;\373cO<\351\251\245\275\037\206\230\275\205\241D<\334\016\261=O\365\317\275\325\243C=\324\360\227\275=\324\024=\211F\334\275\200\375}\275Ts\274\275\361\2229=\025\007\003\276\010\360\246\275\r\267L=?k\206\274X\363W=\242*v<\354\365\244=;\310\207\275\331l\006=\333\273\366\274\267XW=\305\373M=\254\250\276\274\000le;\236\264\320=9\002T=E\370\252<|\375\260<\205\301\016=!j\013\275\001\353\202=9\006\200<sF\316\274\214\341B=$\"\334\274\262\351\017<\213\242\320\273\0062\200=F\267r\275\357\"==$\3028=\341\351\361\2744\216S<\350OT;\235{w<;\013\213=D\326\007=\240\337\215\275&[\002\275\327\331,\275*\025`\275\305\362\361<-^\226\275zp\006<Ub\213=W\224\241\274\213\325\357\275Kn\001>G\"\346;\250\323a<[y#\275\325qZ\274-\013;\276C\211|=\305*f<\201\300\351\274\tZ\325\275Q:&<2\001M\274\355I_\275H\243\316\275\310QG=\024^0=3<S\275\324x\331<\205)\373\274\265x\022\273\r\022\313=\344vA\275\330x\252\274\305\253\'=+\014\251\275\323\026\026=Lm\256<*|\267\275U\006\257=(\240y=\007\232\344\275\t\231\310=\365W\263\274c\270\021<\252E\263=\3370m=b\\~\275\201\227\366<h\235J=\233\000\225<P\2439\274\335\344\324<\343\302[=b\224\006=9y\200=\014\206\242=\341\343\003\276\234\010\334=es\006>sH\310<\023W\320\272w\320\021=X\250\266=s\353\271=\343\242\317<\374\353\245\2759%\331\275Z\\r<~\370\265\2752\213\215\274f\354\265:\307\375\270\274DQ\275\274\320z\232<\324Li=\371c\017\276B\204h=\223\326\351\274\355\274\006\276\355l\315<I\257\363=\353a\323=\001<,<:.\231=\354\276\002\275\264S\212<\2246\357\274G\"\363;\203\235\374=\002\354\010>?\276\270\274\207\304&\274\261\277e\275\372\316\001\275D\205\353;F0\326=\321\034\020\275\237\032\325\275\356\210\004\276\370\207\201\274\276\360\361=\303\361\354=\227\010\353\275\370\242;=3c\250;\343\347\355=\267\246\224\275\222\340\034=`\310\005\274\245\360\250<\177%}\2749\250e=x\353\212\274\334\002\257:\336%\333\275\214(\345\275\007\351q\275\340B\272\274i\341\352\273\324\232\244=c\026\317\2753^C\275\211\306\333=\2037\341=H\303\023\275\351\030\240\275\212U\032\275\320<\355<\317w\336=\232\027\205\273\n\362\273<p\032\030>\354\336]\273\247\250\337\273\370\200\251\275\02799<\254M^\275F\007\305\275\014G\264\275Qd\216\274\304\036\230<\342}\200;\235\035\034<?g\356<\006\250q<k\332j=m\371H\275\323rG=\327\320\300;Fa\013\2746{\224=$\371\016=\244\304\014\275\365\003\016=\314\342\005=k\271\303<_\030\353\274g\033\032\275\304bV=K\254\207\273D\241p\274\017z\255<\322\002\320;R\301\223\275\322:W<\223\242\274=4\375\'<\210\215\270\275\2400\006=\006\246\215=\021\301\215\275m\273\375\27422\221\274#\214\004=&\272\002\274\301]\353=F\002\345=\0341,=\220\335\006\2752\321\263\274\265\204\'=\017\301\326<\240\256\2129\326\\\254=ck\310=\311\376\375\274\227\253r\275\335@\224<n\2556\276\000\'\217=xJ\207=\0205\252<|w\216=\357\251T;p\"\032=\"\263\354\274Q\240#;\304M\246<mJ\205=\035\323\331==J6\275Z\327\307=\362\261\033<\233\311\253\275\304A\010\275\316\365R\275,\000\365\273\223@\332=(\360?\274cT\261=\361Z\0138\233\034\306\275\351B\222=\'p7=k\023\261=\301h<>\016\231\016\274\314\306\244\275\226]\325\275>\036\'=\2113\256\275\t^5=\265\212J\274\353\213L\274C\351\330;\251$\013<\363\321\222=Tw\025=\362\263%<\367\375\033\275&\353\253\275\337\311\221:\007\225\221\274\323-.=;<\217=\037\340\242=hA\223\275\303\256n\275c\303R\274\234Nc=t\004\344\274\344\\\260=\177$4=\243\361\370\275.L\037>\017\006)\275|\326\000=P6J=\264\026?<\014S{\274\001\237\236=\346\'J=\266\273\352\273\0324\230=\365\262\020\275\315\033\022\275\022\313D\274\351\213\216\275\251c\007\275\357)\302<iNJ=)\"\226=K[c\275\211\241\330\274\2278\030\275\377\225d\275\377G\357\274\353\266\203\275\024\364\264\275\346\220\233=s\225\';\007\211?=\261z\026=)=\227=\202\220{\275\210\003\256=[\3717\275\000\215\243\274M\022J=A\340\036\275\276R\241\274\233q\n\275\026^\221=\262Su=\242h:\274Z\354\347=\363\233\257\274\2015\341\274\374(\260\275j\361\353\274\337\303\033\275\2753\223\275\004F\002=~\374\220;\007 \307\275U\201\237\275\305\351\223\275\357\013\254\275X\305F\275\003\306\331=\203\277 <\352\220\207\275C?\254\274p\"[\273\027\222\304\274\225!\275;\320UB=\032\"\203=\312\240\206=p\251\350=\372\255G\275\311A\245\274\246\035\361\275\0302\235\274=\376\032=\360\323\251\275\342K\375\275O\336\363<_x?\275\t&\004\275\371\231\261\275\006\343\036=d\260!\275T6\254<\2068\240\275^\004\"\2767\336\325=\344\206l=\n\034\237\275\217.\267\275\256\272k\275\231A\024\274JI}=R@\207\275\027\014\360\274\207\207\336<\235\010b=0t\220\275d\275\025=as\017=@\317\375\274:{\001>\314?\203=q\251\252\273\035\n\n\273\000(\330<\036\340\204<\221\333q=\264\r|=\360j\277=/t\234:\217\207{<\247/Y==\"\002\275\232Ve\275\243lq\275#7L>\221<&=K{ <\027\235\310\274|(\261\275\010\277\323=0\362\364;\253\322\241<\252\375\207\275\343\025\005\275R-\032=\353\352n=+r\003\272\324\272\222\273\003C\335\275x.y\272\251M\337\273\227\244\342\275Z\206=\274mp\220\275.\346\335<\0148<\275\013J7:\370\\\302;x\014\217=G\322\222\274\036\364_\275\177L{;o\235\233\2759\003\300\274fa\036\275\266r\346\275\323W\370\275\026\206\257\275i\231@\274\356\027*;A^e=L\316C\273\032\335\246\275\255L\304;\301WD\271K\336\262<\277\252\234\275\002p.9\356o\321\274\004\256\273<%\3558\275\275!\244=\023\330i=\350\206\202=\227\010C=\"\264\322<LW\244;L\311\016\275\212v\370=\246\251^\274c\332\361\274\224\225c=\312\t\244=;\263E\274\244\3455=\337a\227=l\376\213\275\034\244\350=\276\023\327:\013\007.\275!\372\313<\302+\326\275\204\241\003\276\244Z\357\275\201H\332\274 \037==1\311\260=\377\230\030\275\035)\002\274f\277\235\274\211\201\017\271\243\343\'=\364\251\213=\203\302!\274\334L\340<\347\312y<\272\311\244=E\023\r<o\r\366\275\024<a\275\035w\212<\244\271\t=\211:\007;{D\336\275\344\333\n\274\026E\307\274a\304|\275\004\302o\275E9\370\274b\346D<#\215\205\275m\t\201\274s\302h\275\311h.\275\nwE\275\204+\240=X\227\202=\001p\350:\230\235\337<\214\273\275<\370\021.\276K\026\224\275+\227S=~1\343=gk\301<\327\014\267\275\300LZ\275\323\022\311<\325\245C\275\031K\013\275t\302p\275\224\314\307=\356\250\206<:\030^=\315<\371\274]\377\013=\030l\243\275\177.\205=\273~\234\273\\\201<\275\317n\324\274\025}\005=(\365:=\215\241\016=\315\265\273\274\026\366i;Z*\333\271\325\027`<8d\025=\275\354}=\261c\251\275v\335&\275@\226b=s\007\264\272\340hF\275\211\253\313<\251^\223\275\333\001]\274Y\374(>\367\345\\\275\365\205\252<\302\313\177\275e\331H\274!\277W\275*\354\341\274\232S\262\270q\320v=\317\'\006\275\314C\017\275n,\241=\245o\037=0\251R\2755\356\333;\245!\270=\300m\210\275n{\323\275\211r\227<A\3106\275\347 \225\274\300%\302=^A<\275\322\300\243=\330\354\020=L\331\016\276*_\313\2747\267\227\275\333m\367\275}\3779=\263\344\001\275\330\311\005\276\376\331\365\274\024\350`=\343\323\361\273s@\005=XbR\275\262b\252<P+w\275w\222\274\275\240\342q\275Q\304k\275\355\3411\275YQ\0269$\356\235\274\224W\315;Sw\320=-\211\247\275\020\370\367=\214\023\226<c\216d\274\204\342\307\274rhU=\336\2771=\322\0077=\016_\205\274p\277^\275\023h\306=\305\227U<\250\020\257<o\333\257\274\311\343\350;q]\000>\346\215\006=\243\230a=\032\276,\275y!\256:\330\362}<\007\031\022=>x\254<9L\336\275Rd\321\275\0377\374;\274g#=\200\236\204<L\260\361<\032\351\255<\016_\006=0\'d=}cX<\232\237\020=|\366\037\275_v\373=\342\234=\271;\364\377<\235w\310\275\240\233v=\177\377\000\275I\330<<L\r0=l\006!;\261n\351\275\367-\332=\256\370\366=\303\350\304=_WC\275\266L;\275\227\360\223\274J\331\263<\317\341\201=\247H\327\275l\225Y\275]\0063=\304\302\241\274P\001z\275\317G\360\273X\367\341<\032\322:=\0344\t\276\356\313\'=\366UP=\227c7\275\310!\235=(\361C<Db_<C\247w=X\007\344=\223\300E\275b\265\"\274\374\001)=\272\350\262=+\346\223\274r2\216=-\250\210=@L\326<`\313\006=\371E\231\275\302X\354<\335\321o\276\321-\'\275X\205\224=\351\024D\275\245F\264\275\352d\263<\r\nM\275\2057\325<\030\324\333=\303\373\236<\250\337\371;\326\361\201\275\276e?\275\333\362*=Z|x<\'\2642=\272\343\260;\230\353\363;\226Ae\275\177#6=\225\255\201\274\261:F=\207\250\036\276\342\266Z\273G\272\016=\267\371\221<\222Va<\303Y\352\275\356\353\026\276\320\0379<\317\035G;\013p\314<\302\177\030\275\347\273S<\0264\013\2761\273\277=@\223\341\2741\314\322\274g\242\275\274[\254\353<B_\276\275*\342\027>\013Q\006\273\274\251H\275\3106\224\274\2405\236<\266U\336\273\004B`</E\306\275\205~\277=\243&\023\276\335\\b=\236\353\221<\340i\333\274?\267\004>?\026\351=\n,f=\330\2611<\321\267f<\246\346\217<\213$\016=\377W\236=-d\222=\307r\303=3\202\t\275~\223\240=\032\376\260<W\345\351<?\023\212;\306-N\273\\\0063<0\277\210=\256k\014\276\\\366S=j\321\245= \263Z<\304\267\257<\217\212D\275\300\266\211\275\366\252c=5\321\345\274\353\327\262\275\304h\351\274\207\370\317\275\203g\026>\237l%\275<U$=\214\014\353<\031\315e:4\343\215\275\325Co\273\352\233\266\275\260\347D\275\315\314\231=\343\000I\275\032\320M=\036\262C;\252\351\201=\373|\246=\327\261\022\275L\312\005>\246\272w;Lg\007=\354\204\247=\207\342\272;\177\031|;[\250\033=\207VC\274\031c\331\273pc\030\274[\014\3429O\373R<\367a\241=C/\035</\336\307=\341m\303\274T\343\243\274\306\352\212=\200-a\275\205 \272\275\311\214\267=$\230U=w\254D=\370\246\210\275}\177\r\275\263EH=\221B\256<\322\377\n\275\001\342\027=\267q\327\275\317xR=\226\237\232\275\202\257\223\274\274\325!=6s\236<\311\017\272<\377\224\345\275m\365\234\275\033\211\356<\253\201\317\274\364O\313\275\351\311\346\275\315z\344<\341\003\313\275\363\207\341=\010\3012=\333\305\366<\014\271\212=M8\036\276\235\016\035=\321~*\275e\343X=\276ec\275\301\217\344\274\007&M\274\334\261\272;\023\325\212\2740k\033\275w\230\224=[\244\022=\264\231V6\244\354D=\307\207}\275\225\035Q=^\t\213=\032*\t=\221\002\347\274\235\262\241=?\362\315=\001A\205\275EF\017=\205^\376\274\322-\274\274\230\016f=Z\322\215\275d\331b=Os\205\275|\212\356=\275?\036\273\277w\364\273\210\036Q\274\307.\201\275E\241u\275\233\001\033=\335\241\343={\326g=\317\375\302<\370\257\034\275D.B<\340:\307<j\331p\274\300\303\235=\217\211\204\275\'\t\324<\2361\233=d3$=A\214\346=\347~\267\275\264>\253\274\327\353\226;c\236\006=\207\263\205=\214\231\324\2758\201\022>\036=\240\275>\225\240\274E\227\237=\305\254f\274\360\206E=\270\211\037;\317`\233<ND\275:\364\007E=\374\376\227=;\261(=B\366\334=H?q\274\255+\231=^E\265\274a~\203\274#r\035<\034M\331:\257\rd=\277\001f=\341G\203\275\242\317\024\276\215:\254\275\005\010\244\275\233\310\371=\267F\210<H\353\213\2734\317\324<2\214\374;\314\256\017=\241\201\260\275\372\277e<\210\224>;\324\343\215=e\227 \274\204.\217;\313\225\321=\305\257k\275d\350\242=*\277\231\2729S\225\273f(\014\275\031+/\274\'\350\202=\345\242\243\275\373g\200\272\006\204,=\367\312\373<7\335\232=\304\026\232<\341\313\321\274\002\242q\274\206\266\370\275\314p\216\2746\016\311=^7P\275\207\326\235:\220\311]\275\305*\330\274\245\274Q=\220h(\275\346\312\220=\304\260\373\274G\"\234\274I\267\202\275\211\300\241<\036\004\020\274\035\346\256\274\025\016L\274\222\275\346\275I\306\255\274\276m.=R\363\200=\225-\242=U\034O\275\206<\007>\231\300\252\275\035.\210\275\365D\322\274\236}7\275\302\276\352\274\204\322\007=\316\224\204\274\275;\277\275ij\302=W\275U>\031\016\017\275\267WU=4\376,\275\312\220v\274`\371\271\275\031\217\025=\207\306\316=\325m\004<\224\337\200=0\013\303\274CM\246\275-\215~<N/\255\274\375\0302\275\021W\351;\033X>=\203\362\014>-$\246<M\023\335=a\230\336\275h\375\026\275\217Z\202<K|\000\275)\034\t=RF\242=\273\276\335\275v\016\211=\020\026\330;\201v\241\275\344\241\232\274%\r\006\275\316\341L\275\222X2\271o\362\017>9A\231\275\340\032h<\354\245-\275\364\033\314\275\005\257\222\274\323\035\034=\211\312\273\275E\005h\274\t\350x=\277mK\274\243\274\212=\002O\361\274\000v\275\274\300\235\257=\227S\203=Y\317\351\273\005\036\244\274e!\207\275\226\315\342\275l\313\371\275\320?\200\275\372\2464\275\002\324\033\274\324\376\200\275\3175\256=g\017\246=\025\352\023\275%@e\274+\344y\275\260\214\261<B\213\030\276\326s\004\276%\204\371\275c\240\230=f\342\336=\237Q\316=\032{\206\275t\206^=\272\216\353:\2510\251=RCq:qw1\274k\350\212\275-{\345:\323w\350\274\022V\214<\2078\006\275\037r[\274N\214<\274r\342\243<kq\t<\366]j\274\245\\\t>\316\034\024\275\326r>\275m6\257\275e\023@\275\221\303\201\275\355\232\311=f\342s\2758\022\204=A\217\213=/q\356\274\nM\357\274i\273\243\274^\032\231\274\003e\373\275\247L\203=\200\271\352<\222\251\221=\321\021\003>\261\256W\274#\004\030\276\006Sr=Y8x=E\363\254=w\275\317\275\360*}=\"\301\010>\035=U=\276\207\231=\205\001\235<\327\324H\275j\004\230<\300\226|\275\220\346\376=X\375t\275\355\234\370\274!\236U=F\001\202=qR~=v\\v\275\337\327\244<\025\021>=\244\013\n\276\313\273\273;3\227\346\274\330l,=\213\245\002;\317/\221=rk+=\226\241\361<\343#\314;Kh\354;\344\244\323\274\227\n\201\274\214\\\270;\021\356]=\316K]\274$#\007\271\360\007B<\262ob\274J\307\260\274p\347\023>\313\223\256\275\240\r\025\275+\014)=7X<\276\'\207\212\275\315\034\347\273\001\235\312<M\267\254\275L2)=`oW\274\3240\310<@>\232;H\304\366\275\211b\260<\177\317\025=\251GI\275o\342\224\275\274\300\301<\362\032\335\274\006\031\204=\257\204m\274\367\360\353=\021\332r\275\214~\354\275nd\004\276\331\263\301<.xb=\177?\273=\327\243\207=\323\240f=\363p&=.N\261=8\241\314<\337n\345<\202\226\317=[\022\267\274\212\232p=\205\2664\274\331-\227=cN_\275\341\333~\275\000\221\026=\033\254\242;/W\373\272\nf\251=\247\317S=\3347\200\275b\024\202=d\225\240=k\177\227\275\023~\036=q\233~=/\337K\275+\304\232\274\360\363q\275\021\323\327\274 \270\246\275\310\244\235<\352L\221\275]\'\301<M\261\316<\366\335a=\200\344X\275\322{\013\275?*\337\274\270z\037;\376\235\242=\024\320_;\345A\212\274_\233Q==\256\227\274A\344\321=\277!\241=\251\010\330\275K\230\242\274\341\315\n=\264\353\247=\235\356\013\2746,\261=\234\353\226\2750\224P\2741\026\257=\365\222\034=\322T\351\274\035\324\034\274\336,\326\274\374=\306\275\373#\253\275YL\210\275F6,\27545\035\275\035J\031=|X-=g\205}\275\355gd<\356$\030\275\220\263\321\275HBv\275\255\272\036\274\\X|\275\035^\310\274\200u\262<Rf\324\274\222\366\251\275Jq4=%\026\324<\356f\363\273\256\302R\275\375\255\332\274\345 \003\276}:\323\274\324\312!=[\235M\275\216R\032\273\272.5=\250?0\275nGj\275!-6\275\342E\377\274\357j\214\274Bn\320=\352\340\001==\221\005\2764\236\332\275F\212\013>\024A\213\275\263X\215\270\265\306\277\275\215*\244\274\303\177\224=t/\277=X\334\300\274\245-$\275\221\327\357\273.\270\227\274\"\317\301=n\215\353\274\205\001\010=tl\355\273\273O\360\274lFC=\006\203\223<hfP\274_t\241\274z3\215\272\003\267K=\322\303\357=>\316Q\275\227C\342=\265\240\206\275\303U\240\273\315\230\231\274\366e\277=csc\275\233\235\005\274a\237\217\275\036\227\210=\367U\037\275\361\345\014=\215\021\220\274ER\332=3]\302\275\332\360\217\274I\r\224=A!c\275=~<=\201\021H\274\016\316\247=\207\006V<o\nd\275\231\221\014<N(V\275\325D\232=B\336|<CIC=\217\000\215\274\362\205\272<\327\020?=\003\264\254<3\242\210\273z#&\275.\'\336=\340`U=U\234F\273\266<\003\274ZD\240\275P\336H=U~l\275\337\333-=t\304\033\275l,\241;\364\243\242\274\304\251P<\rN\001\274o\344\035>\032\217,\275\201\242m\275\262\327\234\274\267l\344<\320\'\023>\371\377i\275\000\333#>Hh\263=\253F\204=\326!\370\275.*/;\243\303\320<|W\017\275\252\352E<|e(=Y<\252<[z\001=\276\353-\276\336\205\324\273\326\374\250\274\036\264\265<I\306^=\243|\322\275.\027A=\331v\252=\273\203\267\275s\220\027<\373\345Y:\317\327F\274`\306\003=_U\304\274\341\355\022=z\2663=N\267\002\273\213w\251=\364k\227=\372\322\335\274\355\n\032\275*\217\025=\035C\214<\241\226\254=[\311\\\275\214\345\005\275\324\221\252\275\367\350\350=\326\256\247=q\007j<Q\027f=r\223\r\274\033\211\005\274\032\030\203<\r\3503\275a\327\030\275`\022\211=\262\303\014\276R\021\267\274\260\341\274=\226\261q=;.\223\274c\026\206\275\n}\207<\216/\267\274\233{s<I\203\336\275\203S<\275\r\2112=V\272\347\274o!K=\337\240\350<\347cJ\274\305ES\275\246^W\274\346\321\350\274\350q\343\273`j\204<a\252\'=\204\277\263\275\r\265\005>\036\243\017=>Q\225\2732\316\006=\252\255\275<\036\031\247=\331\316\007\275]\360G\275\253\272\224\275\002\\w\273A+\324\275x\006\372\271p\241\033>\201\215\005<\317\227\211\275\016\'\204\272\225\212\277=JfU;V\217/\275Q\0343\275m\365A=\274\351n<\315Sl\275\223\260x=\316\236\301<(c/<\250\352\322:\305/d:\177w4<\374\305\201=2\353\r\275\273\205\206=\232\r\344;\233\326\305=\332\364\356=\376\253\231\275HR\377\274\366O\022;\217p\231\275\254\352;=~IG\275t\273\270\275\2444\210\275\344v:<\252\337\000\275\036\234\252=\356=\321<\363\337j;\177*\323<\277{\037\275\246&\216<(\320\311\275\367\236\212=\341\266\004<\363\215\253;\247\240\307<C\330W;9\364\313=\316\233\232<f{Y=\355\335\276\275L[\232;\277\267\217\2754DQ\274\242\367\000\276j%a<\n\211$>\270R\330\275\"\336v\275\010h\034<,bG=\244\224F\275\312N#\275E\263\334=\361F\032<J3\253\275\016i^<\030\207\017<\3069\255=\3131*\271\017\035\275=\364\256\035>Jj\351\273\2779\307\275\275\347\273=\027\263\307\275k\355\203\275y\347\004=H\'\270=\366X\325<\373\203A\274t\251g\275\355\005r=cV\207=;z\244\275\242\355\017>M\230\212\275\016\0058\274)\237\271\274(\036\303<\000#\364\273\336&\352=<\033\005>\356\233:<X\010\217=\201\220\023\275\236t\r=\247\251\276\275\224$\r\274nz\257\274\300\007\245=w\014\302<\305\005Z=\030\3532\275\370\300R<\020\022\226=\255D\033:a\270\241:_\230j\275\3700\366=\306C\377\273\t\340\017\276T\323u=NP\327\272\023g\244\275\017/\336<-n\021=8\326\247=\277\\W\275\262\0033\275\231V$>\356\345\"=\244\177\231\273\"1\r<\201\036\330\274\005)\321\272\242\262\357\273\010Z\021=h9\007\274,\017^\275\030\r\212=\345\3679=\271\262\204;\3355P\274\327\010\277\274\306\301#\275\266|\201=\255_`\275\227_(=\206\325\226<\r:\273=\222B\214=\255\303q\275\234#\215=P\316\345\274F\' \275\205,\234\274g\330\363<^a\263\274\222N)<\026\305\301<.\201\220=\003\200\222\275\315\367\217\275\234\331\332:\365\017\342;\2108>98\226\022=3\326\317=\307\202\263=\267.\253\274\023<\333\275R\365\030\273\327\273.9Gx\241\275\322YW=\236T\243<X\004\324<o8*\275\206\323\023=\373S\024<\367\311]\275\224\352F\276>\270z\275\207\206&=\250j\212\273V\354\232\275\r\177\007\274w\216\261\275\276\332\310\275\002\213.\275\202H\205=\3537F<\322\255\r=\201\013F\275\233\036a<g\370\346\275\362!\003=\213\225\002\275Q\376a\274\353\264\203\2755d(=\274\024\362\273-\'\270<\n8\034=vr\257\274\275\334\213\274\030\375\003=\352\272\322\275\364\257\232<6\242\345=\213%\236\275\206\340\220\275o,\035\275T\364\307\275\240[\376<o\225\345\274\323\377\213\275T%+\275\256\300B=*@\250\275\363\350d;\263\314\330=&\036G=#\240\237=\253\270\353\2748\376\212;\027\356\260=tpy\275\222\252\235<\210\0045\275\231\014\367=\3065\177=\322@\026=\274\320\031<\270N\217\275\202\001f\274\246m\317\275\231.\006\276c\3224;\321qS=\260\244H=\225\345\001<\277\010\206\275;\271\254\275\324\034\250\275.\223\323<u\311\272= \021\006\275?\r\346\274\312]W<r\340b\275d\212\202\273\327\342\233\274\211\232\265<\356s\324\275k\014\261\274C\256\003\275\215\032#<d\356\010\275\004\\\245<\2767}\275\003\3649\274\252\030%\276\342o\243\274\310\022\241=\023O2>\007M+\275\2650\026;\036\370\t=\2028\033\275\365\300\241\274;S\037\275\024\r\277\275\200\253\206\274\276\325a\273 \216\212\273{(\210=>\244w\275\017\016\033\274\036.\251=x<\220=\037\314\255<K\3701\275t\241\216<6j\245=]f\237\275\216\016\321=\210\036\271=\352;\312=)\177!\274\242\245\007\274Nw9\275H\335\317\275\304S\321<\357\236\363\274\025\275I=G\267\276;y\t\261\273\027\330k=x\322g\275nn\321\274\323\027\016\275\227\032H=\366\214\355\274\347\230q\275\036i\247\2746\266\270\275\251\310\312\275j\231\247\275\223d&=6\266\213\274\364\227,\276bY\331\275\267\306\326<)\327\210\275\2710\314\274\311Dj=\250\320\035<\031\005\272\275\356eY\275\002\347\250<\250C\205\275\001\321\316<c\215\262\274\332\'\206<8[\352\274\354O.<\002M\307=\374\312\225=\371\t\247=\377L]\275\000i^\275\361#w\275\247\301\254\274\007\230w=\225J\005=~\006|=\034\000\270=\000\377\021>\354\245,=\0168\236<\240\027\367\274\007\226\006<_\244V\275PY<\276O\235\177\275\364rU=\\W\331\275\340x\353\274zX\\<\224pU<z\204\007=\304\032\312\275\271\321\274\275\n\204i<\'\303\r\275],d={<\020\275V\314\r\276!\234\366\275\255.\004\275N;\217;\033\363\200\275\335\370\306\275\302sE\275\000\340\266\275\352\260\204:\232\373-=\212/\213\275\004\234U\275{Ir\274\332\375\307=\244\211S\275WFU\274\207\'\n\275\020\261\240\275Z\362(\275\331\355\005>\323\010\203\275\351\321\252=\006\350\227=1z\3079\355\0147\275\376\0101\275\210\310\310\275\335\332\003>\314\016\232\273\224\334P\275\001\343:\275\033\2565\275\261\215L\275E\227j\275\302\335\341=\000\006\236\275\243#Z;j\246\035=\355\264\316\274W\357\261\274\035\273\343<\367\003\346;\"\353{=N\222\236;z\313\347=\211\261\241\275\202\246\026\275\003E\245=M\341\017=_ni=\301\372\243\275xg\234\275 \331*;i-6\275\310\036\000=mo$=\325\302\203\274\352\351\373\275U\177\"\276H=\317\274\254z{\275\263\330\271;E\311\206<2HM\275\260W\263=.#m\275t\321\017\275\\\216\341=\234\322\370\274\017\033\211\274\251\211:\276\227\020\031>\017\034\257=\330\257\026<J\rE\275\263_)<eL\004\274rkd=\257\266|;Xz\251\273\266\262\024>\035\024[=+\304\246\274\235!\377\272\023\241\302\274\201\311\353\273\273t\204\273\301%\220;\356\203\033\275\315\340\244<VV\036=>\032?=\'C\255\2759\227\331\275E\030\370\275\027\234\325=|\263\232\274\374J\226<\333)\221\275\nj\"\275\346\313~\2758\245\224\275IQ;=v\240\257\274\376\353\272\275V\205[<\326$=\274U\220T:\010I\360\274\273%\324\274F \371\273Q\213\004\273\373\230T\273\252+\362\274\226\301\326={\274p=\312\002\006\275\300\301\275<\007Y\201\275\324\274L\275e\247\217\275\3372\037=[+?\275\345~@\272\331w\327=\267\270\000=\032A\230\274\"J\r<wxM\275\314\306)\275\323(\237<G.\211\275\306\244I=R\317\026\274\252\307\247\275\334\256\323<\2342j\274\007I\002\275#yi=T;\336<\237VA\272\003\264\270\274\235\334\003>\242 \366\274\004\223\361;$Y1<r<R<\034Vi;\311\340J\275BW@<\262\000\320<\232\346\"\276\020\315\316=\023\006\306\274@Es=\007\211\375\275\333\371\363\274\264O\230\274\026\206\306=\265\274\226\274\217\201\330<\301\266$\273\001c-\2755k\334= \252\";r%\226=\336\307x=\265\016%=)\023\210=HN\212\275\r}\007\275b\"\224=\205\311\375<I\234\003;S\274\236<\252\205\337\273d\227y\275\3401\317\274\355T\004\275X1\332<\305\263\270<ui\307<3\033j\274u\324\236:\331\000-\275p\370\320=\363\025\210\274\230*\214<[\255\202\275\214\004b\274\274b\232=\257\265v:\324\026\241=,\347^\274\257\361\031=,\346\311<\2055\310\273\005\230\236=0+M=\306\r\024=\266\302\314;\024\303\310\275\303\213\341\275L\034\233\275q^\037\274 \260\027\275\2014Y<\330\032\253=\302UJ=\337\246&\274\244\020\250\274\302\212\342<A\010\352;\264\243\243=\034\271b\273p\315&=|\000>\275\247\364`\275B(\254\274\223C\210<\321G\201=>L\006\275\360\341h\275I\370T=Bv\211<\004H><qJ)=C\235^=\332\376\360=>-\373<\007\274\254;\022\370\271\273\262\007\206;/\262f\275\270\377\320=\245$@=\343]\354=\331d}<\31171>\004\340\331=[\217\014=\314\265\276\275\352\307\331\274\367\"\007\273:\317\205\274M\276\367\275\376\310\352\275\326\025m<)`\260=\363C4\275O{\214\275\366>\324\274d\t\245\275\004\266\237<\016\340\345=\200\304\252\2755\325\314\272\346\022\253=\016)\031\275\240\363\246\275SQ\241\275\006\240\241=\220+\250;DG@<\314\037\323=)\246H=d\034\004>\316<\034=x\314\317\274\"n\336=\3267\221\2759|>\275\014\373\235=\210w\251<\010\261e\275\243\301\213\276\232\313\344\274\267\306E=\344\335\225<\371{\376\274l\371\023\275\352\245z<\\76\275<Y\006\275\204\257\030\275<\013\370<\224\335\035=\253\307\036=\272\177Y\275\233sU=\276\207\217;u\320\270=ri\213<\003\356\362\275\345y\241=X\222\345\273X\367!\275\010\014\366<,\347\252=\274\337\310\274+G\362;\001,V\2754h\375<\200\342\"\275\314\232\234=\351(\006>\252\331@\274\245\262\202\275n;\331<\030`3=l\314a\273X\346T\275\330\367\030<\177*i\274\201\353\221=\036\257J\275Z0\340\273W\201\324<\327\356\203\275\200\005\004=\242\274|==\3134=F\231\335\275H\274\236<\271\025\245\2757\333\331\274\277d\364\274\037c\250;t\341/\275\260\021a<\027\367\311\2743Z\275;\230-D<:\352\312\274\033\310[\272\372\260W;YQ\033\275\r\265\001<-[,=\177\220(\271W\225N\275\364\260\325\274/_\226\275\261\020\251<-Hr\275\'dl=\000\302\204=fX\215\274\364\223r\275Vb\030\2761d\255\2746Wx=\027\006t\274\267\230J\274\036z\306;\201P\002\276\r\237\214<.\324t=\226.\337<\357\3746<\304\002f\274;k\013=\342\330\t=X\363\214\275\250\237\312\273\341\334\035=\351\'\224<\256G1>\354\252\022\275\330\332\006\275\353%}=\212\316m\275f9\306=\343C\320=.`\360<\\&p;\304)\350\274\224!\323\274^z\027=G\021:<\351\333X\275\352\260\310\275\200d+\274\354J]\275\372K6;;_\027\275\363l\r<]\026\362<\207 x\275\331\265\231\275\344QB=A\257\365\274\033[l=\264\310\215;\033\247\231<\210}-=\000\275\247<}@\027\274&\232L=S\245\225=7+\214\275%_\211<\'\366\303=*|\212<l\222\372=H\333\377\2750\025h=\206\301\310\275\364\375l\274!\027\345;\340\312D=O\203n>\340\325\207=e\222\301\274*\373\346\275y\027\205=\253\253\330\274\223pm<\205\341\202=\016\\q\275+\216$=N\260\321=\235\377\231\275>\247\016>\202\326N\274\357\214\302=\016\261\207;\036\212\202\275f)\314;\277Pt\275\340\246\252\2741\375\370\275\030\346\305<F&3\275\303\217\267\274\350Bs<G\237\325\273\207\224\202;\256J\247\275o+\267\275\236O\200=\026\351Q\275\376\240b=\311Y=\275\363\356\221=\225\032C\275\367\274\211\274j\376\000>MJ\320<\302\356\363\273)>}=a<#\275\r\201\331;jg\003=%\313\030\275\345\236\233=\314\n\006<\373\033T\271~\023\311=~`\334\274*\350\350=\250\274\006=\311\230\031<\275\177\323=\241r\203\275\335\213E\275\311{\205\275\212\366G=\361f\326\275\007\337?=/\206\230=K\216/\275\270O\272<\261\025\244<\243m\007\275IS\376\274+y\205<\216\006\261\274\246\265\035=&\242f=\355\026 \276\253\271H>\365\235\256=\035-\372=Q2\377;e/\353=\317|\000\276\353\366H\275\332\276v=\300X\267\275\241\275\227\275T72\275\275\325F\275\256\3242=\220\234?\275\226\303\375\274\355\221*\275*DT=\207\311\217<\375\"x\274\323\324N=`+\026<>w&\276\274\341\210=\201-\364;Y\361\225\275\276\352\223\275j!V\274#\354%=o@\365\274\316\364r=\311U\374\274\3134\211=\023\322\311\275\177\317\230=C\274\027\276L\303\307<\372v\252=\207#<\275\027|\334=o1\376\272\324\270\311=k\213\210=\257\337\221=\305\371\230=\242\247\r=\340L\021\275]Bc<\306G\004;\202\210\206<`\230\234\275\347J\225=P\2062;=\315\240\274\266~\336\275<\224U\274\026D(\275\037\227\253<\347\363Z\275\264\314a\275LRh\274\316\356\361\273H\347\200\274F8\342\272\305\331\324\273\377a\235\274\026\364\311<\034y\177;^\311\206\275\327 R\275\232^\\\274):l\275\213\325\233<\010|\023=\033\353\250<y\236 =P\346\225<\210\264\010=\276\260X<\r /\275\201\373\004=Kv\007\274| \276:#|/\275\244\245\363\273l\257\022\275\347\225\n\275\231\3574=\221}?=l<\336\275(\000\311=\3431\300\274L\231\246=?\207\274\274\3178\336\275\267\022\363<\324\327\332\275\374+\237\275{\320-<H\t\362<\202\225\337=\261(2\276\021\307e=\220\307a=\321\245P=8\213\023\275\2518\310<qn\372=W\312\216<\365\373\226=\245\216#\275K\002;<\365Z\267\274ve\216=\030\2672\274\330u\226\275t\362z=R\205\'=\244\301\202=?\177\233\274\026\024\256=.\226o\274\300\314\236=W\030\361\275\231\214\207\272U\0220=\257\266v=\342\253\177\272\002*\266\2755\375\027\2765\341\206<Y\343\312\275\0372\204=\332\336\227\274\177:\251\275 =\006\275\300\326\327<\330\331\242=\030\352z\275\310N<\275\017\234\247<V\352\347=\2648_=6\025\207<?\372\036=\217Y\'<\001\006\262\275\224\305M\275\\D\303\273\365\340L\275\344,\010\276\036e^=\022\323\214\275\322c\262\274\014\356u<\203S\266\275\n\006\032>\341,V=\343a\241\274\312S\235\275\343\275\211\275A\r\300<q\207\247=\212\241x\275I\001\021\275?\003\020>\034o\322=\014uW=*\211\304\274\321\223m=\252\237\010<v1\021\276\370<\026\275\226v\321<\262\\\006=\225\004\242\275a\374\016<IQ\366<r\342P\275\0306\312=m\330\261\275\"\327d\275\364\350\245:\013\014\315\274X\340\256\275\']\204=h\244-=\256\354\245=\366\312\344<N\211\323\274\240^\344\274\336R|\275\361\211o<\373\241\300=\253\347\005<i?\366=\017\376/\274\031\346\200<C\320\003\275\361f\212\275\344\022\006\274\020\240\210=\375\310\254\275ov \275\007\360\245\275\330\006,=\024\016@=$d\t\274\336s\202\275\211\315@=\000\021\231\274\314\266\236\273\020A\304:q\234\307<\310\210\213\275\372\246\016\275\360\033\337<1\026k<\301\273\206=\311\337k=\337\255\215;\312|\030\274SD\002=\226l\372\275\322\'\222\274X\003y<\370\367\303\275\376\253\243<\026\234\274\273tj\216\274\253l\036>\304-f\274\256*u\275\322\271\025\275\'h\275<o\257\213\274s\240;<u}p\273\207\343\252\274P\276\001=\037\271n<E\322\377\274-\212\250=\017^\217=\346\262\262\275X\254\023>\271\225\261\275p\"-\275\241y\351\274W3\334=\232\375\366\274\245\262\343<g\251\246\274\277-\222=\037\221\034\275\273\312\347=\207\272\217=\323\031/\275\001?\217\2748v\002\275Knj=\177\342\272=\346\216\007>\311\257\220\275uY\237\275\273-c<\333\300\350=\257U/\275\200SM\275Pt+\275\220F\273\275\264\242\r:X\374G=\273\233\006>\343\t:\275\371M\311\275F\335\303=\\\224\232\275\224`\362\275\337\352-=<\347\235=\214\211\214\275\n\261i=\302\337@\275\020D\312\274\203\317\t<\352\312\361<\3175\263\274\212\213\230\274\302$G\275\276\376\250=\364Hh=J\376n=O\212\216=\377\276\234\275\265\374\224\274\373\261\276;v\253\237=_tX\274v\324W\275\363%\r\275\371\177\326\274oD\r>-\013:=\022\302\226\275\240\030h\275\3673\245\275`\212\271\274qi\220<\337\317\007>^\226#\275\321cW=\036D\206= 4-=\323E\257\275I\324\033=\346\2554>\031\370\004\275Z\227\002>.\341+\276G\224\005\275\317\214\207\275\230\320\245\275Z\232#\272 \262X\275\352\203\005\275\n\t\257\273\352\3034=\t\251X\275`G\364\274\333\237#;{H\027\274\322\347F\275q\255g<\323c\007\275\275\036o\275R\334#<\347>\307<\033\2178<\212\210|\275Q\324!=\232\304\233<\017*\000\275\001\005\306\275\256\232\216:\274|\206\274k\343p=\230\305@\275D{\350\274\350\251\345\270UQK\275\217s\275=\343M\263<\275\033L\273\266\003c\275\307\221\n>\343T\213\275\341\365\241<\032?T=H\305\304\274PO@<\022n\026;\300f\212=\245T\205;/\250h\274B\325\231<\341\312(\274\235X\256\274z\t\226\274t\342\274\273uF\234<\350\017\343<\227\343W\275E\314N\275\007\366X\274\244[\207\275\002\035a=c\205\247=\310\311W\275\344*P\2758\253\234\275\314\031\363<`\376\232\275\1772\245<\332F\255\275\233RI\275\0035\335=\221\321]=(\244\324\2749T\300\273l\037\"\274\271yH\275\247\202\002\276}\360\376;i\342\237\275Nj\303\274V\2542\275\004*\205:\020\3505=\000J\004>p4\037\275\003g\375\2747\217\025\274\021>\260=7\237i=\317J\203<\210\001\222=\222\210\204=\241\273\222=\320&,=_VS=Wy\232\275\013\203\354\273=l#\275\244\255\271=(\214\342=\033+\273\274\0354#=\231fc;\014\241\335;\274^\212\275cF\223\275E\361\225=\207\331d=\330\217\221<\235\240\242\274\0001\372<Q\240\323=\221\356g\274a\r\226=p\3326<}#\345<\247<A\275\373\327`<\226\207\232=\303\253\364<\372M\266\275/F\242\275\2009\301<]\364\213=\021\032\372<\344\242\200\275;\360\204:]6\342\271\037\274\020\274\335\007\"\276\027\006\376=F7\302<A\362\262=\223\322\217=\323\267_<V\207\226\2751\007\324=\212Q\264\274\310\316\266=_E_:4\202\'<\306l\t\275f`\260\274\323\257\203;N\275\326\275\365K\333=Fy\207\274\030\223H\274-\376`\275\220\232\022>]\\\342\275OZ~=\250}I=d\326V\2742\312\251=\244\223u\274\324\225\310<\001y\000\273\202\247\177:\016s\236=4A\004\276\027\303\334=Iz\367=\"\347:\275C2\231=r\343\246\275\001c\275=\307\352\340=!\026\304=-\342\"\275\204\210\216=S\247\355=\200 \023\275\216\241\272=\333\306\001\274=\326\321\275@W\301;\355x\026=\304\307\310=\232\204\270\274VZ\305=B\307\207=\006Q%\275\352\320\023=#W\270\275\220\313\215\275\364K\205<\364\335\332\275\026\016\314\275\205\326{<\014\270\215<\035 \355\274\357b\230=\256\220\240=\017\344\340<q\3025=j\240:=\336\304\355\274Uu|\274\214Nj\275^Y\351<\201\316\253\275b\332\330\275\0304\036=b0c\275\306\271\340=\366\212\366<a1y\274N\266/\275{O$=\037\t\007\2752Y\262\275y\2615\275\360\360\343\274\313\376\353\274\351sV\275\016\342\241\275\036>\004\275\24472<\245:\200<\262\367V=\036\2427>\365\263\r\274qC\321=\2467~=\334d\253\275\362\271\205<\026O\n=1{\211\275j\222\304=L\024\314=\210!J\274\241\246|\275\371\367\002\275ay\235<rk\"\275\t\327\031\274y\260\303\273_\343<\274(\356\355\275E,\203\273&\320\037=\263\r\027\275b\0029=\234]\246<?\356\223\275\3576\270<\326\203\274<\224\253\\\275\023\243\243<\003\337\322\275\251\227N=\354#\314\275\240\302\237=\375\2442<\351\014\322={\323\353\274\377\202\n=\350\335\223\275k\222\200=[\313\000\276<\035F<\271\336\227=\032\337[\274\343dD\275\332\330\265\275ZR\036\275Z\260\234=\200s3\274\261,\316<\315\244l=\261\t \274\337\351\000=\354\004D\275s3&\275\n\235\374\273\'\r\207=\\\317[<\211>\257\274\341,\207<\307<\240<|\342!=Gi\232\275\336\243\325<{\240\017=\300\025\336<}\001\202<\333\217\304;\232\031x\275\3634|;\222\304x=W\340\201>M\372\213=\027\333\341=\3639\325\274^v\334<\221\207\014<\367\330\262\275\373\210t<80\303\275R\205.<\222+\251;w|W\274v\302*\274\3348\335<WW\215=\ro\304\275\254o\377;[\n\270\275!\371\240\275\317\265\227\275\362\252*=\330\205\200\275\374m\242=w\273^<\320\035\020\275\246\303H=P\235\316\274t\217V<\260\322\215\275[\327.\273\345\277\214\275GU\250:3S\304=\251e\226\275Un\300\274\3332\200:\272\246\005\274\025\004e\274\326^L=\230\031\266\275\360t\243\274\203\\\264<,\332\2119M\034\251\275\032\330\206<\024?\234<\305\323\031<\226\351q<+\373\222=\307\260\305=\255n(=b\223\376\272\233\356\265<KV3\275\337\2050>\016pR\275\250o\246=K(\212<K_\022\275\216\354\006<\366+\265=\321l\240<z\376\010\274r!\001\275\277\320)=!\230F\274\223\342\267\275\376\226\250\275\200\256\213<\304\327\336\275\277}\333\275\021\t\014<[iS\274\377A\224\274\272\334E\275\\\270\231\275\254+ \275\360\376\220\275\022\026B\275\251\203\354\274#\256J=M\236\264<PR\006\2751\363\316\275\372\303n\2742\332\276\273\275zE=\355\371\271;\014\206\330\275\334\277;=@\240\252\275\002X\316\275bBS\275\013\340\013=\320\316\264=\236\251\246=\377\377\236=`\237\277\275,\361\002\274u\246\021\275\346\265\007\2767\313\344\273\377\231\362<;\255\205=\270\306}=\253\356\210=\370\2155\275-p\037=g/B\273\243\245\266\275\022\023\006>\r\271\344\274A\320)\275t\024R=y\275\036\275\312t\'=\233]\377;\251\217\001\276\373\252\207=\325-\324\272\010QP;\312\335\257=Ew\255<q\241\217<\353!\223=\021\3240\274=\205C=M)\005\276\276\372\217\275r!o=\250\337Z=\225\030\306\274\213\201]=@T\247\275\037\013\274;\304q~=f\332\036\275\362\242\257\274\275\340\355\273\242X\230\275D\211\221=\277\2431=>\024\374<\\7\217=e\036\341\2724\261\313=\024\340\250=\367wm=\017\374\265;\262T\202\272g\307\025\2741\311W\275\310\3119<z\323\204\275\206\215\221=\264\237\304\275(8k\274h\230\252\275c\214)=\251\246\322\275:AF\276\243[\246\274w\302~\274. .=\331\355M\275\030K\215\2756<\321<40\350=&t\254\275z\302)=\365/\271<\322\255\003\276AR\271\275\243\306\362<\367\205X\2758X\016=\262\337\021=\207[\234=9]<=\263|\310\275We\233<\370\265\200=\017m1>\356\0339<FH\r=\215W\252\274\344\\\210\272\277\272p<5\330\357\275h\323_\275D\370\270\274n|\262\274p\277\313<hJ]\275\212k\323\272\021@.\275\020\213\033=r\016.;\343\217\221<\036\312h=96\342\275!O,>\376D\352\274\245\177\005>j\221\223;Gm\267\274\277\342\024\274\303|\001<\005\302%\274\023\216\215\275\000\221\210\275V\275\004\275\215\216\222\274$\363E\275\006\005\214\275\2370K\275\317hT;\373\313\322\275\033\3262\2752\203\017=\313\370\336=HXZ<\267f\216<\\l\262\274\235s\251\274\343\354/=e\311c\275\253^\342\274\014\321\324\274g8\203=\014T\201=\351\'\236<\317S\250=k\005\217\275Tk\315=\004\374\305\274x\027\030=\326s\211\274\313Cd=\261\242\275\274\333\250d=\212Q\303=\321\003\247\2736\322\334\275\222\326g\274-\304\200=xI==\350\1774\275\032|.>\177&\245<\214\314\207<\035a\336\274W\363\214=R\372\222\274\330\311\321=\217b\237\274\t\215\213=\000V`\273\345\235\326=\343\013\310<\244g\366=\345L_=0\360\243=\312-J=|P\332\273\367\267\342\274,}\004\275\007%\212\275\354\240\301\275\376\004\347<)\254^=\275\0078\275Q\033\337<{\242X\274\331\347\236=\322\252\333\275\224\345\256;)\003\'<\275\335\n=\203\255\224=fx\035\275\300Og<\302\024\211\274\007\353-\275\251\251\253=EF{\275<7F\274\304b\233\274\007Q\234\275u\343\226=\250\304\212=\343L\215<\024UF\275\346*\316=\333\006\023\276Hf\037\271\tt(\275\367\327\247=\340y\253\274\327\\\301\273C\263#=\275\357\356\275i\372p\275\3513\201\2744z\264=\372\210\374==\311\337=\254n\002\275\213\214\202=\240\203*;\253\2251\275\033\217n=\271\026\254;`\212\226;\'\207\227<\200\206\343=.\315\000\274\036\036&\275-\302\234:)j\177\275\315\3354\274\241D\020\276n\306\305\274\272\002-\274+\330\275\275\230M\225\275+\271\236\275D\252\230\274\0348J;Q\260^\275K\372\027>Z\024Z<\341\'d;L5R>\305\360\216\274\320\223\034=\343$\036\274\317\226\357\274\366\200\026<\371Z\365\273N\354\225<W\273\035\275\035\265\016\274_\320A\274@Q\006\275\313\317\014\276u\005\201\275i\014\323=\3020I\274<Z~\273\036\034\262<\220Lc\275&\357\223<\246d\303<\232\017%\275!\037\372\273\031\003\363<\203Pn<\277M\325=\022Z\234\274\306Sy\274j\317\245\275\355\372\n;\271|\204:\246\201\031\275\026\364+\275?\247\355=D\353\321=1\341\362;\312\017\275\274y\316#\275O\320\254\275\212E\260\275\370\263\023<\377D\220<\017\324X=\317\225\020\275\223\264*<{\030#=\304\017\261<\303=\330\273\022\253\217=\205\344\027\274E\n/=\r\274J=\370\234\025\275\221\r\334\274=\007\323\274\n\275\036=H\317\241<\270C\205=]vo\273\014J\326=\021\022\000>\371\270\211<)W\017>\275`(=\307\035\357\275-\316O<\254[/\275\003\006\271\275\216*\216=\367q\201\275\241\346\251;\366\244z=/a\266<r1H=\337\021Q=\206\274$\276\215\263\351;X \267<yq\352=\241\030\n\276\021\346\264\275\'o\300;L5~\275\327\2345<bw\037<\2146\311<\240\300\336\274)\026*<\306\315\204\275G\234\0279#\324s\275\306\232\327\275\345v0\275\360\273\255\274\310\201\021\275\211\013\256\275\303@\241<\355\351\213\272\221Yt<B\020\306=\016-\320\274\341\223R<v\304\243=Fe{<Q\363t<\270\355\021<\305\027}\275\320\247\020\276\026XJ=\220\007\010\275\315?\000\274\325\364\030=)H\010\2752!.;\214\010.\275\027J\260\275\264=\001\275\326\243\212=h\324\016=\302\357\207\275#\264\251=\360\023\265\275\264\233Z\275Z\227&\275\036\356%=\332\345\n\275\302\005\371\275\365\241\305=\260\274s\275\357\341@\275\276\206c\274\361\242\211\275\341\231\'\273?\311\001<\322f\t\275\371\030\356\273\035\035\343\275`\323\374;\006\006\000\275%\366\225\274\316\005\023>\374\022m=1\000$>\226p\301\273\261\265z=\343\033N=\232i{<e\335~\274J\323\013=)\325\276<\036\000\217=\027\276&=\243\337\026<8\026\315\275\354\240\357<\217%\037=[\226\004=\020\\\242<\275g\253=\341jf\274G;\377\273\200\223W<\301\364\267\274\323\177J=pB\211=2\225\350\273\r\371\351\275+\220m<H8e=:aH<\314%\251=\203\350m=\202\020y\275\017\030\256=[\207\034=w\277\274\272Fp\032=>\025\007\275\234\0045=\347\000\214=\'\332\255\275Z\377\257\275\227[\374\272\016\331\236\275\352\314\222=\230\350_\276\007\324\246=I\326\345\275\345\317\343\274_\345\202<\201v\231=\ny\231\274\233\342\032\274\004B\200<R\030\007\274\236\021k=\t\372\261\274xR\201\275W\255P=\205\260\344=>h\240\2756I3\275e\317+\275\265\013F\275\205\031\032>\025v\221\275OR!=e\311\306<}f\273\273\211\327\205\275}\006\224<\340\002\007>\323\306I<\334\224C\275\267\225\001\2756\002\023>\272\352\261=\235+\024\274tBv\274\200\334m\2751v\217\275?p`=\266\"\035=\217\034\320\275\206!\337;\033\033\226\275\250%\026=:l-\275Z\371\340\274\306h\242\274\n\024\004\275\261\371\246<0\272a9\007N\001\276\021\037\261;u\345\340=O\273d<Tu\326=\\S\316<\271\264s=\342r\323;\303\203\252=\030\243[\275\201\363\225\2746\007\335;q\035X=\214\341v=\261\305\242\275d,\003\276\334W\276\275\276\224\016\276>\224\372<s\252@<&\033\313\275\276=N\2757\033\202=[\243\370\273\343\230\221\274<\245\356=H\353\020>O\203\305\275Y\0203=\023}\"\275\373\226\226<\023\032\364;\250\270\300\275\003f\273\275c\2048=\247\363\204=[.\366<m\031\316=^\205T\275\275}\266\275\3601\332\274\311r\007\276\341\275}<\330\370\265=\270\312%\272\230\323`=\351\235J=\310|O\2758 \234\273\264\211\020\275@\206A>V\003V\275k\213H=\254,\335\273\000\010\322\275\313\204\014=\0363\247\275\037\272\362<\025\031\376<\005\332\002>\350\2624\2751\360\272<\267\000\016<\211\214\246\272\260\032y\275{\271\016=\204\352\255<\007\254\321\274~\222\241\274\224i\034\275O\021\200=.\337\324\273 \362\273<8\375w=\357\257\202<r(:\275 \372\237=\222\304\r\275\333\315\210\274TQZ:w\244!\275\204\305\022=4\000\311\274\362\257?=\030I:\275\3562P\275\215*\223=\211\356\226\275\034\373\202\275N\221\230<[\322\210\274\2731\237\274\257O\226=\265\264i\274\233/\202\275b\304\254<W=m=3\202\177<\363\004\231\273\330\377\356<\250NC\275\313\375\242=eE|=O\252\037<\215\272\354<7\226\331=\326\037\275\2753\255y\274\361\377k\274R?z\273\374#A=\031\362G=7\032\207=x\335\033<\307\201R=T\207\214\275\274\323<>\246\240\270\274\305\261\207=`s\037=\034\346\233<6\326<=\242\222\247<\'\230\242\275\273\r\325\274\004j\263\275\227\3158\275\3555\371<\365\354\207\275\361\232\231\274a\257\333\275\206\304\303\275#\355\001\275d\3752<X\321\202\273|$\230\275F\010`=A\237\244\274\266\335\261<\217f\323<\220\'\222=\257\244\360=\024\337\231\274J\347\350;T\331$=+\304\332\273\267\334\312=\177]\007=H:\000>\366A\307\275p\353\r\275\215\201\n<\305\020\300\275\367\326P\275\013@\035\272\350\007{\274\tC\264\274\020\2466\275\016\271\302\275\345X?\274Fr:\275:\345\267=u\210\203\274ah\253\275(\r\027=\250a\206=\242\231\000=D=\224\274\335$\202\274\002\006\025=eg\234=\252x\272=\202\010\313<\252\264\003\276\333\335M=yN\316=g\r\302\275\371\277\225\275\314\326\"=\317-z\275\033%\016=\242nL\275\026<\304=d\nk==\243\272=\027\364\005=\351}s=\264a\270<G\342\343<\215\021\272<\302\357\221=\353\202\360;Db\377;Z\266\000\275\327t\227\275\3461\'=0\323`<9V\332\275\207\271@=\203\354\243\275,x{\275|,\212\275\025X\021=\214\375\266<g\016\016=N\261v\275}\347X=\223\254t\275\335\234\302\272\326Y\000<\027\234\251<|9\030<Y+k\275^\211\335:\336/\213\275K=L=\013\032@=\262m\325\274-&\">\235\266\036\275*\203\266<\013\036e=e\353\007=\221 \255=\210\252\013\275\343t(\275`\256\336\275\243\302\002>\002e\206;s\274\260\275=\004;\274\377\023\005\275\3165\246=?U`\275\235y;\2740\202\257\275bu\317=)j\306<\313K\211\274D\325\321\2729\322\002=>dB=\347f\030=\333\210\357;\332Z\257\275:\243\340<\223}\260=\036E@=\271u+=\301\353\263\275\357(\337;\261N\264\272m{\354\274\211\301i\274Q\005\227=\223\034=<\211q\303=g\311\312\275\227\364\203;\357t\365\275\236e\223\274{K\313\275\t}\023=@\345Q\275\0305\n\275\2433\035<I\377\332\275\365 \226\275\t6\323=(\0079\275\367[W\275+\t\002=\262\025\262\274\004\264d\275\360q\223=\207\034\254\274\305\024R\275[\000=\272\214I\036\275\330\333\266\274\030\245\362\275V\327\\\275q,\214\275\'A[\275^\316*\273Rl\344\274\336\017k\275r\n\303\275\250\371\255\274\347\304\202<\016\035J\274\242\274\277<\335\330b=\242\032\214\275,\3079\274wXZ=(+\006\2759\'\021=\0210\301\275\371\014\205=\327\376U=\207t\370=\204\227\033\276\265\302;\276\314\257J=\"\266\302=\252\201\242\273\337O\264\275o\245\t\275J\032-<\222c\334;\332\035W=\010\211\276\275\362}\235\275\273\014\240=\362\200!\275zI7\270\303\266T=?@A\275\266z%=Cvm=\261A\355=\277E\002>]\264\277\273\2377\313\275\201\231p\274\356\345\010\273\302\355\325\275\200\304\212\275\236\256\225<\216\230;=.v!=\366R\032\275J\207\322\275f\323\230\274w\367\274<=\322.=\221E\016=&i==\212\321G\275b\316\341\275W\276(:;\030\256<!m\323\2757\\(\2750\023\303\275\201\274\027\275\227\304\243\274\310\211/;~\341N=3\255v\274\256NM\275A\201%>-C\031\275\006\003@\275\250<\231\275!xX\274\304\310\240\275\002\340\237=\002\237\265\2747|#=\226\230R;I7\200\274Qc\235<\234\341(<\205\306O=\234\'\244={\264\375<2\005\274\275\347\251\277\275\367d\267\275$\206\277<\253\305\013=\200\310\006\275\370\211\'\275:\235\265\275\"V\330=\311\017\273=\305\345\242;\203\301\227\275\347\230\032\274h\272\205\2752\254\266\273\004\r\376=XZG\27519\027\275\331\241\321\274C\275\242\275p\270\320<\361>\246\273UH\006\274\351.\300<\377\212\364\275\354\340\234<\010!\347\275\250\327\366=\351\225\270\274\000\236\220\2741b\3149\311\021\350\275\311\204\335=\236\267\t\275\337\271T=[\362\225\274\351\2263\275n\2520\274\323\001y\275\341\266s=\332\226\261\274l3\226=Ce!\275\030c\234\275\025\246\363<v\2114\274X\340\374=\202?A\275\276\365\256=\337\0149=\274\370\214\274 \344\206\274\026N\342\274}\206\321;\355\260C=]J\316\275\303n\313\275$\227\207\274\'\277\353=\373g\233\274\264\271\241\273\000W\200;\365\330\033\275\"\205)\275\024\217\300<\332\355\233=ip\200=\32577\273-\037*=\"\233\333\2751\302\340=O0\207\274c7\210\275i\201\312\274\220\214\032\274\020\250\264\275j\177\036\275\2012*\276\263\327g<\t\251\271\274\216\257\331\275\200\021\017\274\027\017\354=O\220\030\275\303Ed=\317\037i\275\252\217\002>\325\301\371=h\310O\275\014\231\316\272\206y\332<fY\034\275\004\035\367\275\000\350\300\275!\205\206\273\347\314\337\275\032\n\216;l\340\037=}\302u<0j\354\273\221\275\345\275&&\345;\353{\332\275\270\354\230\275\321\014\301\274\002\361\361<\317S\301\273\326\225\014<,\331\027\2742Z\307<\317\374\363\274\006\333\215\2743\240\243=I*_\275\370\002\225\275z>\000=S\227!>{\310\313\271\356\352\257\275\347N-\275\364\211\353\274\356\257\371\274\016\257\203\275uf\033\275\342.\366=\224\253_=oh3<\337A\303=$\202H;\241t\251\275\236Z\235=]\214\323=\246\270v\275\354\370\201=\034Gj\274xl0=\3624\243\275\274&\r\275\313\213]<E\276\322\273\266\210E=\233\221\343<\027\211\337\273Uq\225\275\037\3715=\371=O=KM\207=\351\334\356<\220\241\233\274{\262\221=c\016\260\275Eg\215<\364~\246\275\027\200\266\274\007\263\320\274\254*\n\275\230zp\275_\251\324;\031%7\275\344\2249=!~\275=\236V\000<k\270\242\274 0\311\275\337\035\224\275\252\266\021=\216\344><b\274q\274\267\370\304\274\036\266N=\025\255\030\274\2400\327=\230\363%\275w\217\267<+\3322=\317\314\221\275\201P\253\275%\361*\275\305\312\260=\202b=>\365]\275;\301\002\215=\217\344L<\254\217\264\274[ \205\275:c\014=\374S\371\275\325B\016=\231\232O=_oL\275s\355\245=\354\220\367=\313#\337\274)~\304\274~\206[<a5\013\276\"\346\034\275\267\331\345\2746\021\205\275\345\273\365<\231\370\306=\315\220\372<*\333\342=\366\272\273=\350\266\251<\005\364\000>\177\023\305<\'B\017<\357&\301=9\326Z<\010\200\222=\2619\270=\3021\372<Z\006Z\273[\300\022=\230n\275<\275\212\214\272\250X\247\274?<\r\274\326\\\235;\300\306\310\273U}\216\274\330\370b=8\273\304=+\021\255\274X\226\220\275\025\202\271\275>U@=\211\330\252=\036\262\212\275\311\226\350;\014\320\326=\262p\240<g\360\033\275\02301<,\303\244<\346//\275D\347b\273\376\200\271\274\266\034\252<\202\226\266<\227I\253\274\037\370w\275R\nR\274\026\237\222\275E\000\336\275z\214\244\275\'\273\341\275\020`\007=\203%\272=JN\326<\210\300\026\276\017\312\247<\377\276\307\275\237wB=\260&\366\274\265\010n:\362\216\004=\0226\005\275\217\r\026=B\020v<\241\333\010\275Q>}\275\334\236\223;`>r\275\035\212\327\275V\305\323\275n\237\360\275\324\332c\275\225DA=\232\r2\274\325,\265\275\303\211\343\273#\330\\\274\376}\247=m5g\274\357\330U\274\364xW\275\030E\262\275\312,\262\274_`\372\274\335\372\267=v\267\262<\343\024==\347\037~\275\024\244\207\2748\022m<\031\352\002=}\240u<4\013\264\274\301\243\252=UY\267=tL\270\275\014_\317<L\005\342<jj\300;\343\020\202=\376},;a\276\201==\005x=[\tx\275*\257\001\275\273\230M\275B\210\356<g1\017<\343\317<=$Q\356=\327\267\316\275\355\021\312=\036\t\377\273\255Uc\275q/(=\321\215\314<\000\216+<\366\'\017\275\350N\217=\322\340\250\274\237\231\217=\td\203\274\305i\006>\307\305\026=Lm\346\275e\261`\275\363\255[=\nD\201=Q\330\223\275\344e\006=e\330#\274i\344\203\275r\'\302\274\304\022\275\275z\341\237=\221\021\202=\311\220?\275>\356\227\275s\276n\274\036\344?=\321\0102=\350\004D=M~\210=T)%=^\3422<S\014\230=\273~\376\274\204\017\251\275.b\350\275t\211\331\274>\246z\275\rE\217\275\245\237\006;\340\301\277;&\326\273\275C\233\371\274\311\255\303\273w\327*=yr\310\275r\224f\275Cw\347\273QoE\275\217\006\343\275\217\227\007=5sj<(B\r>k\370]\275jU;=(=\014\274\007\357\031=\207\255\371:\313\262\177=cFl\274\367T\345<B_\270\275s\300Z=\212\000\335<$\345\310\274\033\373\310=^\270\346<w9\320=c@\266\275q\305\223=)/\212\274\004X\352\274\375\022\252;\250\307\233\275 \310\266<\352T-\275\223\246E=\340{\256\275\347\220\315<\337\334\030\275@\177\313\273_Y\'\275\317\215\007\275\220j\244\275 G\366<\324;@=5\212\244<q\352:\274*(D=M\177\236\275J\232\243<\344;\232\275\0356G\274xC\r=\272\034_=\036\351\016=\033\260\006\274z!U=\372\273>=P\261\240\275\324\211\001=\024\236\334=l\335i=3s\366\2752\"\307\275K\366\226\274\375\034\203\273\275\376\306=\371J\253\274\353q\221<\217\352\033\276\344\007\037=\257k\035\275\366\263\031=\252\003\r=\247|0=B9 \274\261E\031>5\014\r=0\250\255\274I\336W;\331\'\211\275n\344L<\024)\213<F\336\245=5oT=\323\274\223\274\313\177\252\275=\332C=\262\325\330\275\2539\035\274-\227\025\275\256\260d\274\323\016v=J\233x\272\354\373\311=\301:\t=\3357\302\272\003\227.\274\'K\353=\245\275\212=\347{\205=\275GH=\336\331\"\275\365R\204=p\003N\275\037nk\273*\224.>\340;\276\275\001K$\276\013]\032=\273a\222:J\331\261=\223\317\006\276E\362X\274v\221)\275\330\206\215=\242\333\276=\266\006\377\274\350\032\305\273\315\357\r=\257*\264=U$\036\276h\377\320<\022\240\010=\245yk=e\372K\275s\305\007\276\2132\341\274y\007\277<\1770$\275\221\342^\275\360\267\006\274\363\236\353\272 \242\203=!\316L<?\363T<v\247\014=SO\322\274\355\344\'=\367\360\346;k\333\232\275w\013\237=\004\006\203\275\364\251\020\2736\370\271\274k\246\232<*O\204<\371\006Y\275t`\335=\327\267\333\273\351l\340;\315Ph\275\262\371\270=DJ\240<\t\374\031\2757~1\275[c\203\273\210\334@;e\0008=\273\311\272\274\206g\013=y`i\275\222\017h\273C\316\004\276\017\234\002\274\035\\U\275\224\237\\\274U\t\314\274\\\243b\275j.\222\274\301Ao=\220;&=D\235\265\271 \365<\275\360\220\247\273=|\233\275\330\335$=z|T\274\"\251\236\275jY\250\274\222Z\202<\335\234*\274\036\365\374\273\306\305\037\274\225D\317=\t\214{\274\032\252\233\274\030\335\236=\252%p\274x\277\"=xA?\275\214[\013=\204u\324\275\375\205\007\276\232\311\321=uM\374\274\3776\231=\032]\350=\301\272\r<\025\2132=\264\'\377\274\001&:\276]\3167\27616\344=\217\355\275=_A\313<\375\313\244:\367=\214=\177\321\257\275\210\242 \275\300t\032=\243.~\275\371xD;\2310\371\275\366\005\222\275.\246\364\273 Ym\275\357\362\256=\204Xn;\212\300o<\201j\245\275\334Dk=\251\335\234\274\303\344\t\276-\300\342<~(_\274\027\230\215<\334\243T<6\340)\275B\021T\275\234o\000\275\031\250{\275\314\267\223\275K\277[\275ddI=\204s\267\275sdQ\275\340\035*<;\345\323\274+\375\360\274\36448=x\220e=\260u\214<;\302\350<\376\275\'\276-73=\022i\033\275R\025\306\274(\t\275=\310e\202=\r\354\354;\003\322\"\275DC\013\276\315\214\215=j\335p=\246e\323=\004\332k\275\004B\273\275\037\300\261\275\335R\277;3\221x\275\014\021\351<\'\010\337\274\311\325:>B\223\237\275\336\371\201\274>\020u\275\022\361\037\276G\276\263<pj*<\326\314\241\274\306\026\210\274\023\325\260=\364(\246=+\260\000<\257d\367<\221\023\343\273\245\316!\275\204\242#\275\216\242\315;\327\343\357<=\273C=\034t\214\275h\354\257<\270\377\000>U\224\205\275\341P\356=K\031\213=\220{\332\275L\017\034<\220\021\234;)\t\221\275\337\rs\275\354\327\233\275\336`\315\274\306\223\244=\036\261}\275FDF=_r1=\014\313\370\273\220\320\207\275\270P\372<\363B8=\236`\021<\373\033~\274\213\313\321\275,\277\254\273\207W\242<\036*\020\275\335\277\274\274\215\373\'=*y\201<\262j\315\273\336\017\265<-\333\r\2766\253L\275oXU\275\261\274\247\275\3032y\275\243\307\202\275\350\272\355;\215\246D=\3049\007>\330p\376\274\332\034H\275\322\320\221\275mb\030<\335yX<*\275\335\274\376M9\275\334H\317\275\272L\216=\231T\234\275\375\337G=\247\235\347<~2\333;w%\220=\\X\205\275\322\241%>\2525\240=^\206\241<-\254\227<bN\257\274/D\312<\216\242\257=us\245=G\245\000\276\272\254\212<\326\242\262=\300,\025\274\324\003=;\035\3244<\302\3275\273\343\326^\275\207\354B=\367\014d<\375\034\261<c\376\365=8\227\215\275\231\260\212\273\274\243\260\275O&\023>\302\372b\271\006\234k=Up\214=\031\211\"=\255`\326=\373\266o\275\220[\350<\266\037_=MN\366=O\342A=_\212\033\276\257\325\204\27572\226\274\022_\342\275*\014\025\275\310\364\001=\034T{\274\325\353>=\226\201\216=\017?\323<\273\253`\275:V\014=\365\205\306\2757\242\260<\317b5:\013\277b=\\\203\030\275\265x\336\274\322\376\006\276p\"\201=.AD\275|K_=\t(\226\275\tw\003<-\323{\275^\242Q\275\343\331!\275\304\201\325<.\224\300\275\020)\300<\022\313\025\275\224A\301\275t\022&\275N\002H\274y\347\177\275\300\010\271\275k\244\233=\352\373\034==\331r\274U.\000\274=!r<g\002G\2752%\004>\270a/<\215\231\354<\240\317,\275Ua\317\275\033\215\325\274B\341\212=\227\241h\272}\005\271\275\007\005\325\2740\355\302=S\255\230\275w\rW=<\227k\274\220\233\274\275\255F\024<\036\216\037=U\006\204\275)\211\246\274\n\235\240\274m\265/=Q\372\272\275\260k\264\273In\365\274\373\030\206;)\205p\274\224\276\213\275\3328o<.\350\321<2\311)=Dmf=\365\313\331\274\321\365\275\275\001!b=\247\204\306\274\374\206\265\274y\3327=\336\001z=nn)\275\355\016\021=6]\254\274\023\250Q;\210\213\216\275\024\357==\270\'\027>\234\233.\275|v\021=u\250<<3dB\273\200/y\275O1\362\275\036\362\215;:\313\207\275\267\232v\275\343\031\260\275\000\212e;\230\321\206\275\327q#>t\th\275\310C\202\274\227\300\274\274\234$\004\275\333\302#=\024\252t\275\001Qi=\201t/\275*\236/=zAB<L~\207\275\\\373\232\275\310A\224\275k\321\312:\026\366\336=\350\217n=A\346\210\274\342;\026>\336\263\221\275\301\222\334=\344g\373<\222\313\254=\330`\226<t\0004\275\201]\225\275m\351q>\323\266\030;\373>\216=\222\333R\275\005\312\205<\037\034\037<H\013\300:\267\002I\275\207\032\315=\013\220\332<}X-=\306\263\202\275\253Ql\274\312\266G\276]\014\254=#I\205=\000&\377\274\347\231\233;|{\317\275\342\356\204;\022\273Y\275FS\317=\336+\331<\332o\016\275)n\214\275O\005\275\273jl\225\275;\266\366<J\205\316\274\033\360\230\274\\\017\325=f\273w=C\223\273<%\240\242<K\3158\275\251\362\025\274-\300\340<\370u\021=\334\274z=\335\034D\275\304\332\305=\263\277\225<,\371\023=\236\\y=\226\017\241\273\003\211\245=v\300\275=Q\244\304\275\272\333\305=(\026\202\275\272\211\311=\007H\265<\207\300W\275\335\332\226;\267\335*=Z\334\217\275\255\027\203<\030\243\236\274D\367\305< \004\270=t\003\262\275E\200\332\274\212\313^\274\031@\t\274\300\367\210=$t\206\275\236Q\r\274.6\210\275\227rh\275\336\237C=\323\035\204\275\177\007\224\275g:\214<\242\340E\275\2275\014\276\217T\316<\220\323\201<\336\266;\275v\240\034;\013\265\273<\375b\241<\222Tu=}7\314\274\363\034\t;\023\263\332\274\3151\335=\212\354\344;E\277\001\275\267?\243\274\356\013\025<\t\366f\274c\013$>m+\363\274S,?\275j\3673\275\272\220\r>\266\325\003><J\001\275l.{;\006\022N<\363\207\307\274\212=7=V\'U=6\200\034=\206\316\356\275$\245\223<\036\341\216=3XC;\323\325\235<\316\006\350<e\222\3429\373\037~\274\266\335\343\274o2^\273\221L\237\275\360\254\243=\016\205\215\275\232x\017\274\251\014.\275\3225\277=\230\315&\275\021F?>\353\326\211:JX#=\346\353K\273\352L{\275K\210{=\3556\360\271\005\253\246\275\201\370D\275\023\377\\;^\272E\275\274G\230;)\251\r=\177\212\361\274~\313$=T\363\370=-\375\350\275\206\014\311\274\304\037\247\2740$\024\275\300\2615\275\212\211\007\275\374\013b\2759\360\"\275A \224;\361\311\204\275\3155<<\240}\253\274\303\303\273\272\014>L\275(%\025\275\203V\001\274\345d2=*\nw=\220\266\277:p0\016>4\357\003:\316\247{\275\271l\211<\336\rV=\002\223\353\274L\232\332\273f\003\364\2742Vn\275\036\362^<1\311\"=\007\307\242\275L\216>=t;G<\352\267\337\273\271i\206<\346\315\203\275(M\374<X\343\363\275\264\206!\275o\333\217\273\213\277Y\274$\346\202<cV~\2750\023\306\275\303\323F=\006*\252<z\233\335\274k*)\2747fl=\254|\310\274\023\224\002\276t$\000=\353}/>B\032y=G\004\022\274\2453\234\275{\2407\275\361\256\\<\0142\220\275\344\305#\275\336\324\311\275y\3545\274\267\350k\275N\233\262\273\355\\\214;z\265\031=}\317\267\275\177f\261<\030qS=\332\025\313\274\273g\000\275\352L\017=\301\3660\276j\230\177<\254N\340\275\222%w=\223\376d\275\274\371\344:\356L\007=\344\374\334=k\264I\275\265\034W<\242T\220\275\024\302\027\274\311T==\262\215\020=-\306\257=\3332\006\275\0016+\275\255\201q=\\\267\254\275\371\003\247=3\016&\275rm0=\261_\255\274\271\263^\273\036\204\221=\312s\347\274\233V\230;\200M\245\274\tq\234=\005\365\233<\023W\026>1M@\274Ui\244;2\220\257<\025\036,\275\tG\213=\3745\345=\202\005Z=\334\331\t\275oO\202=\261\201\253\272V2\265\275\305\000R9d\200\324\2758\353\300\275\376!\201\275+@\322<\204\201\030=cj\317\274\267U\253\275\003\314g\275\261\037\013>\3029\311=\236r\337\275r\305\256<\325\234\334\275\027\231\002\275~\025\213<\037\312\376\275\221Z\025\274\365\241\250<Y\216\352\274\374L\202\273\205rs=\301\033\223\2752\377\256=\004\323\024<\322\017y\275\017\263\262<\235\301\257=-\2137=\217)\371;\027\310(=E\366#=EBt=\237=\025=Z>&=-\261\254\275\275c\263\274\r\203c\274\362\220\024\275\"\226\357<\031\372\321=\270\007\206\272\273\202f=\344\2228=\270\253C\275\342\315\364\275+\351\034\274\371D\025=h\274(=\nE\320\275\346\257\323\274\033\216\323<\237\256\026>\207)\000=|\356]\275#\223\335\274\3736\230\275V\373\274\275\013\230\325\274H\347q\275\n\345P\272u\216\221=}\3676<\253\323\211\275\270\267\034\274\276\025\211\275\256C\264=\006\3169\275\246j\030\275\314\222\375\274\014\335\210;\3166 =\213\314\374=\300\340\240<\372\237\276</X\233\275\315\300z=\335\214\034\276\377\013\344\275:W_\274&%\001\276\016\001\231=5\030\021=\202\316\243\273\255\276\242\274\025\003\005=\224\327,\272\221\374\010<3\324;=\332\353\361\273\342\326\234=?\244\357\272G\203\211<\303\016?\275\000\253\245\273r\301\323\275\215u@:\352\222\246\27573\373<\230Q\233\273\206J\246\274\023)\010<\024u\347<\376|\211\274\316\010\r=N\346z=P\202\306\2750\237\270\275\327\366\204\274\261\377\237\274F\272Z\275\224\003\021>\334\2354\276\251Hz\275\346Q\335\274>D\216\2756\271\221<\343H-;c\361\n\274\204_\312=\202t\207\274\024\222\261\275!\214\014\275\3719\201=\300i\n=#\254\000\275k|*=bF\374\275\244\213\317<W{\036=\020\2651<\007C\312\2744\007\242\275\251\314\023<\021\253`\275JC(\274\326s\003\276>\337\270\275\3151\362\274L\325\336\274@`p\275\276f\310<\273\001{\274\267\367\323\275\205\277S\275m\271M=\232\367\336\274\000\004\016\274\230\335\345\272\353\002\311=\200.\366:\016\2540\275nD\001\275\230\372\025>\301\t\\\275\322\312\261<0e\004=\342\270\335=\246\210\315\275\201W\026=,\3741>Zs%=\266\320s<-\2115\275eV\352\275\224\177M<aT\277=C\216\260\274\033(\310\274\2548h=\300\000l=D\2544\275\211\3565\2753\227\347\274\247f\275\275\223\210\"=\'\246\273\274M\006\216<n\036t\275_\244\263<F\266\345\274vn2\275\265\234O=\035\251\260\275r\233\266;8|\322\274\375\334g<:\2405\275\203\271\"\274Q\245\013\275\363\260\t>\034F\321\275|xS\275\006b}\275!\344\226=\334\236\241=\225\376\274\275\"\240\233;g%\253<s\271\037\275\361\303\204\273\014\354\344\274\254N\362=\207OT=\200\004]=+\037\222\275\203\340\370<\327M\234\275\002\036+;j\324\204\275\202\263\254<\014i\255=\001$\265\275\332`\031=_\0306=&\033\275<\201t\210\274\222\207:\275$\036\266<\222\216\354<\003\321\261<\n\232\274\274\246cr\275\025\320\025\275\366\203\035\275\212\271\335=k\265\200=\223\267\213<r\256\273=\240\360\246=5\001\267=\227p\013=\313\265\266=\351\333E\275!\002\342=\304C8=\341hB<\037\257\316\275{\323\376\275#\305T\275\014\255i\275\235[\320\275z\327\325\274\334\010\332<oC\305=\233\354\201\275\205\221Q\275\361C\232\275\360\204?\275inj=\n\002\314<\262\275&\275,pk\275\230\336l\275\350}\1778\203\306\023\275\326\'\013\276\237BZ\275g{\305\275\321\\&\275\376\262]=;#\217\275y\0321;T\272\275=\264\342\221\274\333\306\332=\016\273\227\273t\313}\275\210\347\321\275\360}K=SNk\275b\225\004>\030\241\237\273\247(\244\274\216/\014\2741\"\352;\263\177\274<K+\307;}*\003\274\025\310\202\275\342N\013\275&]\363=\371\260\216\275\026\001\227\274{\240\024\274\036Ua<\222\371\254<D\320\014;\217\376\254=\3670\t=\362 D\275c\314\313\275\013g+\274rS\344=5\366\354<\235\334.=&\266\265\271A\004\303\275\243\310\231=\312\036\223=\023)\025\275\226\023\'=\374+\351=\252\203H\275\351\255#\273\217\261H<\n\315\371=(\311o=O4\031;\366\336.=\301C?\275\233<\235\275(5\220<\025\334C=$Lx\274\203\020?\274wk\367=\013B\372<`kf=S\355\205=2\370\002\275$\350\336\275\341\360\250:5PX=~\367\205\275\351\217\030=_\333\244\274\257/\331\274\273\030\203\2756\325\211\274O\023\214=L\321\362\274\354\3477\274\\ch\275\232_\201=4/\247<\354\255$;\224\r\273\275\370\310\377:\200\022]<[>\302=KA\014\276\246\013\374\275\252\363 <\255\340\356\275\227v\220=\365\360==\000\373\276\275\223\337U\275\354\341\232\275%B?\275\251\000d=\032\360\016\276\323\n\313\274.\252m=\022\347\330\275\224\247h\275t\273\270=\305\033\231=I\034\202\273\375\250\227\275\370\360\342=\375\034\022\275\2748\301;\2769H\274\020S\226<s\347v\274\335o\362\275\001\3751=\346\215\222\273\037\351\003>\262\255\237<\307^\234=3\2568\275\370m\245\275p\305\246=\205\227\276\275\033\010\245\274\207j\010\276$\343>=\222-G=9\213\323\275^~\336<\305\013E=&\262\'<\353F\223=\336\3547\273\336\314\026\275\334\377\223<\363.I\275\204x\324\274\3234\254\275\210E\330<U\233\231<\233`E<\223_\352\272\003\020\303<\353\230\342\275u\341\324=\253\247\205\274x\302\312<\323\224\205\275\272\240s\275\354\363\367<\237S\365\274.\035\220\275\212\034\005>\253)@\275\345\273\322=\204=\372\274 \337\346\274\303Y\037=\271\2101\2757ey<\221\267c=\271+\006=d\372\r\275H\355\370=#\251&=\347b\220=j/\326<\202E\303\275\217\276\033=]\036+<\0104\316\273D_9<#|4\275\356b\000\273\202\270\274=\010\362\207\274j,v<\337\270\314\275\313\231\216=\233}p=\216\037\203=<\022\300<\300\362\352<\261\360\261\274m\n\352<\260\345\214=\234\000[=\030\243\244<o\237X<&\272n=\347b~\275\"DJ=\215\330\027\275\246\t\322\274\034j\036\275\340H\206\275\034B\016>$\037\216\275<\025\302\275\314\352\257\275\373\204f=?P\325<#}\343=Y\206\375\275v\243\206=\277\310\311\274\346j\212<\346\033\325\273\207\032i\274V<K\274\206\304\207<@\373\303\275i6\230\275ErT\275\300\201(=\215\"\201=\310\303K<\t\372\306\275\3012\005=_\017U\274t2\212=L\003[;\030|\235<]#\006=\206^\242\275\033\023\014\274\315\236+\275\000_\000\276\005U\036=V\225\010>\026\014\"\275\210\204h\273\224\0062=e\211R\274R)\302:\331\024]=\224\r\224\274\356\346A\274\251\306|=\364\320Y\275\275fQ\275;\341\225=\343\265\007\276\265\242W\274d\305\017=\304\337\312=9$n=\024\312\322<36+\275\\\334D=O\211\345=i\230\255\273*\277\262\275\026\301]>\272(/\275\225\004\313=\265C`=\331-\255=\247\241v\275\246\317\245\274\007\345\216\275B(!\274\002\253\315\275\333SH\275\331\033\211\275\234]\265\274\247z\367\2756\235l\274\210 -\275\200\"\237\275\212\223\t=A\272c\275\375r\276<\216\334\252<\257P\321\273\037n>=>\340_=\177$\251\274\347\364\213\2758\252\t=A\227B\275\031\212;\276y\t\220=\235G\362\274)<\006=\263\367\016=\033\276\003<\201al=P\376\362\274|\236\362;N\370M\275\377\215d\274\360\306U\275\306\354\236\274\343\345\326<A4\216=\272\3663<c\310l\275T}X=\031\030\215\274\237^\220=\374\330\246\274\211\247\343\275\273\323\243\275\220\212\204=)\211r\275%Y6=\237\204:=\264\242!=J|H<\364n(\275\303\3643\275\267\365\241\275\233C\335<W\310\017>\274\034\034\275\2555K\274(\220\207=\211\232\225=\251K\216=\313\2238\275K\330\201<x\311+=\337\034\206\275\032_\001<\341\205\370\274\352\243.;:\005\370\275k\232\222\275\364Y\007\276\'Q*\275\321\226S\275}\272\265<\314+\221=\001\226\352\273\342\031+=\"\270\235\275j\003e=\266\272\301\272\345V\037<\357\214\240\275\341\037#\274\373\344\373;M-t\275C\032k\274\220\342\231<W\010\206\275.\224\014=\016O\022>\232\037\034\275\302\300A\2757\265\365=:\335Q<\253\205\236<\352\324\336;\2467\220\274X(u<W\231\376=Yl*=\373F\223\275[\270\211<\013\313\336<\006\243\204=\352\206\343\275\031\036\376<\214K\216<(yO=\2528\206=\315\346\370\274\266\231\027>\351.c\274\275\204\234=\235L\313\275\014\023\216\275\210?\224<\233\334\365\273\271\346J\275\006\304\243\274}\246\275\275\247\347\273\274r\274\320<b?\211=LM\025\275\010K\013=`\000\327\273\010\335\276\275\275\223\225\275\251h\002\276\366\314\344\273B\203\013\275\317c\250\274JG\277<]\336]\275\2077\311=y \243=\303V\027\275\205\221\260\275n\021\256\274\006,l\274p{\013\275\0101+=\310\371\237\275/~c\275Q\202\263\275\331\234\r>DC\213\274\2379\334<\256i\030\275\222\2300=\0029@<\327\200\r<\256p^<\353\337>=E!@\273\320\177\t\276~\214a=\304\260Y\275\376\255\237=\207C\214\275\322\213\212<S\026.\275\010R\270\275\004\267\002=T\213\212;{\346\301\274\325e]<U10=\2118\216\275XB\244=\277\201\210\274\272x\000>\'b\305=\207b\344=N\260_<\243\2748=\340\332&>4\014\301<\223\205>=E\373\327\274\021W\367\273\247\3111=\325\312\027=\240\0057\273\355\372\321<\261\231a=\241\027#=\263\010b\273,\337\020\274\363#?\274\306\253\312<G\275==/\361\321=\211\310\224\274\'\r\207\275M?]=V\210\360\274~\021\271<9r\236;\356\016\005=q\317i\274\264\215\254<\227\230\231=\333\260Y<\201\361\036<\303\267-=m\216\013>\224\347\321=\316\330\022>\005\263\357<\023\332M=\033fO\275\307\017\210=\257\005\264=m6\034\275\016b\003\275=\003%<\212G\021\272w\236\237\274\000T\306=)\3000=\206\217\202\275\247o1<\026\236\267\275u1\326= N =\366m\225\2754\017\027\275\324\245[=e}\356\275\243Z\316\274\234\226*\275\203\241\200\274\213T6;E\313J\276\325\201b\275\330\006\274\275h7\276<\374g\354<Zfh\275\303Q\242</\213\373= ~\366\273\276,\271=\327*\220\273\261*\317\274\201\036\020\275\251\3614:\316\020\235\274\375\001\274<ev;:\005s\033=\347\301\217=\006\r\030\274cr\244=/\352\361<d\301f<\222\217\204\274.!Q:\215\306\250\275Nu9\275y5\001\275\273\2631=\221z\242<[Uh<\230\232\227=\016@\250=\022g\035\275e\301\007\275FV8\275\360\003\004\274k\232~\274,\230\031=\357\236\204\275}\240m=\305\265\206=zo\226=\\\366\360\274z(C\275\360\005\227\275\204B\225\274\362\016\021=\272\032\222;j\270\203\275E@E=#\026\325=H\003\234<\326\013\223=\305\252F=\026k\225;\246W\010\274\337\214l\275_\376\217\275\030\362D=\2151\202\275w\357\005\276c([=\252Z\334\275F\234\034<\251`K\275\354\210\031\273A\330K\275\262\023\221\275)\374\213=\024\306\347\275\257\007\006\275\002\037\033=?\314\362<\215@g=\322\231\272=0\311\026\276e\023\025\275\271\215\234=\345\t\217\2758\272\231\274\210\377\364\271FQ\204\275\274+\351\272\311\270b\275b\001\323<\267y\266\275\252a\346;\214\362\221\274\314b5\274\270\353\220=?y\314=`\216\216=4\332\331\275V\307\003\275\251\300|<m\266\253\273e\274X=\216\277\373\275g\274\225\275\263\032{\275\370\265?=\210\353\370\275 \322\033\275\305\277s\274\224\3530\275T\360\037\275\333\"\023>\345U \275\246o0=(N\370=\364\373\207\275\rE\256\274\206\336\001\273,D\374\275\010<\000=\360\351\r=\3712\337<\316I6<\327a\317\274_\351S\27579;\274T\317\333\275\017&\226<L\r\024\275\360\030\037=i@\313\275[\366\374;\023\335\036\276:&[=4\376B=F\310\207<\242\264\353\274\211\261\205\275*\261\273=p\353\354:O\275v\275\312c\032\275y\345\030\275n\037\236\2745%\t=\235\020\365\274\201\302\200\272\302*\324\274|\263\265\274\003\204\211\275\351\212T\274e\347\246\275\004\311E=\250\224\316\274\346^\365\2749\262;\274\215)\r>\367\004j<\345\232M\275?\246%\275\352\213\332=h\335\240\274\307Q\365<\204\226\267=\033\013\377=\214=\271\275{\032c<X\014\220=\242u\001\274z\277\237\273\t\001S<]8.\274\354\212\304\275\231\234\340\275<\275\3567\243\273\215<y\025\003=\206I\216\274\312M\023\273D\371#\275\225\223H=\253\331\266\275\017B\231\272d\275\205\275\217\232\274=rQ\334=8\030\227\275\350UD\275>=Q=\275\365\223=\355\276\350<\320T\326<j\345\014=\'Iw\275\331i\317\272S\241\234<\347yD=\263\217\345\275\031\366\003>\261Z\313=Y\362\244\274_49\275v\014\r>Q\227\034\275\001\023,=^\016*=\354\375\005\275q\232\211<u8\245=\256s\202\275\243\341\232\275\026\303z=a\231\233=)!\247\274\345\355\205\274v\201\207\275\325\272,\275\242\271[=\332\317\004;\313\320\253\2742u\246\275v\027Q\274\347\364\036\274d&s=?`%\275\224(\227\274\231\245\215\275\033\207\204\273\034\374\241<\363H\304=n\354\024>\224\322\231\275\261\251w\274\325e\361\275H\tT=\224\206\217\275\221\366\r=\250\353\205\275\006\231J\275\002q\033\275\266\325\323=\020\372\225=)^\200\275\326\302\300\275\353\200\246=\265\323\014\274\236\021\216\2750\234\211=\022C\204\275$\237u=\216\253\027\275\033\177\341=\310\326\330=\301\375S\275#\035\013=\265\215$\275\331\204\345\274r\005\211\275\345\266#=O\256\265\275M\221D=@\352\002\276\026\367\345<\342\230\232=\265\267\201\275\\)\265=\304U\261=S\235y\274V\250i=\333\250\n\275\250]f\276\266\361\214<q:\n:\001\233\351=Z\303M\275\243\260\230=\357\2609\274\006\303\326<\022v\005=\252\n\033\272k\026\003\275\327\220#\275.\261A=\371G\257\275\013\004\232\2749\365\221\27591\267\275\365\261\026=)ua\275\222Z\230<\253\315#=\006\240\200<O\245\003\275R\'\256=\320\262\003=\264\013E=\346\276\215<F\335\362=\240\327\270<+{p\275\371!$\275\0325Y\275\334u\377\273P\005\335\274\333\\u=\364\347l\274O5!=\254:\346=\226\274\363\274\352P\210\274C\311\235\274(8\277=\372x\210\275\357T\304\275\325\273&<I\027\316\274\373\031\334=B\304\002=\220\310\247\275Y\216\256=?\245\273;\2422\374\274j\355\t\275v^\220=R\224\231\275\245>C<\005\337\200:\2233\215\274;\334k=t;\311<\347R\374\274\326\325+=\352\344\367<\274\232x\274\250\242\217;\245\007\222\275B\'\327\275q/!=\271\255\003>8]\037>$^\215=\250\252#\275\034\000\202=\217\004`\275\376\301L<\324\320\247\273\036F\330\275\3535\242<r\003+>\350\227\237\274\330\204L=0`V\275\211\006m\275\212\030V\274\352\224\223\275\334?\010<t\233\236<EV\253;\275\330\220<M\364\263<6\314!\275#\321J\275`4\302\275\\z];@\037\017<\227\245+>s\307|\275\021a9=\355\'E=\214\253\355=n\r\243\273]\013i\274\361Zd\275\203Z\263;\316\177I=\341\245\006=l\232i\275\307\006\031=\265\213\377<\037\217\316\273X\216d\275_d\314:!\222$=\333\326t=FL\306=\014z\235\274c\375\210\274MI\303=\246\374\217\274\342\214\206\273\233\367\277;RT\017=\371xu=\266\234\224:\257,x\275s\273\301\275oc\233=H>\334=3/\244\274\353\341|\274\346:e\275\336p\034\276Q2\300\274\331\225\214=eWK=\275\351\244\275\257\t\374<+_\357<(\245\204\275\244YL\276\3146\022>\304\207\'=\3243/\275\365\252\206\275M\247\337:.\362\334=\037\303\274<s\340%\275\n\330\351;n\217\320\272n\356\033>0\320\275=\003\032K\275\356\265\257<4&A\275\201\\\220\275\2444\001>\304\000u;\301D\227<\0148\207\275\347\225_\274\001\257w<r\320\206\274etk=h;\"<o\333\036\275#\200\326<\342\033\001\275\217\264\223=\221\214\377\2744<D=\361\362\003=\373\266\373:\2575\342<3q\262=\264k\r=\356y%\273,\251W=.\016\355\274\351\230\264\273\3633\344\275\026~{=\325z\217\275G\031\335=\347>\262\275\255(\220\274\306r\337<\323\271!\275\333k+=6\330\355\275\257>(\274j\211\257;\177}\270\274\353_\035=5\203V=\nu\334=\322L\324\273o\214\266\275\036\333\245\275\301\333l\275\026\004X<U\351\270=d\2631\275C\366\365\2742Q\204\273\335\260\033\275Q\376\n\275\226@\300=\201z\023\274V\200\007\275\374\034\226\274.\241\342\275*\320^=\217\225\017\2755\244\202\274\363\246\225\274\017\325]=O:\023\276\317\023,\275\202\267\"\273\034\343\022=\027\352&\275|\375\242<\326\311p;VT\245=&\270\257\275!m\261\273\204\r,\274\244\313\233<\035k\304\275\234?\321\274\023\357\225\275/\277\241=\315\004\217<\240\016\005\275\347r\347<g\3369\274.\274\326\275l\331J=r\025\016\275\347\206\233\274\313\241\240=\031\356C=#\301\262<\326\206\264\275\334\322\356<Y\217\030=\337\267\"\2749\265\365=\372\376\235\274I\253\311=UcO<a\227O=\341d\226\275V@!\274\227\232y\274\270\276\021\274\232\032E\273C\371\"<\245\262J\275.\344\316\275;0\257;\017[/:d`N<\254\344(<W\375<\275\235\274F=\327<\213=\034q\257=\031\246a\275\245\353W<1x\333=\225\246\260\275\220\270\225\275C \332=?E\367=_fN\275\\\013\367=\241\346\000=\235\234\336\274F\315\321;\210\255\021\275\267\246K\275\323\005\003\274\025\037 \275\260\036O=3ji\275\212\243\302;\326\227\262<\263\220J=\030ky=\217j\242\272Sl~<\335\232\373<{\t\346\2740\022\205=d\030\327\274t7\236\274\013f\304<\256\255\307\275e\177/\275=\311\240\275i\277A<\365z\357\275\321\264y=7\360\031\274\227\265a=\213\323 \275?\332I=\021\005\217\273;x\207\275`\313\203\275\031\200\013\274 \344c=\260\243z=\275\004\327=\205\336\235=%\262\304=\2714\240\273\316M\354\273\374` \2755\014\212<uO\035=\013Wz\275\220\032 ;\330\217]\275*S\356=\364\230\343\275\211\251\277=|!\263\274\346D\200\2756\353T=f\234\023=\272\247\272\275=\247\004\275\355\333\366\275\366$\243\275X\366\350<\033\377\277<z\374\010\276\260)\325<\372\323\247\274\252\246\367\2745\362\346=\033\316\230=r\335\n=\350\331\212\275\376D\357;\360\242\354<r\347\240\275(\316\207\275E6\005>:\000\002>\\\256\213=\325\372\n\275\000\325s\275\027\254\"\274p\212\265=\263)p<\207\245\342;\231\236\315\274@\315\025\275\316m\002\274\200,\266\275\264L,=\n\241\244=M\201\256=\227\263\323=\221O\315=\201\207\247\275\236\334\350\2741\364)\275\002\310\202<\230\337\022\276\245\305\213\275\017\373\r=\017|\250<\030\310\260\275\336X\330;y\241\361<\336\256\002=\372\347\017\275|\234\244\273\312\026]\2753\264\353<&Wd<\372\240\016>k\331\000\276>\231\006\275\216\022\302<a\230\346\274j\340\266=H\267\037<\0039\333<nJ`:A\237-\274\214\266;\275\361\367\300=\220\261\231<Z\305|\273 \361b\275\'\236\211<\360\341\240\275\272\372\377;\344A(\276z\330\200\275\360\000\251<\347\274\271\274H\010u<\021\343\305\273\327Q\005<\214\177\t=\335\343\364<\037\r<<\020\200\037<m\246\272\274\377\234\344\275i\216N<\370OZ\274\221\020\260\273\315\230\275=\250\0330\275\212\300b\275\352\235\225=\261\274\3209~\203\343\273\226\276\000=\234d\254=]p5=\346*D\2756\322\014>s\224\200=c\360\234<fh?=_\367\205=o\013\n\276\3569\324=\255r\237=\270\3723=\332\325\236\275\261\244\004\276\244\337\r\275\312\322\342\273\234\tj<.\334]=\245~\225=\241\350\022>\263\301\235=\313\223\263\275\361\004\345\274\265\206\265=g,\334;i\332\311<\365A\222:\021\203\276\275\364\254\244\275\332\322\023\275%\005Q=\263X\353\273\270\316\254=\236p\357\274\220\376\223\275t\364i=O\033`\275\215\340\350\274\025\241\223=Z_\035=6\016\013>\353\202\024=\337\345\\<~\377\007=\272\201\353=\201c\033\2756\326\207\274\353|\275=\312\355\273\274I+\376=\224\307m=\027\027\033;\270\014\024=\233S\230=V\253\246\275\305\262\375\273\317\2300\275\2730\t\275\362Te\275c\205/<\354\016u=\361\313\347<\023\235w\275sP\200\2757l\207=/\357\000\275\201\375\010\275*\2169\275\300\3471\2749\027\303\275Fk\n\275&I\254=\247J\256\275\314\260\327<\356=:\275\352\002\212\274\001\331*=\375\016a\273\362\035\236=D\230\300=\032a\236=S3J\275\r\372\363\274%\371\031\276\033\263\211\2744E;=;\242\344<\223\234\007\275\352\325\314= Y\376\272M&(=\250\224\247\275\344\003\025<D\034\211\274\352~\253\2746\222L<C-\336<\326>\021\275Hdg\275\213D\332\273:\3626\275\355\246\371;\303\030\312\275\256\221\221;\340\277a<z\373t\275M\002\365<#|\364<\365\004\357;\004\374\210\275\016\347\312<\302\031\212\274+\"\005=>\244\264\274q\037\357\274n]\265=Q|4=\377\2533\275\362;P\275\203\230\231\275M\364\024\275\256y.\275\242\214\365;\314\211\315<WX,=\244\220\301\275s\030>=\300c\263=S\271\347\275|\036\206<R\302:<\320\260\016>\0017\r\276\2235\200=\032P\'\275c\220H>\375\275v=\206\325\313\272\222a\316<9\331h=\266V\212\273\233\233\241\273\306\n\005>o\313\215=gT\266\275\361\020\367\273\356\204\327=xx\230=\372\3118=w$0\275\032j\315=\304\2053=\027\240\r=w\210\023\2747\377\244=-\320\211=~\232\221\273@\301\307=\242\035\335=hY\235\275\316_\021<\004\227$\2740Q\013\274\276|\273=\232C\270\275pjg\271}\272R=\366\263J\274Xw-\274\255\014\242=\375%\021\274\244\205\377=\270\231}\275A1{<\223l^\274SCn=\216\305V<\265~)=\301\364\323=N\323\244\274}\331\217\275\342\033\n=\317\325\236\273]\260\017:\234\232\336\275U\022L=\014\t\232=\303>\211\274|\375\200\275\035\023\202=\276\354C=E#n\275\326\307\366\274+\253\007>\2655\006=ZN\207\275KEp=\266\277\221\275\355:\335=\252pJ<E\004\312\274\0254s\2750!\225=_M\325=\023\332\035\273\371#\276=\240\263\207=r\231I\2755\233\307\274$9\324\275\212\234\323<\032`\303<\365\254\325<\232I\311=\244\334\202\274\325\317\010\276(\240O=b\025!=\332\312\"\276\376\024\251\274\235\251@=\306\0038\275\215S\217\275ae\010=\353\354\021\275\037\351\336\274\034-=\275\231O\274<a\253\351\274\305\033\311\275\010 P\274\\(\256=\177\247\225=\202\220\220\275\323)\244=\265\014\204\275-@1\276\211\236`\275.P\220\274\2517\"\275\016\"\310;\300\264\214=D;\223;,\352n=_E\203=\331/\227=\223\264R\275\241\353_\275\001\300\177\274\034<\371<C\245\205\275\035M(=a\377\247\272:\217\315=W\001\201\275\273\\\024<\226\240\217\274\252Q)=%\204\221\273\246\371L>\222\360\215\275 \377\003=\265\215\245<\275e\014=\366\264\261\273?\317\226\275I\341B=,t\304=\350r\222=\027\233\316<|\tC=\237:\036\275V\313\003:\373\252F=\207\333\216\275\351\215^=,*\241\275:7\003\275w\223\235\273x\336u\275\365G\005\276\364\213\251\275C\250\265<sU\230\274I\005r=\r\301\247<(-\274<\346`\271\275\322\273\007\273\020\367\236=\001\302\n>\243\305\206=\206\305K;\355\313&=\231\020\265\275\313\237\360<\224\020!\275o\\\210=\222\257e\2754\006\236<t\203\025\275\247cO\275[A\263<\272/\\\274\361Mo\275\372\010\035<\232\334`\2755\221\362;\220\262\005=\261\220\215\275\327\357\260=\214\2535\274\336g\271=\035\214\261\275\323\020\250\273\377K@=ih\361\274v\301\252\274j8\266;#Z\237\275m?\327\275\225\274#\275gb\301<\346`\377\273\324\020-\2754i\231\274\021\245\207=H\231*=26j\275\325\214\007\275\375\341w\275\331\313p=\345\036\247<!\270\224<\032\325W\275\320\\\224=\006Rn\275]\370\363\272.}F=\030#L=L\374\021\275\317\025e\275\377\236\027=\237\007\376\275\332&\006>?\360\367=}\230\032\275\\\305~=\343\354\211\273\265\221\210\274\227\345\272\275\004G\303\274\t).=\024{\327\275BZs=]Z\301<\022q`\274\271wD\274\006\345S<03\364;\022\032\t\275T\311X<h:\331\275\325\276T<?\226\211\275Hm\301=\320\033\253\274\311\244?\276\205\255\255\274D\367\016=\346Oa\275\360\321\'\275\303\362\037<\036p\202=\320/ \274\310,F=\235\264\366\275U0\302\275ly\307=\t\276\276=.\301\211\273\252e\032>\340\322F\2751c\246\275\362\300\013<\357~\364\274\272\273\306=\260\323\022<fo\211=\314\021\216=\233\244\274\2757\260\360\275\257\242t=\250>\305\275\363\025\220\275\372QX=W\335\256<\024~*=\034A\316=\360\007)\275h\267>\275,\325\245\275\315\263\211=Y\261\220=\236\262v=\253S\225=K\221)=\024\346\004=\201n\006\275t\274\251\273rF*=>\016\254\273-\363\022\276\000\026\246<\027\361\331:1\240\317=\212\260-<\343\312\200=keq=\034\370k<#\352\330:\243`J=\247\244W\275\207\373\270=\006\302I\274\213\230$\275\215\204\025\275\375HY\275\325^\357\275\312\256@<\273&\204\274\377h\322\275\351sX\274B\243}\275\276\272\001\273\010\352\007>~C\216\275\332\324\336=he\330;\256\\\254<\206 \201\275\004\234\246\274\301\215\271<\361\033\n\273~\214\021\275{\377\256<\351>t=#;2\275s!\n\276N\021\014\274\357%\307=\263\243\355\273\373\342\333<\354\243\257\274\227O\245\275\234\205\005>\356\373\324<\270\334\021<\032\251\231<\333\032\235\274v\201\303=\357S>=\311\212\217\274`\371E=\002\273\230\275w=\001=\230~\232=q\001^\275\247\026==~}\215=\013\251\321=>/\'\275\257@\367\275\252\263\037\275*\245\336\272\247%\255\275\227\241\276\274\347\311\205=N\2732\275)\363d\275#o\374\275$A\221=>\033\313<(\224\346<\240\317\270\273P\304\335\274U\222\232\274\302-;=\354*Q<\207M\225=\231\245\n=K\205\376<\303\217\323<\004\2751\275\243\241\033=V\217X\275\006\250T\27504\277\273\207,\035\275\021\254\'\274\021mD=\2102\252=\020?T=\031\021\201\2749\225\002=\343\331\204\275\223\016\334=S\352C\274\310q@\275k\2073\275\350$\r>\336\"$\275\314O\023\274\350\016\324<\322m\301\272\222,\201=^G\243<{X\022\276\026\2272\275}\234\254=\277\354n<\351\346?\274\2343m=\272T1=\tO\332\274\371\317\253\274<t\373\274\311G\232\274\312\247\241\273\2035\371\274\005\330\200\273\260\224\242=\275C*=\242\327w;LJ\315=\2037/\275\365W\273\273\000\223\022=\201\3065=\234.\271\274\230\006\245=\225\227\315\274\307\'\000>\372\003\226;\363\253Z=\337\261^\275\244\230\200\275\024\275\t\275b\374\262\275\347\275\366=\312\235>\275b\322\342\273@\272^=]\303\314<\306o\n<\262\322V=\267_\000\274sF\312\274\202<$\275\360\232\034\274\24200=\362\260\027\276\360^\016>\3737\217\275O\345<=\2237o<\320H(=\254\340\224<\211a\353:\022\251\245\274\311\003\026\275\021oZ=\232D\363<N\362\t<\2758\326\274\030\305\311\2758\347\355=\211_\230=U\316\271=#\242=\275\023 \310\274\252r\010\276\010\306\344<\037\2621\275F]`\275_)S=.\316\343\275p\037\006=z\241\335<\003\272y\275\252t\300\275\311\221\021\2750\334\020>W~\207=\242\351\350\274Re\226\275_q\355<\312\375\024\275\ro\216\275^\363\206=\363\001\267<\233\300\240=bX\233\275L\362\035\275\311t\316\273\246\037_\275;\244L=\037\373-\275\361=\335\274/\244\237;\005u$\274M\270\271=\031\275D=$\361\253\274\322\"E\275\357\276I\272\032+I<\032\020\271\274\305r\255=\214&\300<\201\263\002=_@O\275\357\213\252:<,\001\276\244\311\212=\201\204\215\275\032N\314\274\0266\276\274\206.\260\275j)\033=\323\006\317\275\330go\276\375Z\373=\347q\374<\027\275p==7\246\275\232\205\371<\024-\253<\272\342\204=\316\327\212=`\255\273=\016\241\021=S\371\324<\276\"\204\275\210\247\334=\267\231M\275\372Y\266\275\355\313<<\261B\265=<{\365;DX\t=V\242\350<\360\361\313=\033\353\014\274j\225)\275\023Z#<\332\272g\275\3455\215;\363#0=\t\0247\275\344\300\223</X\214;\327\373\317=\306\226\346\274\236\014\372\274F\351\000=x\361?;\310s\216=\202\376\212=3\256k<\335\'\306;/\024`\274\014\320\216=U\373~=t\033\220;ni\240=\254d9=b\317\210\273\303\327\330\275\022\347\022=\210\271{=B\261u\275\352\227\316<:\300\244\275Xg}=\216\024%\275\342G\315\275\007\370O\275\350O\220=;C\223\273\260\263\244=\243J\037<\266/\033=\357e\274;M\276\010\275\240~\243\275\325}\215\274V\300\252\275D\331:>Ps\016\275oW#=.\026\250\274\r&\207\274\224\332\241=\252\217\266\275P\273K=\221& =\326\314\271\275a0@\275\022\343l\274\356\337?\275<\210W\275\016\261\202=\371\354X\275\337\321\277<\240KS<\3501\t>\241\216\324\274o_\303\274QB\310=\2455\216=S;i=2\323\324\275V\026\210=\020#\377\274\203\351v=\267\320\235\274\312}\302\273Tr\\\275\0169a=\366\273\275=x4{\275a\373\227<\"\020\307<~\351\232<\017\251\301\274\350r\275=\376\r)\275\324~2<\343\2526=\246Qv:\177\r\207\275\nK\350\275(\3258\275\307\274O\275m-f=\177\025S=o\271\230=\033\261M\275\212my=n\002\246\274!\301\022<^x\336=\345E\344<^<\207\275\370L\203<\367\262\346\275~\3674=\004\006\0279\243\252$\276MUD\275C\360\220\275c\311(=\225\336\246\274\"\274\231=TE\254<\206\020\276\274\020\314\2119\342\254V=j\212\362=%\377\035\274\270\242\324\274E(\335\274\032\270\226\274\275A\376=\242R\214\274\343?\307\275\002\202\002<wT\314=B\331\306\275\275\351\361<\245F\215<\247\312\347\275?m\004<\020\203\217<\246\225!=\244\271\245\274\033wT\274\347@3<\205P;\275O%a<[\361\004\275g\340E=A%\331=\177\262B;Y\315\230=\361\373K\275\027\223\001=\025\244K\273\031\020b=2\364e=\343(\237\275\006\357e=NY\354\274\325R\361<\230g\232={M\267\275\233\264<\274ybS\275\270?\307<\231\013\235\275p}*\275\3515\317\274\031\353\303<\3777z\275.\225s\273P\025\212=R\304\241=\0335\3749c\245\254\274\271\304d=\300\331\031\276T\217\321=*Wc\275\332\313\360\275\025\2368<^\230\006\274\333O\032=\314\275\353\273\343 B\274\374\262\007>\306\314\274;9%S=p\020\024\276\320\230\244=1\232\004=\345\330\026=\244\021\027<\227N \2764\341Q<\345dX=\310\374\010\275\244@\'\275\376\262C=\262y\000\273%G\007\275*\307i;\211Fs\275\221F\200\274#\2645=\272n\241<\023\026#=\203\230\272=\200\230\262=\035\245\316\274\240\237\215\274{\366|\275(\304\025\275$\354$\276-\270\207\274\213\250\223\275p\006\237=\370P\276<\366\246=<fB\371=\033\203\371<\237q\2014qvO=\214\010\010>\227\250J=lY&\275I\031\014\274i\361\336\274\010J\356<\234\261?\275\307C\262\275\227\2477=\201\033r=\222\336\275\274g\242\202=;\352\312=\261\317\010\274r\203\264\274V\236\243=\236s)>\335\246S=\226z\260\275\336A\205\274\324\tJ<\274g9=\014\336v=\345=\016\275x\245\345= \236W=J\013\014=u\212\241\274pO\276={\330\325\275Y\257D=\\\326\346\275#\340\227\275F\215\300=>r\327=\305>\210<>\021\244\275\037\226C=z\304\310=\333n\037\275\355\2710\274T\235\322\275W9\210=\300~\256\273\373\2629\275\221\3654\276\247\227g=k\204\013=\003r\007\2752\375)\275\202\366\003\275\217k\017>\201\254\342\274\033=\350\275\300Q\220=Z\214\262\275\320\257\343\274\017\315\356\274uYI\274\035\0068\275\234y3<)\025\245=\312V@=\361U\310<<\007Y<5\326\265<k\016\250\274\246z\026\276\263\202\345<\213\030\210\273\365V\242<\205\354\312=\320F\023\275\t9\240\274\273q\030\275\350vO<q\364\013\275\361n/=K\333\342;\360\226\214<\225,\217<\242\313\013\274c\221\261<\263\027\021<\300m\236<\376\341Y=\021\346U=\3519\372=2\260d\274l(\257=\244\266~\275\\nU>\270\226\313=v\'\021=&(\022<\023\230G;\254\275\000\275\230\340\305\275\207\214G\275o\203\020=\342\355\203\274\246\225 =\254\360\337\274\301r`=\363\"\352\274\343=;=\243Z\271=\213)\237\274\355xe=\371\200\341\274\227\301\217=\221\030\222=\343wa\275\355\266\276;\376\005\205=\032A:\2752\230D;\215\266\203\275\314\277\210=\331\2712\274\324\353\336\275\335ZS\275+!r\273\244&\031<\321\322\227\275\340\245\022=\253\264!\275+\001\210\275L\032\354<-A\221\275\3622\007=\230\375O=\240]\t\276z\247&\275;\334\"\275e1\234=\031\205\215=\321?\200\275\004\352\200<\301\213R\274\377\214=;\030\343P\275\330\214D=\353\305>\275\224\342\316\274\000q^;\342\327\227=\317\270\201\275\313\360 \274\004\242\036=\354J\311\274\225\226\254=\002\242\331<\223n2\274\360\346\276\274\003X\230\275\361\261\030=\200\314L<\350\260\347=:X\250<\264\274\200<\005\217\206=E\003\334\274\276\265\005=\306\276\367\274/\255\364=\366\r\227\275\n\245\t\275\251\035\243\274\346c\301\275\242w\026\275\025\246\337:\256\320\202\275\330\000\211=Hz\204\275\271#\027>5\355\002>*\335\'\275\021[@=\314}\036;\327\344\311\274\371\331\'\275\222\376L=\341\000\211\273\214\320\322\274\340-e\274\304\332\357<\027\"\275<\303\242\033\276\017\000\354=\037\213\363\275<I\004=?S\235\275\006;\303;B\247_=\031|r\274\0058\270\275\262\316\364<\374\004L\275\217\310\207\275^\306:\2730(\261=\346M\310<\362\330*=\341\331\300=\000R\221\275\031u\235\274\330{\304\275\213\234\262=s\255`\275\330\273\210:\232\006\340<\346hP=9`\023\274\314X\232\275+\016\347\274N\030g=\271\201n\275\243\253a=[\331\356<UR\251<\0358\313\275|Vy=\302\354\267\274\017\372==\325\360\320<q\030\212<\260\306\241=\003\277R\275EJ\257\275/r\230\275N\235T\273\304\025x<\243\262\202=\341\222b\275\354|\366<bS\366\275N\256\273\275\214\327\334\274\271;\317\275\277j^=I(\016=\024-\306\2748\262\225\275\016\343\343\274\220d\263;\300\304\210;q]3<\373\024!\275\301\223\031=\351\034\276<\313\246\374=\356\354\300:\\)\333=\203\264\215\275/\311I\275\003\005\227\275g\014(\274I\233<\275$\264E=\331\356_\275c\320\214\275\226\240\0329Nj\023=w\214*=\006\363p<PY\211=D\\\230<%[\r>~\217\217\274\236\245S=\224?\224<\271\016\377\273\236!\337\275\246\"\005\276.\253A<e\241\021<9\304\354;\352-\'\276\027V\374=\207d\003=],\374<O\025\201=\256|\r=N\374+=*\341\032\276\"\235\255=\t\366\273=2>\301=\300G\255\275\021\036\n=\274\024\222=\360{\302=~24\273\274\312_\274\232\3653\276\361\302\220=\256\025\201<\330\034\266\273\373o\216;\016?\'\275$\377r\275m\370\031<b\251\365\274\257#\217=\234\'w\275axs= \221v<\250\306S=\347}\214=6\022\205\275\202\000\246\274\261\003F<O\300\331;\232\242\021\2767ty<p\211\026\275\001\266\007=\244\275\252=\301\000\216=K.\003\275\357\263d=\217\304\355={\001\333=E\363\307\274c$D<I=G=\003\'\265\273\337\235\235<8]`\275 M\217\275\225\263\367\275\273i\322\274\354UH\275\261\345\352<N{\301=$\257H<\333\005\206=\307\277\216\275Ao\331<R\001e<fN\240\274\235\222W=/a\\=y\325\323=\365\203d<\023\201\371\275M\365W=t\261\201=\264\304 =&<\334<\262K\255<\034AW<J\020\315<\232\226X\273\024\352\231\275\333\227\245\274\024\000k=\261\357\275\275\023\362r\275\354\216\271<\213CD\275\021\310e<\037\014W\275\234B\266<\315\333\203\273X\235&=\307\374\007<B\244\336=\036&\205\275\323\344m<p\"|\275\332V\202<\346}a=0<w=\344\035\370<\372\317d=U{2=b\204\034\276\303I\313\275\217C\r=\272\004\001=;\331/\275\247\030\237\275\224\315O=\216\023\361<V\310\264\275\\,\"=\376\234J\275t\037\224=v\010\272\274\3166\033\271\014\273\005=\035\2758\275[\205\237\275\355f\035=dh\202\274\275!\007>\351\274\236<\354\302\300<\350\"\242=\241\262#\276\276G\007<\377\351M\275Q\023\273<\337\267\347\274\246\341v=\034\324\336=\216I\212\275\261`\332\274p\300\372\271\343\023\275\275\357\260;\275\342\326\262=&\010\002\275\327c\311=\364\300\317=UX%;\325[m= \265\262\274\014k(\275\221!\252\275T\375\206;bL\272\275hCv=%`\274\274\241\356\245\274\272\223\305<d\251\332=\221[\237:\341\026 =\247[~\274\007l\240\274H\tn\273\207<\311;Q\272\224\275|\374D\275\nN,\275U\235\005\276\363\356\277=\026Ez\2751\252\200\275Y\361H\275\337f%\275\301\317)\273\267\'W\274R\217\210\275\331\232:=\344\302|;\207k\325\275\334\273\207\275\326\327\240\274\004A\370<5h\303=q\024d=\240\316K\274\321\232\355=\37422\275j\313\002\275\263\201\023=\344\342\241\275\337\352\022\275\315\n\333=\254\200R=\005\360\226\275\350\262t=f\024\023=\263\222\242=\341#\215=\363\236\206=\345\016i\275`K\006=\223\007\213=\016s\t\2757\2106\275lC\246=\272\231\204\274\035\372\223=\307\310\374=$\016\031=\342\364\276<\236\3614<\240K><\013\n\356<A\245J<Zh\235=\341\253[=`86\274|\304-=&\225\237\274P\204L\271\003\027\n\2731\330[=\020\335\220<%\214\257=\031R\236\273K\021\276\274\236\340\226\274@\347e\274\035\201\007\275Z\"p\275\010\314\222<\303\271\337\272\373\305_\275{f(=l\312k=\361\026\014=\017\266\322\275\300\264p=\372\342\242\274\353\031\017\276\246\374\344\2754tu\274\276\241j<\026\264Y\275\354\316\227\275n\021\343\274\334\307T\274\025\331\264=\336]\245\274@R\201\275\3429v<\023\2423<\257<\264\275A\227\202\275\270nG=\242\243\222\275^\234\316=\225\276\023\275\265j\222=\035uW=\023\'\247=\022\003\250\273\251\201\310=\307\214\206;:OL\275\225\250q\275o\030\017=\251.\253\275\017\277\253\274\016\342\225<\354\370!\272\256\212.=3\360\354\274\314\225\200\275a5\'\273+\201\216\275\0104\023\275\231\373\300<\232\027\356=\021\3026\274\032R:\274\223\031\217=O\201\031>\374^\037=\350\005\314=X\200\355=\336\337\'=k\013\257\275\232W\034=\256V\377;\004\2627\275\023\003\001<\353\213?\275\376\014\225\274\363M\025\276\000M\022\275SML\275b\237\261<4s1=\213z_=\030Uz\274\204\211\213=\310W\371\274\356}\t\275\230\231x\275nc$=\027\325\251=;[\035=\314m\251=\001p\235<\375\246\232\274;<\350=F\350\200;eg\257<-\206\223\274~\373A=\331\314\251<\177J\354=\322\216\334<m\014>\275\020\376\033=\333\244\032<\253\354R=A\005x\276\271\267\237<\371P\253<\034\227\306\273{\202\001\275\236%B\276y\007D=\275k\217<d\223\234\275x\362\370;\266\0073=\255\010\304:EK\233=f\177\351\2738\244\036=\003S\005\275\200\354\233\274\300\n\251\274\302\023;\275\205\307\210=\332\033>=Fq\030=w\226*;L\\\361=x\3007=\216\005\251\275a\035\351:\261\274\270\275m\211x\274\351\320\211=O\357\005\276\226\0345;\367F\260\2748V\375\275\353\220C\275L\377\016\274\332=\000=\2038\356<\002\214\200\275Ggt\275\2669\371\275\252-\027\275\031l\035\273$\225Q\274zAA=\3725\267\273 \031\017\275p\004}<\240\237\353<\357\202\252=7\325\363<\367\230\020\271=\227\236\275\206\205\356\274\353jf\2752\033\352\2734\\&\275\227\303\233\275\311\261)<\325F\326;\303\320\371=\256\007g\275\257SQ=\2547b\275\245\322\306=\311\264\274=u\337\"<\217U\237\273>\036%\275\220\177\026\275L\303\216=\003\203\216=\242\335\204=+7\006\275J\261\006=.\302\257=\240?\312\275Wh\365;\235O\026>\rp\226<\"\234\036\275\320\035\216\274\320\375\225\273R\\_\275\007\270U\275C\224\024\276\006\363\255=\226\242:\275\310A\306=\237o\216=]\247\277\275]\315\007\275R\203\276<p\302\333=\002\362\203\274\353v\211<\311\241x=6nF\275\204\331\224\275\363\234l=\226\254\227\271Z\017\305\275.|\037\275\272\341\010\276\367\361\273=\225\303\255;a\323\205<\tYp\274\345\312>=\"\254/\275\316\377\337=\210\002v<\323::=[\005\302<\370b\200<)\322O\275\230E#\2759\272\223\275fZ\353\275\364\245\245=\374\237)\275G\010\027\276\334zP=\246\327.=8s\0268\277\234\236=b\026\357<\227\366$\275\027\246U\275\345\022\275\274\327\336X\275\264Y\017>\227-m\271E\373\315\274\303\260 =\006\213_\275{\260\323\274v\310\350\274j\004\325<z\267\205<\350\022\373=\2414#<\276\267+\273\256E2<6\030\t\276\341\203$=\361\275}\275M\221\225=\325\340[=/\240\337<m\341\001=;\201{<f\362\004\275\034\212*\275i)\000\275\203\250\327=\205J\002<\266\335\036\275(\334s=\326\260X\274\"\237\201\274\t\024\375<\266\307\204=\310\007\227\275\264XL=\344\277\370<\334\373\337=\222\036\220\275\214\360\254=\331\007{\274\014\030\246\275\3702\'\275=@r=\307\342\220\275\t\230\350=&\332\204\275\234\361\250\274\013\316a\275\342X\200\274\226[b<\323\266\304\275q\240,=3\224e<3\226\032\275 \346\375\275,\333\020=\373\322\003=\004\332\327\274[gy=U\317\346=\332\277a\275\343\033Q<I\0220=WA\036<c;\026>n\216s\275\026\356%=\316\017\215=\214>\304\275\206\264\256\274M\025(\275\027[\221\274\227\024\316=\353\321|\275\256\322\244\274\005\360f=\\\374\347\275\226\251\237=\365\333\275\273\335j9\275:\2401=Q\033\347\274\'@\251<\244\017J\275\030\316\016=\300\200\210=\005s\037\275\256\034\206=D\004o<\263e\352=\030\365\277<#\315\336<j\256p=\211\306\222\275Kp\216;\361!\312=i\377 \274m\206\214\275\223k\250=Y\302Y\275\267\022\010\2750\307\r\275)j\244=\030\007\n=\230\313T<\275\370\231;\216\235\201\275\345j\003=Zw|=\0137\211\273h\312%=Gn\231=1\372\365:Xg\202\275\026t\013\275\310TF\2751h\204\275q\031\251\275\233G\216=+\023G\275T\243\334\274\337\022\032\276\370b\250\274\260/\254;\306\035\003<S+\207=-\233\267\274\341\333\020:\203x\340;\253\241W\275O\214\242\272\364\210C\275\336Q\343;\303\220\350\272\000\031L=\323\376\340\275\242\201/=\t\007\300\275\265\207\355\275\213\020]=\010\212\271=\214j\266<-+T=\321\225E;:z\346\275\304\261\t\275\216\341n\275\276\013j\274\034\032Q=\020\254\235=y\0010\275\3119\345=\222\301\350=3fy<|=\007=V\023};\020\377\334\274.~o=^\311\305\275\305\217\221\274\021\357\t>e\354\017\275\306\010\233\275\034\375\257\275\204N\177\275!N\007\276iZI\274\305T\272\2755m\231=\201\214\221\275\3156J=3q\241\275U:\355<\332g\243\275]9&\274\214\323\302<Dt\354\273\264\270\335=\336Nm=\024\244\256=d*v\275\257\006\375\274;8\264\274n\257\034=t/\032\275\325M\230\275\004l\221\275\201\022!\276\267g\271=\003t\237\275\354Y\232=\364\033\325\273a\341W\275~m\254=\256\277H=\0314\220=\332\266\307=pn\307\2759\317\266<\013>S=\212\374f=\3243M\273\324\255\262=\366\351\270\273\376\'\260\274\362eT=\006b\350<\253\305\322\274\371\271\210< Ce<)\221\023;\273\205\310\275\370j\224\273E\251q=\320s\221<?\360V=\213\032\204\273!\024\336\274\371\335\323\275m\200w<\227a\267=\323\364\225\275\202\307~;Y>\231=z\001\277=C~\220\275=\243l\275\327\312\215=\304\037\232=`[c\274\340\243\302\275\345\313\246\274\020\026\273=\300O\340<8hW=\247\270\332=\177R\231<\361\257\220\275\366\255\216\275\364\252\345\275\227\2752=S\377\222=\317qJ=\304f\236=[\256\234;\005\377\264=}\230\233\275\224\350&=\334\375\231=m\0103\274\231\244@=\024\020n\275\272;\260\275\2521\000\274%\222M=\371\313\366\275b+\021=\223d\204;K\226\002\276\202g\327\2738\206\343\273\"\266\347<\014\022W\275\332\274\031\275\213\337\204:F\331\275\274/`\312\274\215\322a=C\304\213\275bZm:iP\277=jm&<\034\362\375\275\002\313\354\275QS\261;\231\240\227\275\2374\002\275\271_5<\034\253m<ee\226=\225\006\213\275\005\350\333\275>4\240=u\367\234\274\237\220\364\270\027o\265<0<\023\276\334i\266\274.oz\275\325Z\033=\203\3637=5\025+\276>\350\017\276\004\020C=\370q[\274O\207\250=e\207\351\274\025(\356<\300\254K<o\203&=\275\240\r<e8\t=\033\321\235=^\322\254\275Q\300\266<hUq\275\323I\274=b\0078=-C~<\310\371\221=7=\014=\177\322\n\275rh <\022\336\177\275\234\243\347\274c\216\326\274!\302\225\275\323[w\274\035\'\314=\217\247\270;\251\246k=v7\024\275\250\007\352<jw\365<\253\203[\275Y\231\212=\236Y\344\275\243\013\307=68\271=\323\327\267\274\342\362.=\224\370z=\243\233\302\274\354aN\274\321\202\232=8o\261\275\303\016O=\014B\277\274[o/=\326\277\013\275<\307n\275e\360I\274\351\033Q\275<7A;\330T\212<\206Z\212<\t\201\000\275\337lX\275p\336\262\275\313\324\327\274\327\223\372\275\004|\256;r\0017<\301P\213;\033\037\022\275h\265\235=)*w\274\315\276\3129\372BA;.1\305;\217h\'\275\273\271r\2756\326\217<m\357<\275\334\273\230\274\361\230\350<\265t\300<#\255\321\274\227\242\003>J\025\345:\245\355\214<\320\031!\2754rF\274M\337\033>\221M<\275\004\020\353\274?\255K\274\342s\266\273\342\263\371<b\375(\275\315f\374\273\307\016#=\205\215<\275\213\003\033\274X\001A\275\021\035\270=\305\357\025\275.x~\273\330\344\334\275f[_\275\272\206O=\355\037\374\2728H\016>\247A3\274\240\035\277\275u\307\334\275\325h\354\274\tG\004;\233\313\014\2748-6<\013\337\226\274\276\023\264\275\264ju\274\370wp=\336\002\251<\036g\244\273;d\030>\225o\"=\023\325n\275U\371\244=w\306\342=\313^\254=\332i\305\2757\2672<\010\260\265\275\016\203\354\273o0\256\274!\240\213;Y\345\340\274\340u\177;\301\214\201<\027\277}<\005\316\254\274Y\246U\275~F!\275B\303\313=#z\017>\357\360\207\275\007\257!<\250Q\243=\023\\)\275\277-\351\275\016Ij=)\244\232<\363\274\377=\276\2136<\254N\024\276\250S\312\275G\324\331=7\356K<\267\321\t\276&\337\237<o\3431=\030\217\021\275\204\203\014\275Dx\370<\234\307\211=\207\275\237\275\004\302o;\035\274J={=J=?\235\217<u+\003=\356\273E==\270\375\274 \330\004\276\256\331\026\274\237lI\275\261\016\225\275\334n\272=\206<\252<&\347\313=\000\025\"=.P^<C\\\000>8\327\302=gD\250=\332\251=\275\317\343\343\273vF\213\273\361\300\355<\225\357\t=U\246\014>\026\214\346=\252\013Y=\233\362J=2n\260\273\342HH\275\242+\241\275{\243U=\014\177^=\357F\264\273\334\321\346\2754\360\240<\026p\220<\001\214=;M\344\222<\274\014\253\273w\004\337\275Ek\r\276T\005N=\017\026\030=K\215\307\275)\271\016>\347M\007=;\225\023\275\350\tA<\002{\276=\225\263\202\274\271\0160=\2236\014;\nJP\275\006&\003\275\252\336r=p=;>\270\212_=\254\322\254\273\033\001\025=\234\357B=\200{G\274\3501r\275*g\224=\340\330\245<\330|-=\017\263\273=\026\372\214\274?\347\255\275J\273Z\273\227\243?=\014Q\215\275\334\263\270<6\031\324\274\020\343\032\2714\260e\275\311P\213=fzm\275Q_\244\274\231\376\272\275\306\271%\275\214L\356\273\246I\241<\376\371\340\275\245yj\274\326\020\332=?cl=\317j\010>\016\016\036=\204\n\025=(\364\244\275\024K5\275\007q\237=\370{\354<I\203\336<.\201\233=\373\005\213\275\374\212P<\210\006\342<\326\370\225=\271\351\332<\226V\216<\004w\360\274\250\234\323\274\260QU<D\370>=%l\225\273\223\3547\275#1\225<e_\271\274$d\004\276^\216%\275\362\027\363\275k\253f=\004F\345:\257_\\\273~\221)<\245\222\222=d\216\325<)Y\245<y4\336\274`\211;<\363\332\270\275z\301\261\275/\307 >\t\327\347\275\244\r\334\275\027\352\355<\372\254\245<\314\023\270\275\036\254\002<Q\211\201=h\r\242=\251\324\226<\277\265\r\275\362\305z\274\313\361j\275{\227\347\272tK\357=w^\236=\231\202J=>\215\017>O\016\300;\325\232\317<\256\370\356=h\034\301=\351\300\256=\366vk=[\207j=\035af=F`\"\276\262S\203\272m\231\204<\376=\230\2746\255u\275\250Ff=\r\010\001\276k\002\345:)\177\327=\016\340\243\275\237U`\274\304\270\256\275\304\300o\275\216\002S=\210<\010=\375X\356<d-I\275\324\210\354=\024q\304\2741\256\373<\225,6=x\002p<\201\214\225<\201\373\204:6\354\352\274\242\t\216\275\203C\027=\207\363\335\275n\364\342\275\254.\310\275\312dB=\343\376\366<Xj\362=\344\037\217=\216\030\r\276\321N\247\275T}\253=\337\250\234\275\244R\023\274\377-m\274\325\202\277<\345u\255\274\365\024\316\274\030\235u=&\306\205\275S\326\034\275\364\237\021=\256,\022\274\367\312U=\310\014\217=y\266\024<X\365\206<\354K)=\021\030i=n\216\t\275#\372\026>\345or\275\263a\376<\223-\250\275L\033\321\274:\203\201<\n]\304\275\005\034\234\274H@\206\273\010\230\006<~\353B\275\371\223\236=\360\203C\275N\200\252=\363s8\274\325\264\314\275N\232\004=\353\234M=\352v\257=p\nL\275\320U.\274#\260\265=\361\301\240<\260\213\203\274\230-\200=\227\360G=H/\033\275\324\232A\275\321\355v\274\267\262?\274\357\377\267\274]\206\022=\215\017(=W\313O=\021\326\246\275fu\026>\2019\360=\034\266\265=U\225\306\275\301M\264\275W\302\204=\220\372\320;\243\225U=\026\246#\275\304\255\233=\237T\014=\303S\220\275\365\364O=\023\376\\<Lz\003=\325y\267\275u\024\311=\020\000L<JD\325\274zD\312;\350^\r=*\264|\2758\027\022=\232Oy=\370\2705=H\372q<\376\314^\2754\374\255\274\026\203,=\033\227\225\275\226\353\244=B\026I<A\032\317=x\333\326\274`T\200;\356 \233<\307\272\354\274\217>\026\275\332\316\226\274w\317a=>\227>\274+%\\=3\024M\275\203\262\371\273\033t6\275\223)\237\274\032\372K\275 3\323=u\332\266=\234\033\247<\252\257\024>Z\023}\273?\003\006=\333\273\017\274\210\3176<yb\306\275\322GJ\275\221*\230=\327 \364<e\010\251\275\334*p=U\355\221\275\242\t\003\275..\005>\272\335\246\275N\307f\275\017\330\017=\271\005?\275#Kt=$(\235<G\222h\275_\334\264<\342X\001\275\361{\342\274\317L+\275\304c\333<\332\354\264=C%\t\276:\326\347=Bh)\275TC|<\024\216m<O\207\260<9f\273<<A\031=\330i\177\2750\231\210\275\024d\032<R\343\317;\277\226\317<\014\2470=\034\374^<]q\334;\355s\274=>\211o\274h\2146=\331\344\227\275[\000\203\275\226>\264\274$\227Q\2751\036\253\275\352\215\220=\264D6\275l/7=\374R>\276J>\033=9*5\275\276d\241:\351\360\245\275\362\252l=\371OQ=GD\262=,*#\275\010Nc<i\342\260\275\371gn\275\272\343\213\274w\240\257=\347\320|\275\361\377\014=\372.H\275\2565M\274\223Q*=$\220\036=\007J\263=\307\263\177\2756\213\362=\002\316\201<\n\023V=\340\014]<-|\256<:6\346=\322\3243\275I\264:\275\256r>\275`\343\210\275li\226=X\370\234\273j\361\246\274D\333\352\274\250&\204\275\353\336\317\275**\334;,c\034;8)e\274\224\222\333\275\366@\007>~\203l\275D\037l=w\316-\275\0345\367\274\206q\256\274\022\376\250=\313\002\370\275\323\346{\274\372T\355\275\337`\320\275\035\3137\275\177\306\016=\321\231\373<\322\034\366=t\025\t>\304y;\274\267=\224:\325\301\351\274F^\324\274FHn=\364@Z\275\375\366z=G\366\241\275\334\"\242\275\010\310==\256\2510=\256\033\317<\000\264/\275\214,\330\275\307\3667;8\342\263\273}\200\354<O[\200=dB\301\274M\231\327=\336J\341=\253\025\001\275\306 \225=\034\355\251==4\021\275\213\233W=\276\331,=\352 /\275\014\000\326<>\237\224\275\343A\005\276\034\346\213\275\210\235\202\275\361!\317<gH\206=\325\236\207;wX\201\273:!/9\203\206\033\276\376\207\010\275C\325A=\221\227\227=D\\\336=\316m\243\275<J\263<;<\2659(\224~=\350[y\275\237\361<=\364d\024=\016j\006=\323\n7=\357{\254=4-\220=\261\310e\274\\S\216\275\364\326\024<7\271\330;\271h\r>\020\325\302\274\323\027\003<m=\023\275\327^\254=}$k<\002\0076=n\374\200=5k+\274 <\220\273\343#\242=e\376\310<\205\200%=\273\237\236\275\t=\371=x\347\376:g.{=\376H\232=7S>\275\273v\306\274\004\330\250;\252\000o\273\340\240\010\276\300D\r>\342T\240=\t\036\212\274\021\261,\274]\220k=\224?\322;M\307D\275a`w\275\253\206\026>\257\325\251\275\325\311\213=\0319\274:N\374\345<\017\036z=9=\254;\342;\242<\026\361:\275GE\206\274k\002\230=^\342^<\316I\363\275\022\261\363=i|5=\004\360\300<\256\361J\276\374\333\003\275\347I,<\245w\341<}cg\274\207\272\305=j\320?\275\271\213\307=\261\341\024\275\353\347\'\275W\263\354\273H]\301<\0247\246\275\372\275\340\274\034\033n\2740\304\r\275\367\001\001< \206\225\275\241\211\225=\330~\337;b^4<\217\014]=3\207\373\274Lf\r=\n#/\276\\\365h\272\3328\373<c^8\275A\336\215\275j\003\255\274P\205\034\276n\364E=\325Ae\275\312\310\315<U\374\263\274\033m\335\2746E\361\274\213\216\270\275U\033\213<\017\301n\275\035\006\370\274E \002\275\304\342\257=\016\2244=\032\337\371\2744\364\252;NY\361<e\025\237<\217\337\364\275\241i\202;\343}\351<\325\323_=^ZB\275\225\032Z=b\365\262=\3157\207=\025\277\030\275\213\327Q=>\033\002=[\013\254\27334\213\275\263>\222\274\267\357M\275\236\005\355\275|R\252\274r\221\226\275?\327\206</KT\274\3364\233\275f\237\336\274b\366\243=\021\025\314\274\221\346\241\273\177\363h<V\251\261<_\026\332\274l\254\354<<\354\251<\036\207\346<\025\2561=@\322\002=t\364\256=\371\243\365<\234w0=\250\254\203\2749\006c<\301\224\322;\362\330\020;\321c\216\275\224\310\343<\272\251D\27516y=8]%\275\027-\251<lo\243\275\261*\274=\327p\216=\307\231\225=\336&\231=\270\322s9\007\366\260\274\322\265\014\2751\274\230=\345\315o\275`Zk\275\255 \034\275\023m\024= ]\355=gy\026\276\230@\361<V\037\256<=\000\246<\264\254\200\275\376\206\252\273d\321\244;=w\000\275\211\023r\274\006\205\225<\322\357\210\275\\-\371;\311v\005>\237\265\334<:\344G=\370\233^=\210\0354=\033P\354=T\273/=\231&\262\2759|Z\274$\333\202\275\277\327\033\275h\240\311;\213P\013\275\350,\214\273C\245/\275\365B\006\275\001\225\337<=\234\014\275\216\223\204=U\026\005\275u}\013\276\337\350\264=C\302\010>\2252\277<\306\305@=?\264%<@\326\177<\022\361\014=\232\260\256<b\225\226<\203\203T\275\242\343\177\274\277\240\245<{\240\256<\226\260^\274\272\354\306=\007#\213\275\375.\030<q|\240=y\3330\275OS\327<a\356I\274\315(a=d\357\213\274\237\3144\275\314\265#<\333\2728;\034F\365=\'\333#<\240\016#<~\245D\274.{\225<\022w\204\273\272\210c=;D\301\274;\365\t\276\016\367\377=[\271X\273t\261 =\371)\345<\004?V\275\005\205\244\275\257\346+=g5k\275?\222\037\276~\334.=\340\322y=)S\205\273\277\3611<\3673\310\274$\261\200\274\344/\021=\267\221M\275G\225\030\275\020v\332<\263\215\244\274\021v\004\276u?<=\2366\035=\216z\206<\372\350$=\215S\374;\304Fx\275Z\314Q<\341\014\177=\351t\005\275\222\370P\275\254\210\251\275\205|\t=^\360\357;\300\211-;\256MA\275\310\031I<\014Vx\274\013\257k\275\271\274:\275*\223\230<0v\263\274}$\033\275_\236\010\2768\026\034\2750\321\177=\317\300$\274\353\265Y\275\352T\t\275\317\364\375=Y\362\210=\337\224\231\273p\271*=\022\311/=\215\230\272\274\\p\221\275L\274\375<\007\242.=\021\323\304\274\233\375\030\275\303-v=\334\267\247=;\247\260\275\273\"\n<\337\003\266\275\336\331\327\274I\340\216=\306\265l\2747S\301\274\361v\306=\n\344\253\275\223vi=\3576B\275\035b\005\275\223T\230=\013>\216\275R\322\352\275b>\215=t\367b\275G\2112\275\2474-<\340Z\235<\025\351\306=\3721\240\275\334r\206=L\325\257\274%\321\032\2754\354\315\275\276|\267\275i1l\274\353\305\336<\324\325\204=3\220R=\031Q\345<\224*b\275s\201>>m\353\277=\250G\003>\231\237\022\275\264\376Y\275W\034\266<\267\231\025\276E/\024\2758\005\277=\245\252\261\274\375\251)>\262\320\240\275\215\307\340\275\251\320\232=\254~\333<\256\223\t<\313\2021\275\315\\\346=z\213\036<\367/N\275\203/\267=\277|J=s\323\342<\000rf\272\225\021\014=\202\346\205=\005\350\232\275\014\305\326\275\342\254K=2\314\252<\242`\035\275\212}\350<9|\252\275|\002Z<AOu\275\374\347\200=\321\271\023=\021\030|=J\326t\275\2319\316\272>jf<\222\243\341<\247\345 \274\n\025,\275\000\014\302\275P&\035=\324\252%=&7\260\275\205.J=\302@\264\274\016m\240\275\001~\214\275\021\374\245\275\232\3257>\362\300\200=\360#\304<@o\305\274\2055\246\275N`\212<\252b\"\275\323\246(<\244;\361=\247\356\341\275\271=\324=:\373\347\274\217\235\020:\260\265\037=g\355!\274C:\t\275\361-\263\275\300I\252\275\267u\211\275|\351\330=\372\334-\274?:\340\274\'\251\326<\232\210\311\275\307\033\264=\213\206\262\274\263\360\372\273\314\313T\275\244M(\275\334ed=U\345\307=[\300_9\373\214\213\275{$A=\233\'\t=\036\017\211\274\233\301\253\274U\344\007\276\271\264\307<><6\275\373\316\010=\224\231\263<\247U\231<[\333\002=\005}\315\275\330\357\n\275k\205S\275\243\232\035\275}\r\277<K\343\230\274e\375o\274\211\3515\2761\275\207\275\332\364\227\275gHi\274Z\236^=3\024\326=\010\346X=^v\316\274\350!\006\274\354\010 =\3265\300\273\276W\207=0\370\376\273=\320\266=\256\r8=\314z\200=\355?\246=\342)\027=\030\037_\275Q\275\254=Ao\016<u}\251\274\205\014\017=KHx=s\3371=\205J=\274\253\361\034\275W\275J\275\014\212\231\275\236R;<\335V\344<\014[\205\275\262A\216\274\264\352\217\274~T\300=\n\337\310\275\222\302I=\264\305\201<\260\002\314=\226q\353\273\362Ch=\305;\3369\254\036\310\274s\304{=\024\027\261<\231\003\006\275\006p\025\275.\304\220\273\005\031\206\274\221q\211\275\352e\221<\303\336e\274\t\371\245\275\312\273\201\275\360:a=\303\341\271\275)\236\250;J\237.=9\201\240=s\031\323<oB\327=\212\"!>1Z\031;N\317\265\274\325\301\326<\226m\315<\361\355I<\r\322\031>\341\300\347\274\243\0055=!N\255\275\r\231\027\274v|1=>zx\273\254\263\243=\311\245@\275\347\326\343<\013\212\330=\235\3424\275\317\207\037\275\343!\r=\262\261b\275\244m\214=9M\255\275\017\002d=\3253\223\275\2635\000\274\260\256$>\307\004_\274\224\366J\275N\0307\274\355\201O\275\364z\367\273\254\2214;\301\'\006=\247\2755<\267\375\014\275f\345\355<\320#\311=\254t\262\275\202\010\371<\361p\007\275\025 \032\274@\246\352\275\00770\276\306R\206=\3436~\275\226\271\256\275\"uC\275\357\003K\273!\207\302=+s\224\275\364$\031<\346z\373\275X\370\222;5\273\217=\014\200C=\274:==\235+L<\211P!\276\204:\270=\023pC<>\234;\275J\004g<#\310\264\275\360\013\345\274\247 \264\275\320\344\005\274\304\030B=\202\225\001\276\316z\356\2726:e=A\364;\273\025Q<\275=m1=\024i\215=\252\030\307;\347<\255=-\203\257<s\013\335\273W\200\034\274\303\021\201=M \306\274\031Z\022>\321C\233=:\370E=\235\020\002\275\373\327\013=`\013h<\305P(\275l\333\236\275\376\013\213=\237\350?\274}_I\2725\203\236<\306\006\270<o\353\336\274\267\035\334\275B\303!>0ma=~\213\266\274\327\331\250\274L\361,\275\021`2\275\267\230\226=ckM\274\023\342\215\275\376\310c=\377;\216\275]\035\032\274\017W\202=\350\231E\274-\325\340;\222Z\037=\014\000]<\206\236\005>\177\006\331=\343\307\234=\375Gi<6!\315=o\372\320=\310|\262\274\324\247~=\362\233\321=\264e\311\273\206\031&\275f\372c=\351F\277=aXw=\263j\237\273\245\177\027\274=\020X=\373\017U<\265\336,<T\355\307=\377\312\267\275jQ0\275\256g\305\273\355\037\305;Xoq\2752(\372\274\027\343\350\275/\325C<\027G\356<\263?\323\275\023w\203\275I\346\310\274\326`-\2759\027j<P\363\264\275\356\202\213\274rg\237\275\355gl\274\2538Y=\267\337}=s\023q;\nJ7\276\rC\016>\272\223\374<Kc\274=\t\345\014\275\263\027\343\273ks\203\275\330\313\000\274\237Z\205\275\210\2059=\021\263\213=\344w\007\274\326\234\342\273-\243\035\273\224s\301\272\3672\345<\337\324c\275\313\324M\275K+G\275\272\212\010<\243\017\211<q\235\003\276L\241A\274\273\355,<|q-\275\026\006\000\275\240Z(\275\034\337\374\273\213C\357<\252\215\226\273ir]<g%\327=\333\2346\275\365\254\345\275\377\'M\275\233\237\004=\217\023\t=9\022\306\275\345H\'\275W\025\247\275\0318\016=o\351\223=x\000\263=\250\207\303\274Q\224\017\275\017n$=\024\033t<\263<\335;\020\371\222\275f\362,=\264\233\265\275\220\256\024\275$\333\326:\245#\300=\213lA=\230\311O=Sd\221\274\354X\260\275\203\322\330=\355\023\263\275!8\202=\240\216\027<f7\241=\372\360\243\275\315\2055=\2113\305<\352\320\310<P\300\276\274\212\274\256\275\247\333\300\274\360\034\273=\351\266\317\272\237\361\210=\254\3606=`\336\032\276r\330\227=\272\033.\275&\377\212\275\366\311\350\275\366B\340\274o`$\276\025wp\274\333{\333=]\2629>\304\003G\275\350\250\003>\353\205c=v\367+=>\335X\275F\3055=\004N8\275\027O\312<\331\036\025=\002\361&\275>\260\n=\033J\344=\317\217\210=\247e\263\275\353\003\302=\346+e\275\275wa<\367\310\\\275 \322\267\275\032\207\347<e\374\356\274i\316\025\273\320\301\023=s[\300<\213\212\334\275_\361\311\273\270\332\016<\322bd\274l\002\023\273X\321j<\303\344\201;&+P\275#\035\264=\255\252m=\377\322\"=\304\211\320\274ps\205=k\344g=\312A\301\274w\326\317<;{\246\275\273\003\205\275\351\214\231\273\326O\250\275\351F\254=\017m\347\274\223\230\237=\205iv=\003\025\355\275l.\206;\273l\323\274.\003^\275^\247\255\2740~\237<\367\254T\274]0\230=\260\300\213=}@6=8\217:\275\244\023\242;\025\234\212\275\014\336\341=V\014F\273\225\0175\275`\3633<U+\366=\275`\302\274\000F\201=CEf<\034\343\367\275\001\224\004<\255J4\275\235\031\276<\346][\274\236\3639\275\022\307\245\274\\\343\016</\376\311\274\013\326\264=\326\224\315\275&zL=\355Cp<s\371\231\275f\2745=NbF\275\353\216\273\275\255aI=\210X\025\275\230\232\261=\017Y\211\275\233~S<Kt\315\275\005\237K\275A\255\314=\206\375x\274\253\353~=$\333\274=\215\300\213;D\225\306<>\3612=\321\005\0368d\237\207=\325\365\236\275P\342\347\275\243\363O=\324x\313=6\227\301=(>\006=\330Y\224\274\365\370\r>-\333?\274\364\235\216\275\231,O\275\270D\333=\032\257\351=7\206\030\275\375lu\275\221dS\275\331\252\236\275\321\325\025;Y\221\026=\007\007\262\274\201\274v<\205\267\312\274\367YH<\352U\232=\263+\321\275\341\340\022\274\035(\302;\246\260\311=\007\335\003\275\224\320W\275\032\264c\275t\177/\274\0172\t<dja\275^G\217\274\360\265\005\275Y\001\262=\340\346\234\275\344\225\206=\366\355\006\276}\0022=\341\215)\275\215S\350=\256\347J\274B\0217\275\326\036\244\275\263\r\316;\312\313=\275\233q\200\275\364Y\351\275\351\361\242\275\353P\t\275\223\237\337;\024^\026=-\265\251\274\275\211\006\274\335\230\353\274\247\301\277\275)\202j=\274\024\003=D3L=\222>t\275c\r\324\273}5\241\2757\300\213\274Ds\322\275r\225\212=\031\365\273<d5-\275\347\2714\273\017\225\376\275\004~:=\370T\376\275r\2173<\265\031\325\274\255Z\367\274\014\3113\275\325\275\216\275iD\326=W\257+=r\245\267=&\326\236\274I*-\274{\252y\271L\324\310=\356b~\275^\274)\275\331\374\\\275\221HS\275\232!;\274^\203\376\272\252\332\377\275M\220\372<\024\\\020=\231\221<<\202-\266\275\003\235\204\275\373\213\332=XW\272\274\217A\223=\316\350\315<\020\032\366\275\001\236G;_\267b\274\346\355\\\275\255\343\007\275\376\267\331\274\221\362O=X\216\034=d\375D=\200YM\275Ors<k\363U<& \372=\334\201\252<\335\326\340=\017\306\202\275\013=u=\236*\374\275\231\026\236\275\246\244y=\246\200\006\273\010j<=\3123\r\273\340\274\264<^v\021\274\315\216\270;\255T\313\274\376\251Q\275P\357(=\2328\363\274\377\356\220<\030\210\206\2754\021\277=D\264\256\275\212\301\203:V\035$;7\240\001\276G\021\353\274\372-\003<\352\362\002<\177\237\271\275+p\341\275\345mF;\2037\262\275\234\276\257\275CH\'<\006Y\205\275\325\002\277\275\23584<H<r\274\013\3538<\001\007\334\275\304N@\275\355\313\006;\r\371 =\227!\276\273\035g\246\2750\'h\274\301\214\032\275\260\311\263\274:K\023>W\013\220=\333\335\342<\376\321\276<\321\365\001>0\002W\275\020\244\202\274\311K-\275\357\220\033<\261\333\253\275K\240U\275\271\021\366\275\376\017\022=D\223\357\275\241^\372<\224\033\301=\\\267J\275u\243Z=<\322\313=\001\204\323\275|\234\300\275`\202\364=Z\311\221=)\211\255<\263\251\026=\312f4\275\370\203\210\275\211\255\025=m;\013\276\323\177|=\210E\310<\246\252\033;\226\373[=\222\344\344\275\223\r\"=\334\032\343=\232-\271<\261\236\n>7\253\262\274\340\371\325=\'\256\371\274\221\335\321=\203\351\236<\247\337\200=)3\000>\270\361\220\275\233\333\266\275\2509{=\242\301\362\274\265w\020\273\301\0018=\002~\243\275\013\031X<\337\373h\273\007\364(\273\233~f\275\016\312\331=s\373\024<\327<|=\342=\001<\264}6=T\023==f\024\236;f\323\226\275:(\001\274l\253K\275\240\265\023\275#*\273\275\022*Y\274v\300s\273\337\315V\275R\314|<\306\220\300=f\343\275\275\225\335\035=)\006\226\275\354\324n\274\340\022\355=\247\t\n\274\225\236\343\273{\034\334\275m46\274&#O<e\304\206\273\356\005\213=L\022\246\274\376e2\273MC\251<\274\2150\276\235*F\275\210#\355=\250\242V\274\370]?\274%\257\365\274\2723\231\2755K9>9v\227<\332\367\r\275.\234\005;\234\271\207={\\\003\274\316\323\317<i\3162\275Qd\206=\202m\207\275\023\373s=\221\262\310\275\036C};\204| \275}\340\243=\305+\030\275\311\272\303\275\347]\'>\222\374\351=\277g\212<\213\250\022\275\341\311\016\275\323\236d<OE<<\347k\225=\300<\001\276\220WB=\3448-<\tu\';\257Q[=U`\n\275\373\367z=%\305\206<C\317\324\274\275\010\373\275q\221Y=\346J\020\275\272\265~;\037\205\325<a\255\202\275\316;\355\274\016\252\333\275\236a>=cx\306\274\\A\202\275\244Q\226\274m$E\275L5\037=\267\303u\275\376\324\005=\265\243\246\273\232R\266<\362U\306<[\356\372\272Xi\034\275\276\"\022\275\31567<\363\213\333\273P\277q=\304\024K=\211x9\274\376x\214=\273Pu=\240t\223=\341\373\230\275\254\326\037\275T2\367\274\200\252\223\274V\307}\274\\\006\367\273Q\324\267\275\311\270\230\273q\204\213=&\370\336\274O\236M=\\zD\275\000\324\'=\2322\003\275,C\242<[\236<=X\334\002=\216\351\307\275\361\213\347=\346\264\"=\346C\306<d1\213=\375\343\327<B\"*=%\203\303\275Te\271:u^\004\275\367\374}\2751\353\271\2748\006\310\275`/[\275\037\354\303=>F4\273\372\2371\275\351\207\200\275\0362\027>gSB\275\202L\212=\262\027\207=&O\030=\362~\025<\211ey\275\311\342\275\274\212bO\275G\024y\275\236\206\232\2730\032\331=\262s5\275\306\251\205=$\264j<>\367\361:o\204\222<%S\226\275\242\\\210<\265\243\213\274\302\213\270=a+\237\275w\000$=\362@\217<,\216\321<\352\342\245=\210\3405\274u\200\311<\020>N=h\336c=\024D\n>\230b\221\2750.\">\360>u=KK:\275n\273\235<\2642\271=!\210l=\273TY=\231\033\327=F\362\245=G\211\303\274\315\300\263\274P\227_<[\366\276\275\323\334\212\275\237U+=\320\007\244\274\0160\036<\007\311\311\275\037\201\241\274\r\314*=\327r\301=\2277\352\274\366\002\325\273\370\204\337<\355\270b\275|\360,\275|\362\230=\377b\026=`\2367=\227\003\221\275X\264\257\275\361Cd=\205\016\305\274I& \274I\256\226=\223\335\274\274\223\014\267\274Y\315\034\276\342*\004>P\037\342<2\353\300\274\010,\244\273\341\323\213<v\361\223\274\033\364\376\273q\017\332=\323J\204<\313c\322\274w\222*\274\356\235\003>b\264e\274rD\315\274\177\005I\275\215\031C\275\'k[\275[\r\004\275\367\222R=\241\370\005<\251*5=\220m\n\273Nu\222<ra\262;\353\334(=\314:\024\275\264!\234=\244Q\220\275\214\235\346=U\214\006\275\023\372\345=\035\262\006\274\2254\3719\227^\273=\r\325\215=\3546\014=\0036\235= S\021\274w\025\000=\336\313\t;\340\323\002>Y7\376\272%\266j\274\010\334\354\273\204\237\200\2758f\210=9W\273\275\263\310a=\225|\202<\014\\\033\276\275\314\204\275\327\240\237=\365\0216\273\0375\245<\310\317\344;\335\376N=L0 \275\240\330\'=\027\376\035=\327\034\370\275\201\326C\276&3}\272^\245\231\274\273\016\332:J\333\265\274k\341==|\003S\275\266hJ\275\324\276\231\273\022\243\311\273\253\272\006=\005\213&=\t\212\267;w\256\201\274i\3575\275\333S\033\274\2311)>\025\002\035\275\004\np\274tbF=cX\253=YT]\275\000\325\270\273W\010\222\275\245\274\013\275&\352\203=\024\344\242;\t\344\r=Ws\214\275\226\036H\274%\366\002>\\\243\251<p\'C<\321\276,\275\'\252\032\275\0218\242\274g\205\350;\\\326)\275\'mM\275F\215+=\262\247\201<\374\244[=\201\235\343\275\220\327}\275,0\303\275M\322w\2758\317\367\274\017\003\237\275\036:\027\275.\322\346<pc\267\274\226M\233<\351s\267\275\020\000\227=@\355l\274\034\333\374=\313\365!>UZ\344=\001\365l\273\345\345\367=\226\305\215=\241\342\224\275\214#B\275\264*\305\275p#\327\275\375\326\006>\177;\220;7\320a\275\202\261\"=\276zx=D\343Y=\242lJ=\207\370\341\274\240\207z\275\005%\021\275Z\342\016\275\236LS<\346\020)\273s\000j\275r\241\335\274s\274\207\275\354\220M=M\037,=\237\004\246\275\272\026\251;H\234\231\275\327w\337<^3\267<\264Q\230\273\017.\245\274\236@\202\274\0235\275=\035\340p\272l)%\275\221\016\264=\247\026J=\330\324\035=\234\272\374:@\3042=\246\360^\275\370}\027=Q\225\244\2759\204\021\276\361e\265=r\'6=\312\244\212=\201\230&>y\t\225\275J\021\306=\300\010\376=\311N\001\275O\213\276=s\207D\275\351\271}\275:\236\211\275\277w\347=H8\275\274\316Y_=T\005\326=\035Ke\275\205\335f\274\372\373\217=w\"\034\275\356-A=\253J\377<\316\274\330=\212{}\275eB\031<\211\243\251;G\213\200\274\343=>\275\025\254\022\275=IX=\210\200\371\274\r\001\326\274\314\263\214\274\r\336\372</\331\313<Z\223\213\275\027j\205=J}\300=\346x\031\276=\3709=\221\316\205=\021C\346\274S\001\036\274B\026;\275d\253\034\275z\345\313=\254[\034=\351*9<\001\362\204\275\237\240F; \264\242=q\376C\275S\027\323\274?F\247=_\347\262\275\004\244+<\271\267\372\274\377\256d\275\316\214I;\365\030\242\274\230r\226<\226\2110\275_\365\005\275d\322\031=]\010\373;\312 \240=go\300\274\275dv\275N\252>=\244\220\321=vN\005=B\235\207\275|^\025=\320\212[<n\273\303\274\033\035\264=\021\316\037=\312\252\200;e\362G\275\331A6\274\220x\211\274\001\013\023=\303\227\307\273\030M\317\274\006\336\010\274\371\262\035=\254\025\321\272\242yD\275\371\370\274<\211\017[\274q\367\264=>\030\334:\233E\252=\032j\013=\334\366\363=)\"w=\217,\005\275\232\321T\274\241\"O\275\025Ua\275\202zi=K\265`\275\326\227\200=N\226g\275\201\321\246\275\330\177\344=\367]!<\024\373a=\321\316\323\275\220\321\242\275\030\317\232\275\2459\233=\373*\376\274\032\251\243\273~\234I=\017if=\212X\307\275\243\343\215\2744\227\273\275\034\303x\275\224*\022=gc\026=U#\214\275\004\"\301;G\357t;3\314\226=\033+\020>7I\361\274\204\306\247<L\017\016=;\262\330<\357:2\275\000\277\251=0\016\003>\016,\215\272o@^\273{\324\353<\201\242\261=\322%\310\273Dl\210=*\337\205\274\313\032,=\037\0357=\245\346\220\275,\374\320;\341\272\034\275\343\014\321=\'O\273;C9\256=\332\257\231=\'\r\370;\276\335\333=U2\341=\313\236#\275I\336\263<\354\014\330\273b\226\000\276\032\230/<\372\205!\274*`\314<D-P=\323\226z\275\017\326O=\024\304\207\275\373\244)=\rH\261\275\342\337\274=I(\232\275sOB\275\214f\212\274\362~\"<\325\222\211=\376\305s\275f\365\031=\221A\213\272\255t\374\275\311zG<\031\351r\275B\300\204=\304\200\267\272\337<\013\275T(\202\273Fj%\275i\376\256\274G\340\277<\337d\003\275\002\010\251\275\362\254\205=\235\335\205\273F{\032\276\027:\303\274\256<\231=2\301\271=\004CI>l\372T=\306A\214=3\002\332=y]K=T\313\354\274\272\202\221\275V\235O\275\335[-\275I\r\003\275\304\025\336<\274J\204=k\321\007>\301g$=\224\265.\275\020=2\275\321\266\363;\014\376\025=\014\214\300<J\000;=C1\206=\331%\022\276m\2635=DW\366<\343n\210=\203\023\332\273\355\230G\275\317\337o\275+\300\000\276\357I\225\275\375n\330\274h\200\214<\365\322\007;\350\331I\275\253$F=\021\235\332<\"F\376=\226\367\216\275l\226\323=\200\003.=\274_\312=\303\021\265\275\367+\024\274\003\366w\275\2249\242\274\357u\022\275:\"\236=\270\345\203=$-)\273rml=\247\345~=\246\002\320=\317\270\266=n\253\020=\t\\\373=\342\202\312=\341\277~=}2Y\275\327@\226\275n\246V<u9\306\273\274\222\277:\244T\034\2758\202\022\275\234y\305\274\0311a;d[\332\275M\203\375<\227\255\224\274\t}\247\273x\036\201:\035D\256\275\275\325\250\273\324l?=6\3078=b\212\231=fj\373;\351\330K\275n\317i=Z\267\364<M\377\355<{Fn\274KB\256=\262\004\301;N\227C;\006\364\211\275\264R\247\275|\226\'=\206\027\374=r\010\005=?\314\371<EN\207=\032\356\246<\345\010\224=\373\017g\275\231Q(\275\353\021o\274.\260m\275\267\227\220<c?1<\014\330\212<8NP\276O\317\031=\207\321Y=j)\303<\341\275\256<\240\340\346\274\000\344\205\274/\t\006\274\302\020\214\273\336N\210\274%m\240=\022\326\023\275\241*\314=L\207\321=\253\023\201\275\177\r\275=\r\027.\273<\004\316\275\301\034\036\276\255d\325\274\352\r,\274\303b\023<\351\017\322=\3241\010\275!*\007\275\344/t=^\265\303<C\231\235<L\272v<TP\027\274\375S\000\274\304\202J=\215\010+<\233\352\310=U(\321\275?~\277=\327\321\025\275\031\321\210<\253\002\t\274\014\272<\275o-\332\274\376\2568\274\271\030\322\275KW\013\275\221\276\314<n\337\341<\350z\241<4\243\303\273\223\2700\274^\2111:\237\330\354\275\242\277\013=n+\273=8\";=\027\275\364\275\317]4=xey\275>\274\263\275m\0065\274W\004\201<\204\273\302\274\356\032\250=\217{\231\275\271[\364=8A\013>iC\215\275\007\346\317<\317\031\271=b\307\240\275 f\257\274j6\221<\312\247\005\276\335k\214;\273@s\274\334v\237\275\325\222\270\275D6y\275\223\321i\275Dsf=\026\364\033=[\352\252\275\330D\257\275\255\2005=\377_?<\235\224\257<D\327\233\275&\372\037\275\037\337\022\276\333b\033\275\277\350!\275\303\316-\275\206C6=\254~\n=\341\310\345\274\314\331,\274\345\340\253;\300ml\274\036t!\2764\3177\276\244\3307=)\305E\275\306\024{=\236\236\274<\032ya;\354\337\203\275p\360]\274C\362\"=\266\342l=\270%S=\344\260e\274O\325\257\274\220\367\217<\260B\022\274\214\273\032\2746\323$>%\301\323\273\334g\n>+\304\372\274\323\257\026\275\210\035\270\272&\037\366\274\030\014_\275\262\202\233\275XG\020<\273\253T\275\301\342\t=\225 8=u\362\n=\245\t\031<C)\022<u\237t\275i\316\\=I\350\270<\022\317\177\275\020\343\205=\254\304\312\273k\003x\275,^\326\274\374\324f\274~#r\275\230\224B=H\020,<\333j?\275s\337\016=\215\027\311<+\023\211=\360\370\232=\250\243\356\275\030\347}=\314J<=\335\345I\275,\366\224<\276\246\330<\004\350\250<\322\300\212<\221\243\025\275a4\313=6(\357\275\217*\275\275\246B+=y\250\327\275\315\026\223\2747\203?<\023<\020;\211\237=\274-\262\263=\177N\036<\016\223O\275\336\2154<bI\227=9\213\022\276vG,\275\330\224u;[\027\367\274y\002\234\275\213Y1\275\261\024\353=&\304\316\2736\337\374=\036\364\221=\ru\355=\327w\270\275\302\016\"\276k\221\217\275\361\334\207=eo\003=\030\215\246\275/\026\'\275a\027V\2758B\246=h\234\335;\376\361%\275\360\357f=\036\355o=t\364\266\275\025\032\343<C\0049\275\307\255\320\275p+\267\274\314\270r\275\036\247(=\201\033\366\274\000|T\274\251#\217=l\217\210<\005G\225<\232\tC\275H\276:<o\2027\273Q\265q;\204a\255\274\n>\364\275\214\023$=Wx(=\324\256\230<:O\005\274o\275\230<\026\266\335<D\200\276;\260\373\037>c\234\204=\230\253\024\275\013\004<\272\177\027u=\200\r\217\274\313?\345\274)\034 \2746\215\203\274X<\315=\245\343\350=\360\224\325<\272\206\345<3\"\"\275\366\274\021=\272\303\357\275\356\263z=\224\017\233\275\253}\313\274\317\245\035=\227t\r\276\036\0215=\300\337U=\002\206\355\274(\235.\275\007s}\275\025\352\243=m@\327\275V\312O\273.:\3728\002\035\014=A`\210=\267\026\210\275`/\022\275\331\005\351<\337\023p=g/\341\274\224Q`\275\331\352@=V*j=\244\'\243;}\341\260<\346\037\241<\272~\021=\271u\271=bl\247\275\234\247[<[&\267\275\267P\022=(\257\220\2759\215\376\274&u\030=1R\373\274\025\223\200\275!\307\037\275\340\306h;\344\300\346=\347\273\260\275W0\274<\277\341\315\275\321\277\177=?A\"\276j]A=)sn\275v\364$\275\311\253\233;\307\016\322<\014\323\265\274XN\030\274?\237`;<0u\275\374\331\035=\344W\334\274&\363\242\275\252K\264<\024\004$=\341i\303<U/\031\275\004@\245=\326~\224\275:>!\275\372\227|<\217P0<&\2549\275\355\243+=\314\214\024\273\232\363\222\274f\017Z\275U5\271\275\217\363b=,\331\234=\356\263\344<[L\247<j]_\275\302Y\222\273\227\220H\274\010&\337\275\312\2020\2758Qv=\372\321\254=\273\n\335<\375\303\322=\241\016\203<\242\330==u\222`\275g\345\005>\311\360\306\274pB\254\2750\250\366;\256\217U=\366\225\264=f\315\217=\361f\202\273Vo\254\275\366We\273\250FW\275Njd\275C\\9=c\224m\274?\372\035\275i0\222\274t!\016<\034YT\275\226\231\210=\224\202L\274\345\026\324=\233\202\227\275\264\234\247\274\310\037y<\"I\307\2754\251\237=3\371u\275j\t_<<\317\213=]\355i=\206\303\321\273\305J\335;\236\031\367=\306qV=Pk\263\275)\223?<\356\331\013=4gx\275\207\230\375\2751j\307;\303`\251\274\234\233\273\275\214\255;>\275\275$=x\003^=\332~\266\275V\234\207=\311\345\304<\354\220(=\364`\207\275\317\346\003>!\251\301\275\215\317\270<\304i\236=f8\373\274\335C\342=\302\226\032\275\343\272\275=\243|\031= \232\226<\017I7\275i{L\275\017\'\216\275\337/\032>\007\217|\275h\221l\275\213n\032<hxY=\232\262\335\275Oe\232=\2340\023\273\227}H;*>\343<z\013\231=\215\243g\275\264\303\213=\350\002\202\275\023+\250\274\265O\225\274&\336\257=TP\210<\232\312\361:*\250h= \243\220\275V\000~\275\203\004\342\275\203\303K\275\251\200\364<\216t\000>&T\215\275\n\274\363\274\361\353>=\351N\325;\277\347w=6\314\346<b4\343\275\275\002\200\274\223\t@\274U\327\223=\020\262\035=e\252\301<\001X\317=_\257\203\275z\256\212\274\260\375\010\275\237\177\264\274WVk\274?\335\315;\006\217\331\274\371\207\303\275F\202\014\276\361DX\274f\231\244\2752!s\275\376#*=\302Z\232=\212gB=\016g\270=\276P\201\275#\304\227<i\326\233=\351/\004\275\214\024\226\274s\267\237\275#\205\214=B_\302=F\271\212<,\032u=j\320\262=p\301\213=1\317\206\275\364k@\275\201\376\004=5\352\323\275\303\255\363\2756\002\254\272\322Zp;G\213\265=,\036\225=\324\377x=\204\202I\275\306\212\250=\245\035\213<\003\032%\275\022\302\224\275\244\364\202\275GJ\215\275\\{\331=%\017\320\275&\211H\274\213\365\213\274\367fv=#\000\n\275i\347_\275S\007L\274\233\351\016\274[A\225;A[\026<\204z\337\273\330\376\016\275\256V\265\275\013U\333\275\361\272k;_\324\257=\306\213\343\272\222\352\257<\214\313\251\275\225\212\221=}\360A\275#\335\217=GJ$<\307\373s\275p\247\251\273\254\214W=<\017\264\275\265\001k=?#\325\274\374_\300=\336\326\330;B\265\277;M\200\322<\\\2050\276\353\275\033>l\037c=\351\332\220\274\273\232\346\274j\327\002=\303\316g<\'_6\274\201\231o<\224V\016=\231\323\025\275\306HO\274\371E\257\274\311\177\014\275\007\325\257=\'8\257=\365\021\006\275~#\274\2759\326\201\274\244\275;\2746\035N<\271\002\226=\355\334\205\275\017\2357=\"\371\215\274\362~&;(\332g=\362\020\217\275jD\302\271\025KN<^\254\351\275\200As\2752\250>=bC\000=\376x\025>\300\343\342\275}\274\251\275%\362\365=\3475\t=F\341\377<\216\010b=\371\003\243=\240\354\006\273\337\013\275=Y\327 \274\337w&\276\243m\004\275\320\367\333<\026/%\275\016\302\'\274\376\250:\274\233\2226\275\035\r3\275!\032\330\273\323\016\302=y\200n\274\n\261\266=\206\372\320\274\255\224\216<\022\253\016\275\032\020\266=4\234\377<\303\200\344=t\004\220<\177\352\027=@\356\033\275\211~\"=g E\275\231\334\370<Q<F\275M\301\210=b\314\r\276\346R\204\275\264o\364=\3429g\275\024\250Y=\261\010\320\275)P\316<\372\326|\275b\025\220\2759\'1\275\006v\374<\336DK\275\n\321\n\275\320\202\314\274\220\373S=\333\037S=\303_A\275b\201\350=\020\352\234<ZH\022\275\2157\220<\356\362\237=\221S\204\275\346\267f\275u\324\214\274{\217\252\275\375\313\226\274k\355\276\274\220\272\307<0\026\002=\312V\323\274\014[\333<\334\356\235\275s\261\312=\275\331*\275s\352(<\340\313W\275\274\023\370=<\3245\275b\273\235<iK\322<IUb<\257FD=\326\347|\275\373\332\300\275\313\335\036\276[P\334\274\257\200\247\274.\334~<cT\203\274\260\033\243\275\345e\016\2754\374\241;\000n\"\273\007j0:\266\256\356\274\005\331\031\275`\303\027=}t\353\273Bj,\274\340\303\016\275?e\021=c\321j:\334@\220\274~{o=~\352\306\274<\225\200\275\215\030G\275\301o\035=\n\025F\275-\204\351\274\216v\"=\250\2212=C\375{\274\004p\250=KD;\274X\335\"\276\260\351R=6\267P\276!\357\027<\027\276\217=F\000\r= \255\006>\251\t\214=3\213>=\3747\310\274R\020\316\273\332LX;,W[\275-5\203<)\376\227= Tc=\014IK\275bL\007\273]\033\207\274P-e\274p\341\300\275\327\311\001>\210\017\340\272J\306P\275\226\000\252=\033\243\301<\2642k\275\363\n-\275\034\352\232;y&\220\275BWS=O\010\302\272\256*\217=\262\303I\275\020\221\214=\331\262\362<\247-\371\275c\356\005\276\027T(=\360[@\274P\2758<\310S\247\275\203%B<A\366\\\274\031A\203\274Qp\017\275\236B\277<\351N\357<\264b0=\034\323R;g+}\275&\017\262=\340n&\275\340a\002>Oj\353\273q\214\324\275\364\355\232=\210\035\301\274\320/\222=\320O\377=\345}\003=\306\316\262=XI\251\275\275\315\375\275u\224\303=2*\364<~\353\257\275\254\303G;\353\341\002\276\364K\274\275\030|\231\275K\235\010=\262\217\264\274\320\253V\275\314%\302=?\026\037;{\374\305=~?\300\273B\372\212<,j\261<\317\302e=g\240,=0SC\275\217\324\255\275\202\013\3239\252\254\010=\004\357\314\274\316:!\274\366d\252\275,\345V\275c\005\372\275\223\311\262=|\347\362\273>P\227\274\375\"\363\275\021\344;>j\277\023>\263\247/<ti\333\27567\202=\352V\003=\263?l=jN\311=\316\037\212<\0358;\275*M\225<\250\374\n=\320/\263\274k\210\323:\240\370\250:\264\370\207\275\222a(\275\213\035\000>\321:\236\2758\376\337=\022.|\274G\'\231=g\001\320:\021\021M<\021\'\255=D,W\274;a,=\032\245\352\2749o\241=\037\367\332\274\303\3741=$w\010\275\315\266\316=\266-\231\275\265\275\347=\354x\"\275\332\240\240\274\334\372\334:\260\335`=*\246|\274tX\'\275F\206\270<w1\261\275\021\353f\274\234M\270\272\335\354\262\275\324P\"=\311\215\314\275\222\312\346\274\007d\351\275\203)\333=\262\023\367\273\322\371\250<\335\364J\275\352\374\370\274)\020\227\275\267^!>~\354\216\2751eA=\345\234c\275\'i\261=\226\247\034\2751j\253\275\0235?\275Of\236=a\252\25788M\213=U\254\005\272\362P\206:C\212L=3!\005\2750L\027\275.=\221:\375\322\204\275\255\320C<2\374M<\010\337`=\017\024\277\273\245n@\274\210\223\226\275\273*\326\274\376Sj<mMX\275\224\331!=\222\005\240\274b\201\r=\346\375>=\344!\017\276\201\355\203=u\016\023<\207q\245\275\177\331\220\275\204\323!\272:\253\002>5\306\224\2751\362#\275\327\334\271\275\035\007K\275n\310\007\276\370E?=an\021>\346\273\256\274\024r\026\274t\212\247\275\306a^\274\324E+\2754\'S\275?\306\244<\270\222D\274I\214\252\275\236\235c\275j\0364=\345.;=_^x\275\014ge=2\306[\274\302\013\305\274\330\324\247\275Yu\270<\362r\031\275\201\321\026\275\325\241\323=R[\226=g\263R=\256=\212=\233\302\331\275A\r\032:22\022\275B\252`\275\260V\206\275;\274\326\273Q\017\226\275\337V\312\275\317\206\304<\2115\206<\371~\217<\tC\027>\030F\006=\375\025N\275@qu\274\355A\347<D\033\001\275;\344W\273\370\232M=b\027\351<Q\301\336\2754\205=\274\321\266\253=\200\340\003\274Rm\243<z\366\273;k\260\305\274\234\206\205=\r\036\241\274\255\330;=Ix)<q\344\320;\273\230$=\020\340\260\275|`\322\274\342\257\205\273Y\033\240=0|\242=\311\277\340\273!\235\243\275\304\365\n\275\264\250_=\010\212\014=T\345\313:jl\"\275\253U%\276\255\241\">\253\263\254=\324H\202\275E\325\273<R\223#\274\216\354\n\275\003\321\256\275W\036\220=\177\247\372\272]\265\220\275\263e\206=:\207\000\275~\252N\275U\254\375<\217\373\026\276\302\\7\274\037s\352<\312\375\304\272!B\207\275^\324\312\275M\344\366\274\213bS\274\207\3750=\336Bu\273F\346A=\034N5<\023\216\216=\375o\257=\325\220\021=\337\367#=\t_\252\274\262\360U\275z\310\000\272\323T\277<S\014\037\275\210\355\026\274jc\207\274q\267V>\301\256\256;\260\220\201=\370\330\343<c\007\201=9\315)\275\226\'\275=\231+\036=l\225\305;r8\313;\315\201<\273\022\373\276\275\306\211\005=c\177\270=\262\303\220\274\342\300\364<P\334/\275\275\035\325\275J\"{\274Cd1\275\351n\254=\346\233|\274S\"\t=\346d\276\274\235\227\307\275\371\243\260=\374\200!\275w\366\345;\207BA\274p\305\177\275\327\006\205\274z\206%\275}\253\226\275\367z5\275\375\320[<r!a<.\345\001\275\256\347\235=\316j\250\275w\373|<\036\027\006=\234\346\245;\356\216\022\275\031\305\207\273\340\002x\275\237.I\273\373\244\260\274\214\'>\275\361\272\306\275\255@\220\275\204\034\030\275\206\036%=A\025\001;M\'\213<\227+\206=\032\036\275\274\206\014\003<~\372G\274\237N\245;\027\341\223\275\234W\340<s\006\337;\224\\\352=\334\276[=\276\263\010\274\365\356\220\274\034vg\271\0140\007\276\351\311c\274\363U\221<\261n~\274\376b\313;I\005\037=\364\242|\275l:\021\275X\214\221\274xt\363\273Q\323\244=\3747\000>\224\277w=HI\350=\272v\027>\354|\323;\t\317\032=)\353\220=\234\315X\274\177@\302<\227\266-\275e\270\325=ZP\037\275-\253\202=\374Mx=N\332\334<+\344\266<\027Oh\274\207}\272\274v_\221\275\200\236\257=t\010V=\010!R=\302}\324\274${=\274\033\332\213:\337z\221=\013\334X=Db\243\275\3505\201<\'O/\274sv\013=\032\330n\275\'\253\213=\201\227\265=j\001~=\267\260\212<=\006O\275\224g\256\275\362&\031=g\003\223=\275n\227=\001\010\274\275\322\255\341\274\332\221,=*?\221=\037y\255=\302V\232\275\"\355\323<p(\367\274,\222\253=3Zy=\267\226\034>\362\365\300:\305!\227=y&\254\274MK\236\274#\"\243\273\337M\302=\002Q\341\274B\205\034<\310\311[<\336\000\373=\020cx\275C\366\237<+\352\357<\217\267\213:\0232%\275\n\003(>\ts\016>\200.?=y~\250=\r\342\305\274\232_\003\276\203\264\226\273U\255\370<\256_7<\364g\335=\tm\316=\216\374c=6L\374<\032\241\273\275\212\234\235=gv\324<\210\261i=\t\003u<\016A5=\357\245\241\274\351\312\227\2755\n\035\276\346\202\022\275\275\005W=\365\032\014>hE0=\237\215_<\365J`=\265am\274g\360n\274R\027Q\275\020\220\271\275\207\036\374;J\1775;\265<T<\311N\327<\334|\030=\204\236\364\274\370\316\305=\374\364A\275\373\251\316\275P\226\207;\014\214y<\347\030\276=\257%\020=\354.\002\274!\006\251\274:\026h=\207:\021\275\252\256\216\275\344*\265\275O\005\220<\244|\345\274H\"3>\371l\257\275L\353\\=\325\016]\274\\\314\216\275(~9\275\303Z\024=\262\211~=\265\016`\275\037\301v\275\031G\360\274\376\000\340\275\030\212\002=\016.\257\273\r\234\342\274\205l-=\377\372\204=(\331?\275\022\236\271;\377\201\030<h>\267\275\212\253\n>,HY=\307\272:=\303\273\205\275\\g\364\274\354\356\201=\304&\032=\322r\363<\255\350\005;;\376\363=S\352\312\275\262\363{<\026\355\273<j\263\206\274\265v\001\274\302\246\322=Gt\001\276\306\311\254<\"\0033=:a\303\275\260\177$\275\255\006\322;H\r\010=\2224\240\275\314[\237=\231\264\227\275\272\342\253\275G>\266\275\252\253;=\353\357|=\035\352t\275\226\345\231\275\233O\201\2755\037&>\001O\005=\345\030\243\273\265\367\222\275d\231\203=.\010\305=\n\224\206=\026\256\273=V`?\274\267\2370;\322\300\364\274\300\t\006=*\037\r\274\352\333\023\275\357\212X\274\001\360\315<\014\272q=@e\246=\325\005j<\031\275\303=\332\264\207\274~U\010=\270\265\030\276R\360\325\273\254\034^\275\311\026!=\2107s\275\033\263 =m\026\207\275\353\204\003>a\244j=y[\345\274\226?\207=D\024\037=\3727\331\274\242\260\036\275\341\251\334\274\220iC\275MF\033=\250?T\273{\205[\274\320\347]=\036Q\026\273\206\313(=\035^X\275\\\326\360\274\264p\031\275\350\323/\275\007:\255\275\215\236\261\275\005\207F\275\347!\251=\306\310\226=\305\223%=\000&\300\275\310\364B<\275\355\202\274\317\330\354<\365Z\005=0\216\274\274\244\021\243=\014v\336=Ma\272=\232\346\342<7\302@=\255\326\311\275v\356\341;^\352\202\275Q\306j=\336\265\367=\310\002\254=\337b]\275g\343A\276\303U\301\2757\357\304;\330\212\341\274\004\261\022=M\213\231;1\3741\275d\177 \2754n\247<n9N\2750;\037=\306\225\352\27472\210<\276\361g\275\273\334\317=?\327\256\274\215x\205<\026\001K<\256\377\003\276\024\202\311\274<\314d<\271\210\226=\206\211\356=h\253\327\274hx\243=\3020h<\2766\220;\006\200\337=&\206E<\317\250\321=\326\223b=\326\"\222<S\303g\275\033\201\271<\205\307-=\270\331\037<\rA\252=\275\241\264<\001\266\223\275\364\262\036<\346;h\275\253\235\215\274\306\256\030<l\270\372\275\301u\262=\010\265Q=\037\316i=\'\3701>-\005\211\275\241!%=um\222\275\335\255\017>T\362\246<\276p\307;E\330#\274D\234\367\273eE\277\275NL\253=\314\001\267\275{\255\234=c\266\000=\342\272\303\275nw)\274Go\205\275dG\007=\031y`\273A5\216<\207\022\217\274\335\211\361<\263Ta=\246\'\315\275{\364F<Z\021\253\275G\364\252<\242H\210=_\360\232=R/\231\274\223gY=x\033\222<\006+\274<\214l\r\275\010\'\255=\303\367\277:7\243\311=K\276\250<g#G=\264\333\000\275\241&J<\006\\\306\275,K\216</rH\275\332\275%\275\240\006$=\315~\266\274n\337|\274M\370\207\2747\314\\<s/\270=\340|\200<\2069\243\275c\n\"=0\331\274\275\374R\004=\201\261Q<\313|\t\275aS\362<\333dg=b!\341\275\267\242\250\275\205\037Q=\211\304\374\275\371\231\227\272\320\256N:\032\251Z=\375\337\312<\205\322\306\275w$\215\275\266i\224\275.SK=\345\213\233\274\340\231\246=\027\325\221\274\033\370\236=ddK=\237\253g=\204\242a\275B\020\026\276$K\372<\337v\205\275(N\025<\342\002\347<~\033\276=\211&\314\274\244\361\224\274\257\203\020<\230/\226\275\317=\366\275\202y<=\300\"\037>v\317\010=\235\244\342\275\323\240Q= <\213=)\237\022=\030\205K<\253T\335\273\305\226\224\275\3379\213=\265\233\266\2759\303\205\275N\210\335\274\001\335\317<\341,E\275\274\364\313<\202G\250<(\377\214\275S\'\266<\203)\272\275\200\233\357;K\243$\275T\327\007=\346\301j\275N\372\264=+%\303=q\264\022\276q\303\021\2754+\317=K\\\202=\271\031\232=\222\350\247<\013\373~\275\236\316\264=\345\306]<Z\372\002\274\260\310\324\273\364\334\375<\0259b\275\315G\t\275q\033}=S\"\367\275\315\025\373\274\210,\200=r\"\353<p\261\255\274\216U\217=\032\344\300=\224&\035<%\023\244<\376\t\257<d\001%\275t\235\037\274\334\224\210<4\206%>^\2734\275\026\017\277=S\270\216:\261\017\237\275\364|0=\220\206\014=F\246.\274\361\237b=H\366\330\274\246\004\221\275\277\232\362\273l2\223\274I\226P\275g\335\326<\231\214D=\271\022\202=/\355\305\273\\\224\352<D\260\235\275\260Pg=\032\323k=\231\256\261=\265\"x\275c\376[<O\345\013=ha\253;\256\361F\275\275\236\377=\021$\275\275\376\t*\274!\346\207\275/\252\252=\222\3076=2\242\267\2741,\325<f\326!=c\212\302<`\273\240=\003\032\025\275\214_2=4-Y\275\323\r\277\274\302\030\336<\032\275\034\274Co\006\274\020\017\"=\371\345\361<VS\t=&\343q\274\351\262\352\274\035\016\202\275\rS{\275?\353\010\275t\267\006>\020j\357\274\335\334t\274\005[\215=\003s\237<H\230a\276\320\004\303\275 \343\315\275\0260\010=\2325\247\272\341\225\241<\000\367\021=\373h\n>\355\245\025\276\353\036\177\275\224\227a\275F\246\016=\250\346\200<RR\016=\2710\236=D\272\222<\020\000\261\275\220}7=gi\273<\373u\243\274\316\006{;g\222\341\273\207\025\234\275Ug\326;]\353c=/\247o=\016\345\220<>4\206=Q\235\017=\253\243\"\275\377$\220\275\2020\305<\010\205H=\tN\256\274\030~R\2758\361\276\274\312E\301=\\\343\277\275\tP\322<J\325\331<9\321R\275\372gi\275\013\025*\2759\000\024\276!3\200\275@\352\265=\3446\201<h6\373\274\037-\254\275\017\021\245\275\023\211\262=*5$;_ \006\274\212\227\216=\277y\021\271\254;\224=\243\343\236\273\327\317\316=\035B\r=5\3546=0\t\032\275\355F0\275v)\213\274\325\007\253\275\332\215&\275s\343\214=\317\234V=\353\232\323=?\010\006<D2w\275\306~\355\275\345\373\264\275K\206S\275V\225\375<\034\022A\272\"\000\275\274%\036|\274\214\235\237\275\357y\277;\375\201\214=)\333\003\275Hl\262<\032\347\331<+\335\253\275\234P\240\275Q\300\360\275\261\350\305=\344g\203=\334\"\311\274\220\243\003=4\216\267\275\036\331\214\275\nZ\362<-\322\002\274\t\330\205=!)\347<\266\300\374<7\202\242\275i\266\013<\221\021\271\274\237Z\232=\303\251\266=\013\216R<\227\230\177<\027\377\205\274D\263\277=\346\363\322;=\0200=9\004Q=3)R\275\27572\2759\373\000\275\021L\372\273\r\004\016\276\306\322\000<7(\307\275G\373\210=\242At\274\335\306D\275\333k\027=\022\301\232\274\351Z\341<i\366M\275\217q\245\275\234\377\336\274(\235\205=\"\260\311=R\234\213\275\023\222\313=\000xL=\214\177\222\275\004\342\230\275\240KS=\377\270\271\275J\363\027\275\226M\211<~\324\254\275by\204\275\3459\023=.\275\010\271\326oD\274\340\357\006=\200\032%\274\352\316\263=\372X\320\275N\356\316=\276V\005\275\237\245\210\275\304\364\214=\3214\004\275\343\024N\274\270J\301<\035\274\255\273O8\352<\301q\335\274\031\0208<;\345\036\2747\031\360\274<\320\264;\347=a=\373\262o\275\026\177\020\275\272\323\031\275\277\274\205\2751\352\220\274\272\357\355\275\274{\205\275B\312i\275\000\270\000=\241n\374;\223o1=\373\364.=\037\253\351=^\227\364\274\353?\363\275\346\211\221=\364\216\342\275t*\354<RK\212\272P\323o<\364\033\352\275\234\206\357\275j]\013\276N\007f=|\352\351=b_\365\274rv\260=\332\356\343<\337\223\311=0 \274\274[\314\237\275\276\217\264;\363!f=\026\264\311=P\036\234=\242R\276\274$b\224=\245\363\373<\260\360A<|\027\242\275x\377J\276\306\227P=\3177\000=\357\247\023=\313\305\227=\314\3470\275_\303Q=\037\211\354<\035\035\326\274r\331\265\271\334\340\\\275oK_\275\330\246V<n9\226<X[~\275\035\266I=\357p\204=\220\372\220\275\332\002\246=\246E\267:i\361\">\035\227\222<W\354\304<\226/Q<\243\246#<\241\255\316\275\025^\304<\001\030\">\306\246x=1\366\306==\003N<>\237S=\343F\033\275\362P\305\274\243\314\275=Yl?\275M\355\356\274\361\275\331=\300c`;0\320 \273\212\013\223=E\020P=\241S\242=xc\201\272\013\235Q\274$Y\270=\021\177\201\275\201\262\036\275\211\267\030\2753\002\270;[\377\350\275%:3\275\324\365\251<>Y\211\275\263\tJ\271{\337}=c\321\344<\274\031\330\275\244#\271\275kE\212<\310\310\251\275\t\035\215\274P\236T\275\340\004\300\275>J\242\274G8\027=\232\336z=\236=\350\275\326\233\267<`\332\302=\031)\221<W6\246\275\007\211\002=\203\201|\275\347\243#=F\257`=\020\206\031=\331(2\275n~\224\274\241\021z=T,\253;^V\020\274\004\230\277=\377\307a=F\003\200=@*t=\001\325N\275\331\342\363<\260\340\r\276B\250\313\274\300\200\267\274\177\003e\275i\205\'\275/\233`\275\236\376\350<{\314\013\272\257\247y\275(\300@=\360\324A=7\335!\276E$\216=V)\302\274i\351m\274F3\311\275p^\303\275\237\353;\2747\365\'\274\315\337\351<\323\226\177=G1\273< \350+\275w\243\372\274Z~9<K\275(=\337\360\347\274L\214\224\275\225\217K\275(M\205\275N\241<\275\306w\232\274\322\2734=a\200\021=\333\210\262=\251YO\275\203\207\370\272\334\351\200=o:\007>Q\374\260\274\232\377\365\274\237\217m=\237\274\013<\245\024\304=\007R^=m\264#\276\270r5=\006\364\235\275 \320=>\"\277`\275U\353Z\275s\001\243=\356\306,=\315x&=`:\317\274;b\250=\201\256\331=\302x+\272\372V\334=\204\304.\275n\302\034<\3776\276=X\240\304=\341\013\212=m\316J\275\3335\037\272\364\202\212<\301H\256\273\353x\305=\266\313\300<N\246\376\274\275\362B\275\261\256\251=\263D\215=\254o\024;F.A\275\237\250\313\275/\370\010\275\030h\267\273\274\207\250\274\312\356\207\275\036fh\275\225\252\014\276C\320\005\276E\334C=\252\324\251;\321:\024\2759\227\026\275D\037y<6\307S\275h\333\022<\014\326\307\273\215\310\022\274Tl\223\274\3637\220=\201\0240=!\0013\275=\270+\2754$\006=\243\323\311=3\036D\275\035\366\276\2742\313\253<s\323\205=*g\255<\240ME\275\274\020\251;4C\350\275\253\260R\275\344\340\377=BZ\321=\006\237P\275=\036[\275\246\240\250<\377\300\246\275U}\305\274\301\005\327<\317\334(=s\225\214<\265\254\270=\\E\232=\010J\321\274\223\374\243\275\361\025><\333/\371<\246\264\210\2759O\353\275\220\334\250\272\325\310X=s\206\203\274y,\231<\005a\014\275J\374\274<\232\315\316\275\030gl=\301l\204\275\242&\001\274p\266\224\275o\215\303\275];\234\275\320\230\000\275+\303\264<\032K\227\274QT;\2753\367\224=\206\330.\275|\237\245\275_=\005>9\214\266<\302\006\263=\237 c<F*d\274\337\202?\275\nq\322=->\210\274/3\n\275\215E\023=\345\323\025\2731qJ\275\251\341\253<\313\021\202\273\361D\352;E\362\266=\220XR\275\347\236\267\272\2738 <\203\304r=\\iX<\340\032e<zdZ\275\202[\205=2+\036<L\233\036\271\205|\020=2*\262\275\313S\234=)P\005=\252\346\323\274a\356e=\035\206\257\274S\352:\276\250\237\267\275\247\010\305<a\335\324=\210\202b\275\025\002\243\274\334\232\302=\330M\267;0\205\325\27559b=\305\231\233\2757\313\202=\360w}\271\306\331\'=:^\264=|>Z\273@X\301\275\2742_=NWW\275\201\023;=\213\225\235\274~\207\234\275m2\235<\026\347\335=\330\246z\274kR\035\276\364\211]\275\211\350\201\275\025.\001=\322\016\010\275\005\263\220\274I\315\214\275\322\316V>\216N^<xw[\275\307i\026\275\312\350*\275\203<\311;&\"\323<\003\274\337\275\226eb=SL\001\275?u\321<KZn=\034\312\356\275\353\322\025=P\263H\275\342x\017\2762\232\270\273\223\2234<\354]o\275a&\366\275>\201\212=\242\330*\275\303\243o=\216\274\016=\277o\247\274o\026\215\275dI\022=\344\231\t\273\2126\267\275L\026\247\275Ijb\275\215\n\2209\205\237\230=\312K\207\274\377\334\200\275)Rb=\273 |\274\301|I=\007\304\246:\313\305\020=\332\020Q=\303A\206\274\277W%\275\035\265Q\274\275i\360<\\\244\322\274\032J\177\275\241\277\256=\004\273\375=\303\246\217<$\257\232=d>\n\276\037\326\232\275N\010\2359\341!\265<j}i\274\230\\\030=\244\224\013=X\236\274<\231M\'\275\351#y=\221\246`\275\025\3373\276\270%(=$\324\036=\304\232_\275[\231f=\213\244(\275\211\204\000\275\204\203V=)/\313\274X\367\000>\306\311\311\275\367\375\351<\224l[=,\014z\275c\340C=q;(=\014\272)\274\256\027\034\275\276UI\274(\371\377\272\345\221?\275\274\264d=\032\210\273\274\277\037\235\274\2632\276=\177\005\310=3\303\252\275\322\315\007\275\022\364\001<:Q\333\275yq\204\275G>O\275\372\360\n\275\321s\r>\256\254\374<wm\023;\026\313T\274\025^B\275D\377\311=\027L\231\274\236\340)\273\360Q\024=.!\265<r\275\000\275\277l\003=Pt\227=0!\241=Z\221\321=\243\000\224=tF\220\274m\2234;\274\265`<\232\237|<\203H\313;\256}Y=\227mM\275\252\202\333\274,\006\361=\376\r\301\275\226\356#\275\243\347`\274y1\306\274>\027\214<\237\330\022\276\235\306\361\274\202Lv=N\265 \275\244\263\370\275\204\213\024\274\310\253\223\275\025[\001=\342\251[\274\223y\256=\230H\355<?}\323=\256wM\275\235\003\250\275R\375*\276\372\2433=\334\3465\2755\023\352<=l\025<0\n\355<\232\346p=n\254\252\275\276\025\204\275\262\371,\275*_\255\275\342\017\227=\323\r\200=1{\010\276\304%\264\274\256u0=p\303\212<F\322k\275\200#X=\325\244Q\273?\251\303\274\177P\241\275rr\374<\200\025W=\332\301 =\307\317\026>p\010\344\274g\027\266\274\252\374\331\274\301\223\243=@\334\344=\034R\032\274\321\010\263\275\363\216\250\275Z\246\276\274\006b\363\275\"i\033\275\325\307\013\275 \312\023\2756/h\275\247B\367\274\232r\211=\271\240\'=\350\3454\275\347\016\026=\205\214\022=cB\034=\322\204\224\275i\r\t\275\322\'$\275`\307\004:\271\025\313\274y\230#\275\177M\n\2759\355\313=\033;\221\275\027V\016\276\250\241\205\274u(\256<L`C<\010;\204;_5T=\314\342w<\205\226\374=#\221\020=\273:\234\275O\tt<\350\230\336\275\232\233]\274\331\022\376<\245Q\327\274W\'\330;\212\276\211=y\257\246;\300\220\247=\335[\214<h\364\256\274\022\213u<T\346\342<\277\274&=KOL\274\207\334D=\215kU=\035\335\303\275\334\333\010=dOx=\361\346\204<YA\272\274\005\005\205\275\324\226\311<\3625\264=m\266\270\275\267s\302\274E\032\250\275\217\276}\2745\030\234\275zA\223\2759\372\251=\0055\312\274H\200E\275q>\330<\334~\333\275\325r\344\274\367\031\227=\027O><ZG\231\275\304U-\275!\372j\275!\271\226\275\177`\223\274\253\342#=\264D\376=\225\205\n>\215\255\035=\224\ri\273H\203\240=v\250\241\275\275\210\253\274Tu\226\270o\235o\275\264X\257\275Q\365\203=wDW\275C\341\333= \336\212=c\022P\2749E\245\275][\235\273\245D\'\275\214\261\207;\275\303\320\275do\233\275r\177\n\275\027\020\256=;\223\032\276\210\215\373=\021\344\022>\207\023\327\274\370 \362=\273^d\275{r\273<\276\210\r\275L\010\364=`\210v\274z\202o=\025fw<\251\343\243<\306\2465=\230E~\275VcF=\022\243\344<\335\255K\275\3364\206\275\340\352\000\275\351\024\216<\331\331[=\271\2758=\021\004\002\275\326n\007<\010\272\220\271zS\341\273\263\321\r\274\355\345\261\275\271\327\334\275\264t]\275Y\007Z=\367\342\031\275\306i ;ou\021\276kA\300\273\321l\264\275P{V\275u(\n\275h\'\331;Y\300\210\275\242\211\247\275\250\327\225;\016 $=\274Q5\275\204\316\206\274\013]\341\275Uz\202\275\322\340\235\274\301z\177\275\342\034\305=\253\263\002=\245\322\207=}\215\022\274\277\203i=\2146\257\275\307%\333<\305\036f\275V\225\316=qQ\250<\214\343p<\221\253_\275\232#\220=Zb\226=\212\247#\274[{\370\275\314\273\003\275r\302\245=a\347\n\275\270\017\316\274\225Q\300\274\376j\201=I\324\205=w\252\003\276B\036R\275Hck=\212\376)9\347W\035<\367c\";\357\336\007\275\242D\245<~7\307={q\006\276S\306p=\276u1=\033\320\256=:G\203<\260\214\356<\212\337V<L\246\r=\305`==\252\276\353\274\022\371+\275\001\3671=\3253E<m`Y\275T\315\033=\255\336.=\245\225\332\274Sx/\274\200F\002\275\023]\335<t\263\230\275\323\331\"\275\353 }<j\357\230=\216c\333=\200\177\256<\361|\302<\r\323\215;\314Gr=\227I\261=\212\210\345\274\373\351_<\nJ\235=\373\256x=Mi\3119>\000@=\260\204\030=\373Mu<jT\036\276\324\300\236\274\247\302:\275\233\213\036\275Us\222\275\367q\327\275\\:+=\255e/=\350XT\274X?r=\235]\016=\341\253\312=\216\004e< \256\030\275L\030x\275\245em\272\226,0=\300\345\216=8\211\343\275;f\003\275|\276m\275\346\214G=?\377+\275W\001M=&4\345\2748!\027\2747rw<\255\236\000=\231\030m\275\366\202\013=\233i\241<y\030\220;>\210\213\274\234\t\235=-\234\223\274\207[#\274iT\245\275\277\033^\275\000\334|<\260\312\023<|\201R\273@\200\332;\261\334\335=\266fK>\260w\352=\245\3125=;\221:\275P\3525=\311\253P>T\353y\275\007\005\346\273N\252j;\245\272W=\203\031)=\224\217P<t\037\206\274T\3040\275\301\373T\274\223\277<<\306\315\210\275@\346\223=\231\227\007>\035\261\277\275<Fg\275\021[\271\275\236\226\212<a@(\273\354mP\275\256\034I\274\266\014\263\274v\321G<\360\365\311\273\230\377T\275A\257\331\275\357\305\356=\206\347\221=\034g\200\275c\201F\275\036\324\230=\326/\274\274\260h!=\003\030X\275\307\014\307\275\330)\034\274|\030\224<o\260\343\275\334Z\354\274\235\355$\274\355\037\231\275\347n\237\275\310zv\275\315\267$\275\'\034\201\275.\022\314=\217\204\200\274\221\350y\274OA\006\275wZ\363\275\r\266\350\273\213B\335\274>8$=I!\357<\227<\374\275+\224g\275\346\320o=7\373\n\275\372Y\231;\270\261Q=\321\270\321\270$\n?<\2045\244\275XAe\273\305\315\302\275$\373i\273\206\345\317\274\306\351\302<5\271\003\276\026>\016\275\202(Z\274\245\271\244<f\233\263\275\235=\260\274^\220\017<_9Y<\376\n\225\275f\357\325\275\303\374\203\275lT\026=\361\035\275\275@:\277\275P\333\343<\014C\332\274\321Dd\273|\366\264\272]y\274<\371>\325\275F}\245=L\\Z\2742\200\216\274\242\331j\275s\305\277<\222=U\275\260cU\273\\~(\273\023\312\302<\267 &\275\243U\267=#v\357=\335H\307<2\267\341<\226k\316\275\337\205\253\274\005Fw;\237\350\244<m\324\254\273h\020B\275I\026,=t\005\035\275]F\376\274\354\310\253\274\002>\203\274D\335?\274r_H\275\350\371\364<\210\224S=\347T<\275\233\314\002\275\225\322\366\274\325\276|=\203\006f\275\207)8\274\242\331v\275\301\305\245\275\320#s=X\033\305\274\273\260\036\275x\211\020\276#R\315\275\372(\234<\217`\200\274\317\361\251\275\371\200\334=\242\004.=z\260\030\275\274\226\017\275\245\305==\'\316\r>\346\267A\275\356\277\240\274p\234\254\274\221\207\276\275[\306I<\337\322\371\274\243fN\275\356\213\357\275k\201y<\241\306\r<\263w\226=\300\220A\275\007\024\021=\321q\220\275\014\331\236\275m\322\273\274s\326\337<\355,\000>|\037<\275\325\265\240=\266E\300\274\363\014\014>\342\0130<\267\273Q=|\177\312\275\377:-\275\357\234c\275\216\332\241=\213\234*<$\025\306\274N\3359<0\037->\305\364\214\273\261\342\322\2736\353&=\315\250\021\275Y-\200\275\265\343\336\275\244\021\216</\220\245\274;J\204\275\236\200e=d\334\n\275\343g\307<\374\211\253\275;\333\227=|\014\265\2759\261\210=\376\273\247\275\343I}:V\300\357\274\320s\343<\363^\245=\350\363\220\274\242\230z\274\365\014/=UZ\242=\376\354)=\277s\267\275\322\340W;\335\027\032>G~l\272\254\215b\274\264\276n<\240\215(\274\250\254\317\275\315\262m=\210\344\377<\005\021\253\274\350\3714\274\222\302\207=(\276D=\325\343\370\274\034\005\355=\177\236\252=\r\036\226\275\3401\261\275U<\024\2757(W=\324\327\316;\265\t\271\274\210\017\304<\032\213\257<\311\375\234=j\321\260\275\253\271\210\275a\373}=\031\\8\275\350\261/=bG\230\274\353\370\026>\225IG\275\310\035\374\275\356u\336\274.GL=m\327\316\274Cf\211=\372\010\274<\340\002c\275\250\217[\275\357\010\345=c\227\376\275\017\2764=U\344J\275>_{=@E\303\274\233\021]\275^}y=\302\273\255\273\024:\016<\370\241\240\275}_\207;:\207(\275\230\270&\275\360[Q\275\206\222\341\274i\243\360<\332a\301=<\214|<5\343\244<\324\273\213=\n\254\223\275X\336\205=V\231\336\272)\371;\276\257\256\307=\377\346\306=\312\2022=Q\007n=\356K$=\034\\\232<pn\306=a\265!=aI\246=\236\234\371;\001 \343\274\262\247#\276.=\023>\010\005\262=\366Pb\275\262W\256<]\366W\274fg\304<\003\252\245=D\342!\275\220\246s\274q\014\217\272\260\316\023=%\376/\276\374\221\204\273\336F\205\275\243\246~=\017FL=\273\221\003:5E\217\274I\237{\274\254\3556\275\336X\'=^e{\274\307\216\215\272\226=.\276\356G\260\275\352T\336\274\362\241\207\274ri*<\025\251Q\274\273\2526\275\003/\211\275\002T\231<\362z\263\273M\017\221\274\377O`\275\361\253U<\037a\370<\036\250$=6\027\006\275\264|\275\275<\233\356=.\374\243:k\207\023\273W\025\251\274\317\247\264<\020\274\271\275\217\317y=\257\206[=\274\276,\274;<2\275\207i\t=\036\177/=\347\030<\275/\355\357=\004\221%\276s\014\353<\255\257\345=1\032\274=\277%(;\243\275`<e\004\220\274D\3717\275^#\307<\304\306\025>\3471?\275\3426\357\274\353\321\231\275\304\323v\275\327\345\262=\305wn<n\235L\275<R\\<\322u&=z\024h\275\374t^\274C\013\233\274m\231k\275\332x\231\275\250\314\237:\332:\001=\3036\024=i\225F\275S\343\240<K\035\203=,*\237;\370\217\023\2766e\262\275A\271\231=o\366\355<\000t\031=\325]`=\002\250\333\273Y\277O\275\274/\206=s\275\250=.\306\260\274E^\202=(\020\361;\301\374\243=:U\227\272\327um<\270\274\020\274:\177\260\274NE\034\276\270\313\305\274\346\376\270=\r\300\005\276\3309\r=\214\324\251\274\202\265\236\274\257*\277\274\373\211\"=\366%\254<_\266n=\021\330\345=\036\242\034=\232~\030<k\024\016\275\177(\026;,sh=\203g\263\275\232aF<\203\036\206\275\216\rl=\345\354\241=\346\242\201\275\006\t\210=\003\034,\275\327\210R=\374\343\367=\356\3140\275\277E\224=\005\253\025\276\314\366\212<\300\203\327\275\370\336\233\275F\307T\275\215\026\240<e\216\331\274\300\264\213\275\345&\216<\2744\306\275\355c\265=\316\302\024<HK]\275\335\020\353\275\276\000\201\274\331;)=m\353Y=s\376\'=\324&\231\275\024;C=Au\216\274\353\335\355;\215\007\312<\236\304\325\274T~\353\274\001\335\255\274\260\210H>\006\225;=\331\275\272<\352LJ<c\262\007\276\212\262G\275\226|\201<\327\3752<\347\377Z;Sg\323\274\374\374(=\254\254\211=\3178\231=\332\037\212\274.O\033\275\347\t\020\275\033\305N=\307\317\251\274\247\271c\273\324\035\247\275n\326\203\275\272~\342\274\363\357\326;5pA=\376\352t=\265\255\216\275\351\276\005=0~\235\275\201x\265\275mMc=\230\226\266\275\224:\327\275\233\351$=\200\277\027\275\214\257\313\274\352\314\004\276\317\231\024\276\206xJ\275 \331u=\017\217\304=\213\265\272=\202\244\255<\222\273\030<\021UF<\376f\264<@\270\211\275\027Jb=my\263\274\272\231\246\275\030\314\236<X\247\014=\217\345\202\273\325\221\255<[\352\350=\243\340\366<\213\301<\275\251\260!\275\316*\344\275\227\226\271<\317\205\271\275?\315\203\275B\377\354=\\\312);a\r*\274\377Y\261\273\036\245h\274\330\223\276\274\310\302\263=\345X\364\274\230#\010\275l)2=\371oz=\321{\022\276\313\272e=\2342\321;T\035\351=\244\270\210=\034\201\202\274\303S\253\27550\243=B\177\213\274\222 F\275\266\232\206=V]\205\275\241Hm\275r;\330\274\262\261\212=\216\001\225\272[M\237\275\033\363\002\275\256\366\273=\336e\027\274\036H\204:\232\027;\275\207\242\262=\213\375\317\271i\336w\275\247\345z=O\017\232\275N\213\360\275\260\214\373<\326\3510\275\213*\212=\277\217\340<\204\234\206=\360\003\311\275\251\"\026=\002\352<\274\354Z\016\275\357Q\250\275\366X\337\274\341\350\327\274\355\'R\275\244w7\275\376+\335\275>\316\367\274\332\211Y<M\007\221\274\314\035\336\27429f\275i\204o\274\227\025\200\275\225\251w=X\334\253\275\375\330&\274\214d\025>\236&!<\\(\363<\353\216\275<<\275 \275\347\341\204\275\376\251C=\304\255p\275a\371\212\275H\313\036=\273\356\304\273BI\255\275\372\013\010=\031J\207=\224\216\376\274\310I+=\017\021\003\275Z\365\n\276\270;3>q$N\275\220\344;<\330\367\032\275\231\034\032\275\334\0217=|\233\242\275\235F\231<)\\\355\275\3110\231\275<\017\020=\330\0276=\211\246\206=(E\242\275\250\201\250\275q\342\216\2752V]\275R\375\301=\010\323\210\273\200I\217\274a\272u=@N\227\274K\245\303=\375q\027;\003\367-\274=\274s<\354d!\274\237\253\272\2756\276\371\274#\370{=\233J\020\2751x\224\274Ej4<ryA\275,]\252\275\241\234\265\275+M\261\274\243\252\227\274N4\223\274_\014\026\276H\005\326\274o_\'=Jb\275\2745ag<\336*_\273:\343\266\275\001\020\255=\370,\214\275\354Y#\276\332H\302<xP\034<\265\224A\275\266\027<=;\277\007>\212x\302\275X\177\202\275\345\307\202\273\305\246\"\275\013!Y:\037\031\222;\350M\030>\247L\206;2\r\265<\025\210\344\273\226\264\021\275x\355\001=G\264\231\275\nuu=g\317\223\275h\274|\274\326uC=Y\2438\275`@\000\2751\341\243\275J5\323\274\357F\235\274\367\r\273=M\331\014\274\263K\326\270\357\325\315=\t\317\223\274\247 \276=\036|\246\275\347\325\252;|\266v;\034+]\275\333\021a=\360!\254<\255\355\206<\036\253\212\275\325\304\213\274E\236\225\275|\035\t=;\257\002\275\202\323\276=\237\375\326\275\300G\246\275\317\236\340;L\204\203\2738\177\226=\201\021\356\274=\234\364;\271e\305\274\305\351\312\275\241\203\353\274\347a\336<\250\023\000>$\223U\274\214L\357\274\322\335v<\204<t=\221e\344=\264\217\271\275\270\031#\273\2362,\275Ex\270\275s\350\222\274\330%\362=\276)N=\344\366\"=\335\001\203=j\333\\\273\\\360\226\274\261\264\217\274k\265\245<2s\253\274\336\r\363\274\025\217\357:p|9=\334Y\t\276\304\301\212=^\260\"<\027BK\2741j4=\376\004\330\275\236U\303;\317<D=I\035\257<i>\001=\331|i\275\343\354\004\274A\345(\275I\267\225\275C\266F=\034\323\036>\247\256\305\275\002\206\271\275\010\325\345\275\271\316A\275~\204\306;\337\222\320\275m\342\035\275\202a\000>\251\276\301<i\231\t=\374\316\017\275\032\371\320\274\032\236\032\275&5f=\004\347\333\275x\266\214\275m\270\312\274\022\230p:0~\263\2751M\303;-\223\342=\242\251\230=N\031\030<\242\262P=\336\256\364\273\374\017L=mJ[\275\224\354\2306\313dQ<I\237\005=\010V\356<\017\331\227=,\351\213\275$\351c=\365\304\331\2759t\320\274\373\024#\274\005:\344\274|*\223\274\274{W\275\362\326\032\275\261\322%=3\257L\274\013\272j=DF\271=0\001\001\275n\231\306<=E\212=\315\t\210=xM\205\274\310\230G\274\007N\n>\235\325\024\274/Cq\275\001\305\t=\027cK\275T\216\345=\226\023\027=\303+\310<\342O\213\275Ge\244=_\235<\274\207q\355=d.\221<4\242\256\275\263uC\275\244a\301=\003\255\320=\241\367R=\017\321`\275\037\246~=#\255K=K\261]\275rk\216=,\343\373\273\221\264\343=\037\364\222<K\225U\274\316\200s\275z\210\334=\312\013$\274\233\316N\274\330g\014\275\206\363g;\333\221E=kJ\213\275\212OO<\331\307\002\276\234\377\217=\234#\215\275\0015]=\'T\245=\005\005\367\275\375\005\020;D\360\310=q\302#\274\260oe\275\007G\256\274H\356z=\345Su\275"
      }
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/Assign"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "lstm_1/recurrent_kernel/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/recurrent_kernel/read"
  op: "Identity"
  input: "lstm_1/recurrent_kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
}
node {
  name: "lstm_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lstm_1/bias/Assign"
  op: "Assign"
  input: "lstm_1/bias"
  input: "lstm_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/bias/read"
  op: "Identity"
  input: "lstm_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
}
node {
  name: "lstm_1/Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "lstm_1/Assign"
  op: "Assign"
  input: "lstm_1/bias"
  input: "lstm_1/Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lstm_1/init"
  op: "NoOp"
  input: "^lstm_1/kernel/Assign"
  input: "^lstm_1/recurrent_kernel/Assign"
  input: "^lstm_1/bias/Assign"
}
node {
  name: "lstm_1/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice/stack"
  input: "lstm_1/strided_slice/stack_1"
  input: "lstm_1/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_1/stack"
  input: "lstm_1/strided_slice_1/stack_1"
  input: "lstm_1/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_2/stack"
  input: "lstm_1/strided_slice_2/stack_1"
  input: "lstm_1/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_1/kernel/read"
  input: "lstm_1/strided_slice_3/stack"
  input: "lstm_1/strided_slice_3/stack_1"
  input: "lstm_1/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_4"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_4/stack"
  input: "lstm_1/strided_slice_4/stack_1"
  input: "lstm_1/strided_slice_4/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_5"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_5/stack"
  input: "lstm_1/strided_slice_5/stack_1"
  input: "lstm_1/strided_slice_5/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_6"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_6/stack"
  input: "lstm_1/strided_slice_6/stack_1"
  input: "lstm_1/strided_slice_6/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_7"
  op: "StridedSlice"
  input: "lstm_1/recurrent_kernel/read"
  input: "lstm_1/strided_slice_7/stack"
  input: "lstm_1/strided_slice_7/stack_1"
  input: "lstm_1/strided_slice_7/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_8"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_8/stack"
  input: "lstm_1/strided_slice_8/stack_1"
  input: "lstm_1/strided_slice_8/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_9"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_9/stack"
  input: "lstm_1/strided_slice_9/stack_1"
  input: "lstm_1/strided_slice_9/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_10"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_10/stack"
  input: "lstm_1/strided_slice_10/stack_1"
  input: "lstm_1/strided_slice_10/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_11"
  op: "StridedSlice"
  input: "lstm_1/bias/read"
  input: "lstm_1/strided_slice_11/stack"
  input: "lstm_1/strided_slice_11/stack_1"
  input: "lstm_1/strided_slice_11/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/zeros_like"
  op: "ZerosLike"
  input: "lstm_1_input"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Sum"
  op: "Sum"
  input: "lstm_1/zeros_like"
  input: "lstm_1/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/ExpandDims/dim"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "lstm_1/ExpandDims"
  op: "ExpandDims"
  input: "lstm_1/Sum"
  input: "lstm_1/ExpandDims/dim"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tdim"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Tile/multiples"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Tile"
  op: "Tile"
  input: "lstm_1/ExpandDims"
  input: "lstm_1/Tile/multiples"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Reshape/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\003\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Reshape"
  op: "Reshape"
  input: "lstm_1_input"
  input: "lstm_1/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/MatMul"
  op: "MatMul"
  input: "lstm_1/Reshape"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/BiasAdd"
  op: "BiasAdd"
  input: "lstm_1/MatMul"
  input: "lstm_1/strided_slice_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\036\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Reshape_1"
  op: "Reshape"
  input: "lstm_1/BiasAdd"
  input: "lstm_1/stack"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Reshape_2/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\003\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Reshape_2"
  op: "Reshape"
  input: "lstm_1_input"
  input: "lstm_1/Reshape_2/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/MatMul_1"
  op: "MatMul"
  input: "lstm_1/Reshape_2"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/BiasAdd_1"
  op: "BiasAdd"
  input: "lstm_1/MatMul_1"
  input: "lstm_1/strided_slice_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\036\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Reshape_3"
  op: "Reshape"
  input: "lstm_1/BiasAdd_1"
  input: "lstm_1/stack_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Reshape_4/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\003\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Reshape_4"
  op: "Reshape"
  input: "lstm_1_input"
  input: "lstm_1/Reshape_4/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/MatMul_2"
  op: "MatMul"
  input: "lstm_1/Reshape_4"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/BiasAdd_2"
  op: "BiasAdd"
  input: "lstm_1/MatMul_2"
  input: "lstm_1/strided_slice_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\036\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Reshape_5"
  op: "Reshape"
  input: "lstm_1/BiasAdd_2"
  input: "lstm_1/stack_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Reshape_6/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\003\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Reshape_6"
  op: "Reshape"
  input: "lstm_1_input"
  input: "lstm_1/Reshape_6/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/MatMul_3"
  op: "MatMul"
  input: "lstm_1/Reshape_6"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/BiasAdd_3"
  op: "BiasAdd"
  input: "lstm_1/MatMul_3"
  input: "lstm_1/strided_slice_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "lstm_1/stack_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\377\377\377\377\036\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/Reshape_7"
  op: "Reshape"
  input: "lstm_1/BiasAdd_3"
  input: "lstm_1/stack_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "lstm_1/concat"
  op: "ConcatV2"
  input: "lstm_1/Reshape_1"
  input: "lstm_1/Reshape_3"
  input: "lstm_1/Reshape_5"
  input: "lstm_1/Reshape_7"
  input: "lstm_1/concat/axis"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/transpose/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/transpose"
  op: "Transpose"
  input: "lstm_1/concat"
  input: "lstm_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/Shape"
  op: "Shape"
  input: "lstm_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_12"
  op: "StridedSlice"
  input: "lstm_1/Shape"
  input: "lstm_1/strided_slice_12/stack"
  input: "lstm_1/strided_slice_12/stack_1"
  input: "lstm_1/strided_slice_12/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_13"
  op: "StridedSlice"
  input: "lstm_1/transpose"
  input: "lstm_1/strided_slice_13/stack"
  input: "lstm_1/strided_slice_13/stack_1"
  input: "lstm_1/strided_slice_13/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/strided_slice_14/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_14/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_14/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_14"
  op: "StridedSlice"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_14/stack"
  input: "lstm_1/strided_slice_14/stack_1"
  input: "lstm_1/strided_slice_14/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_15/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_15/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_15/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_15"
  op: "StridedSlice"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_15/stack"
  input: "lstm_1/strided_slice_15/stack_1"
  input: "lstm_1/strided_slice_15/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_16/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_16/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_16/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_16"
  op: "StridedSlice"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_16/stack"
  input: "lstm_1/strided_slice_16/stack_1"
  input: "lstm_1/strided_slice_16/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/strided_slice_17/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_17/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_17/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/strided_slice_17"
  op: "StridedSlice"
  input: "lstm_1/strided_slice_13"
  input: "lstm_1/strided_slice_17/stack"
  input: "lstm_1/strided_slice_17/stack_1"
  input: "lstm_1/strided_slice_17/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/mul/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/mul"
  op: "Mul"
  input: "lstm_1/Tile"
  input: "lstm_1/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_4"
  op: "MatMul"
  input: "lstm_1/mul"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add"
  op: "Add"
  input: "lstm_1/strided_slice_14"
  input: "lstm_1/MatMul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul_1"
  op: "Mul"
  input: "lstm_1/mul_1/x"
  input: "lstm_1/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_1"
  op: "Add"
  input: "lstm_1/mul_1"
  input: "lstm_1/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_1/add_1"
  input: "lstm_1/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value"
  op: "Maximum"
  input: "lstm_1/clip_by_value/Minimum"
  input: "lstm_1/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_2/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/mul_2"
  op: "Mul"
  input: "lstm_1/Tile"
  input: "lstm_1/mul_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_5"
  op: "MatMul"
  input: "lstm_1/mul_2"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_2"
  op: "Add"
  input: "lstm_1/strided_slice_15"
  input: "lstm_1/MatMul_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul_3"
  op: "Mul"
  input: "lstm_1/mul_3/x"
  input: "lstm_1/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_3"
  op: "Add"
  input: "lstm_1/mul_3"
  input: "lstm_1/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_1/add_3"
  input: "lstm_1/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value_1"
  op: "Maximum"
  input: "lstm_1/clip_by_value_1/Minimum"
  input: "lstm_1/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_4"
  op: "Mul"
  input: "lstm_1/clip_by_value_1"
  input: "lstm_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_5/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/mul_5"
  op: "Mul"
  input: "lstm_1/Tile"
  input: "lstm_1/mul_5/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_6"
  op: "MatMul"
  input: "lstm_1/mul_5"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_4"
  op: "Add"
  input: "lstm_1/strided_slice_16"
  input: "lstm_1/MatMul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Tanh"
  op: "Tanh"
  input: "lstm_1/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_6"
  op: "Mul"
  input: "lstm_1/clip_by_value"
  input: "lstm_1/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_5"
  op: "Add"
  input: "lstm_1/mul_4"
  input: "lstm_1/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/mul_7"
  op: "Mul"
  input: "lstm_1/Tile"
  input: "lstm_1/mul_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/MatMul_7"
  op: "MatMul"
  input: "lstm_1/mul_7"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/add_6"
  op: "Add"
  input: "lstm_1/strided_slice_17"
  input: "lstm_1/MatMul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_8/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/mul_8"
  op: "Mul"
  input: "lstm_1/mul_8/x"
  input: "lstm_1/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/add_7"
  op: "Add"
  input: "lstm_1/mul_8"
  input: "lstm_1/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_1/add_7"
  input: "lstm_1/Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/clip_by_value_2"
  op: "Maximum"
  input: "lstm_1/clip_by_value_2/Minimum"
  input: "lstm_1/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/Tanh_1"
  op: "Tanh"
  input: "lstm_1/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/mul_9"
  op: "Mul"
  input: "lstm_1/clip_by_value_2"
  input: "lstm_1/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/TensorArray"
  op: "TensorArrayV3"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "output_ta"
    }
  }
}
node {
  name: "lstm_1/TensorArray_1"
  op: "TensorArrayV3"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "clear_after_read"
    value {
      b: true
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "dynamic_size"
    value {
      b: false
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
  attr {
    key: "tensor_array_name"
    value {
      s: "input_ta"
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/Shape"
  op: "Shape"
  input: "lstm_1/transpose"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/strided_slice"
  op: "StridedSlice"
  input: "lstm_1/TensorArrayUnstack/Shape"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack_1"
  input: "lstm_1/TensorArrayUnstack/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range/start"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range/delta"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/range"
  op: "Range"
  input: "lstm_1/TensorArrayUnstack/range/start"
  input: "lstm_1/TensorArrayUnstack/strided_slice"
  input: "lstm_1/TensorArrayUnstack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  op: "TensorArrayScatterV3"
  input: "lstm_1/TensorArray_1"
  input: "lstm_1/TensorArrayUnstack/range"
  input: "lstm_1/transpose"
  input: "lstm_1/TensorArray_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose"
      }
    }
  }
}
node {
  name: "lstm_1/time"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/while/Enter"
  op: "Enter"
  input: "lstm_1/time"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_1"
  op: "Enter"
  input: "lstm_1/TensorArray:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_2"
  op: "Enter"
  input: "lstm_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Enter_3"
  op: "Enter"
  input: "lstm_1/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Merge"
  op: "Merge"
  input: "lstm_1/while/Enter"
  input: "lstm_1/while/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Merge_1"
  op: "Merge"
  input: "lstm_1/while/Enter_1"
  input: "lstm_1/while/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Merge_2"
  op: "Merge"
  input: "lstm_1/while/Enter_2"
  input: "lstm_1/while/NextIteration_2"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Merge_3"
  op: "Merge"
  input: "lstm_1/while/Enter_3"
  input: "lstm_1/while/NextIteration_3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Less/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_12"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/Less"
  op: "Less"
  input: "lstm_1/while/Merge"
  input: "lstm_1/while/Less/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/LoopCond"
  op: "LoopCond"
  input: "lstm_1/while/Less"
}
node {
  name: "lstm_1/while/Switch"
  op: "Switch"
  input: "lstm_1/while/Merge"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_1"
  op: "Switch"
  input: "lstm_1/while/Merge_1"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_2"
  op: "Switch"
  input: "lstm_1/while/Merge_2"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "lstm_1/while/Switch_3"
  op: "Switch"
  input: "lstm_1/while/Merge_3"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "lstm_1/while/Identity"
  op: "Identity"
  input: "lstm_1/while/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Identity_1"
  op: "Identity"
  input: "lstm_1/while/Switch_1:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Identity_2"
  op: "Identity"
  input: "lstm_1/while/Switch_2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Identity_3"
  op: "Identity"
  input: "lstm_1/while/Switch_3:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3/Enter_1"
  op: "Enter"
  input: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_1/while/TensorArrayReadV3/Enter"
  input: "lstm_1/while/Identity"
  input: "lstm_1/while/TensorArrayReadV3/Enter_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/strided_slice/stack"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/while/strided_slice/stack_1"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/while/strided_slice/stack_2"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/while/strided_slice"
  op: "StridedSlice"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/strided_slice/stack"
  input: "lstm_1/while/strided_slice/stack_1"
  input: "lstm_1/while/strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/while/strided_slice_1/stack"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/while/strided_slice_1/stack_1"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/while/strided_slice_1/stack_2"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/while/strided_slice_1"
  op: "StridedSlice"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/strided_slice_1/stack"
  input: "lstm_1/while/strided_slice_1/stack_1"
  input: "lstm_1/while/strided_slice_1/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/while/strided_slice_2/stack"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/while/strided_slice_2/stack_1"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/while/strided_slice_2/stack_2"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/while/strided_slice_2"
  op: "StridedSlice"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/strided_slice_2/stack"
  input: "lstm_1/while/strided_slice_2/stack_1"
  input: "lstm_1/while/strided_slice_2/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/while/strided_slice_3/stack"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/while/strided_slice_3/stack_1"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\000\000\000\000\000\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/while/strided_slice_3/stack_2"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\001\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/while/strided_slice_3"
  op: "StridedSlice"
  input: "lstm_1/while/TensorArrayReadV3"
  input: "lstm_1/while/strided_slice_3/stack"
  input: "lstm_1/while/strided_slice_3/stack_1"
  input: "lstm_1/while/strided_slice_3/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "lstm_1/while/mul/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/mul"
  op: "Mul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/mul/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul"
  op: "MatMul"
  input: "lstm_1/while/mul"
  input: "lstm_1/while/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/add"
  op: "Add"
  input: "lstm_1/while/strided_slice"
  input: "lstm_1/while/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_1/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_1"
  op: "Mul"
  input: "lstm_1/while/mul_1/x"
  input: "lstm_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_1/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_1"
  op: "Add"
  input: "lstm_1/while/mul_1"
  input: "lstm_1/while/add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_1"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_1"
  input: "lstm_1/while/Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value/Minimum"
  input: "lstm_1/while/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_2/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_2"
  op: "Mul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/mul_2/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_1/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_1"
  op: "MatMul"
  input: "lstm_1/while/mul_2"
  input: "lstm_1/while/MatMul_1/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/add_2"
  op: "Add"
  input: "lstm_1/while/strided_slice_1"
  input: "lstm_1/while/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_3/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_3"
  op: "Mul"
  input: "lstm_1/while/mul_3/x"
  input: "lstm_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_3/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_3"
  op: "Add"
  input: "lstm_1/while/mul_3"
  input: "lstm_1/while/add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const_2"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_3"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_1/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_3"
  input: "lstm_1/while/Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_1"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  input: "lstm_1/while/Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_4"
  op: "Mul"
  input: "lstm_1/while/clip_by_value_1"
  input: "lstm_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_5/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_5"
  op: "Mul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/mul_5/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_2/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_2"
  op: "MatMul"
  input: "lstm_1/while/mul_5"
  input: "lstm_1/while/MatMul_2/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/add_4"
  op: "Add"
  input: "lstm_1/while/strided_slice_2"
  input: "lstm_1/while/MatMul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Tanh"
  op: "Tanh"
  input: "lstm_1/while/add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_6"
  op: "Mul"
  input: "lstm_1/while/clip_by_value"
  input: "lstm_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_5"
  op: "Add"
  input: "lstm_1/while/mul_4"
  input: "lstm_1/while/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_7/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_7"
  op: "Mul"
  input: "lstm_1/while/Identity_2"
  input: "lstm_1/while/mul_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/MatMul_3/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/MatMul_3"
  op: "MatMul"
  input: "lstm_1/while/mul_7"
  input: "lstm_1/while/MatMul_3/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "lstm_1/while/add_6"
  op: "Add"
  input: "lstm_1/while/strided_slice_3"
  input: "lstm_1/while/MatMul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_8/x"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.20000000298023224
      }
    }
  }
}
node {
  name: "lstm_1/while/mul_8"
  op: "Mul"
  input: "lstm_1/while/mul_8/x"
  input: "lstm_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/add_7/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.5
      }
    }
  }
}
node {
  name: "lstm_1/while/add_7"
  op: "Add"
  input: "lstm_1/while/mul_8"
  input: "lstm_1/while/add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Const_4"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "lstm_1/while/Const_5"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_2/Minimum"
  op: "Minimum"
  input: "lstm_1/while/add_7"
  input: "lstm_1/while/Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/clip_by_value_2"
  op: "Maximum"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  input: "lstm_1/while/Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Tanh_1"
  op: "Tanh"
  input: "lstm_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/mul_9"
  op: "Mul"
  input: "lstm_1/while/clip_by_value_2"
  input: "lstm_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3/Enter"
  input: "lstm_1/while/Identity"
  input: "lstm_1/while/mul_9"
  input: "lstm_1/while/Identity_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
}
node {
  name: "lstm_1/while/add_8/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/while/add_8"
  op: "Add"
  input: "lstm_1/while/Identity"
  input: "lstm_1/while/add_8/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/NextIteration"
  op: "NextIteration"
  input: "lstm_1/while/add_8"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_1"
  op: "NextIteration"
  input: "lstm_1/while/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_2"
  op: "NextIteration"
  input: "lstm_1/while/mul_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/NextIteration_3"
  op: "NextIteration"
  input: "lstm_1/while/add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit"
  op: "Exit"
  input: "lstm_1/while/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/while/Exit_1"
  op: "Exit"
  input: "lstm_1/while/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit_2"
  op: "Exit"
  input: "lstm_1/while/Switch_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/while/Exit_3"
  op: "Exit"
  input: "lstm_1/while/Switch_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/TensorArraySizeV3"
  op: "TensorArraySizeV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/range"
  op: "Range"
  input: "lstm_1/TensorArrayStack/range/start"
  input: "lstm_1/TensorArrayStack/TensorArraySizeV3"
  input: "lstm_1/TensorArrayStack/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
}
node {
  name: "lstm_1/TensorArrayStack/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/TensorArrayStack/range"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: 64
        }
      }
    }
  }
}
node {
  name: "lstm_1/sub/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "lstm_1/sub"
  op: "Sub"
  input: "lstm_1/while/Exit"
  input: "lstm_1/sub/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "lstm_1/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/sub"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "lstm_1/transpose_1/perm"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 3
          }
        }
        tensor_content: "\001\000\000\000\000\000\000\000\002\000\000\000"
      }
    }
  }
}
node {
  name: "lstm_1/transpose_1"
  op: "Transpose"
  input: "lstm_1/TensorArrayStack/TensorArrayGatherV3"
  input: "lstm_1/transpose_1/perm"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "dense_1/random_uniform/shape"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/min"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.26726123690605164
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/max"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.26726123690605164
      }
    }
  }
}
node {
  name: "dense_1/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "dense_1/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 87654321
    }
  }
  attr {
    key: "seed2"
    value {
      i: 7701723
    }
  }
}
node {
  name: "dense_1/random_uniform/sub"
  op: "Sub"
  input: "dense_1/random_uniform/max"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform/mul"
  op: "Mul"
  input: "dense_1/random_uniform/RandomUniform"
  input: "dense_1/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/random_uniform"
  op: "Add"
  input: "dense_1/random_uniform/mul"
  input: "dense_1/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "dense_1/kernel"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/kernel/Assign"
  op: "Assign"
  input: "dense_1/kernel"
  input: "dense_1/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/kernel/read"
  op: "Identity"
  input: "dense_1/kernel"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
}
node {
  name: "dense_1/Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "dense_1/bias"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "dense_1/bias/Assign"
  op: "Assign"
  input: "dense_1/bias"
  input: "dense_1/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "dense_1/bias/read"
  op: "Identity"
  input: "dense_1/bias"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
}
node {
  name: "dense_1/MatMul"
  op: "MatMul"
  input: "lstm_1/TensorArrayReadV3"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "dense_1/BiasAdd"
  op: "BiasAdd"
  input: "dense_1/MatMul"
  input: "dense_1/bias/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "dense_1/Softmax"
  op: "Softmax"
  input: "dense_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Placeholder"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "Assign"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "Placeholder"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_1"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "Assign_1"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "Placeholder_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_2"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 20
        }
      }
    }
  }
}
node {
  name: "Assign_2"
  op: "Assign"
  input: "dense_1/kernel"
  input: "Placeholder_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_3"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
}
node {
  name: "Assign_3"
  op: "Assign"
  input: "dense_1/bias"
  input: "Placeholder_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "init"
  op: "NoOp"
  input: "^dense_1/kernel/Assign"
  input: "^dense_1/bias/Assign"
}
node {
  name: "lr/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0010000000474974513
      }
    }
  }
}
node {
  name: "lr"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "lr/Assign"
  op: "Assign"
  input: "lr"
  input: "lr/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lr"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "lr/read"
  op: "Identity"
  input: "lr"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lr"
      }
    }
  }
}
node {
  name: "rho/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.8999999761581421
      }
    }
  }
}
node {
  name: "rho"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "rho/Assign"
  op: "Assign"
  input: "rho"
  input: "rho/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rho"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "rho/read"
  op: "Identity"
  input: "rho"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@rho"
      }
    }
  }
}
node {
  name: "decay/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decay"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decay/Assign"
  op: "Assign"
  input: "decay"
  input: "decay/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decay"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decay/read"
  op: "Identity"
  input: "decay"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decay"
      }
    }
  }
}
node {
  name: "iterations/initial_value"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "iterations"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "iterations/Assign"
  op: "Assign"
  input: "iterations"
  input: "iterations/initial_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@iterations"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "iterations/read"
  op: "Identity"
  input: "iterations"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@iterations"
      }
    }
  }
}
node {
  name: "dense_1_sample_weights"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "dense_1_target"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: -1
        }
        dim {
          size: -1
        }
      }
    }
  }
}
node {
  name: "Sum/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Sum"
  op: "Sum"
  input: "dense_1/Softmax"
  input: "Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: true
    }
  }
}
node {
  name: "truediv"
  op: "RealDiv"
  input: "dense_1/Softmax"
  input: "Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0000000116860974e-07
      }
    }
  }
}
node {
  name: "sub/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "sub"
  op: "Sub"
  input: "sub/x"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_value/Minimum"
  op: "Minimum"
  input: "truediv"
  input: "sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_value"
  op: "Maximum"
  input: "clip_by_value/Minimum"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Log"
  op: "Log"
  input: "clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul"
  op: "Mul"
  input: "dense_1_target"
  input: "Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Sum_1/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "Sum_1"
  op: "Sum"
  input: "mul"
  input: "Sum_1/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Neg"
  op: "Neg"
  input: "Sum_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Mean/reduction_indices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "Mean"
  op: "Mean"
  input: "Neg"
  input: "Mean/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_1"
  op: "Mul"
  input: "Mean"
  input: "dense_1_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "NotEqual/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "NotEqual"
  op: "NotEqual"
  input: "dense_1_sample_weights"
  input: "NotEqual/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Cast"
  op: "Cast"
  input: "NotEqual"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean_1"
  op: "Mean"
  input: "Cast"
  input: "Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "truediv_1"
  op: "RealDiv"
  input: "mul_1"
  input: "Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean_2"
  op: "Mean"
  input: "truediv_1"
  input: "Const_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "mul_2/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "mul_2"
  op: "Mul"
  input: "mul_2/x"
  input: "Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "ArgMax/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ArgMax"
  op: "ArgMax"
  input: "dense_1_target"
  input: "ArgMax/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "ArgMax_1/dimension"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "ArgMax_1"
  op: "ArgMax"
  input: "dense_1/Softmax"
  input: "ArgMax_1/dimension"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "Equal"
  op: "Equal"
  input: "ArgMax"
  input: "ArgMax_1"
  attr {
    key: "T"
    value {
      type: DT_INT64
    }
  }
}
node {
  name: "Cast_1"
  op: "Cast"
  input: "Equal"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_BOOL
    }
  }
}
node {
  name: "Const_3"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "Mean_3"
  op: "Mean"
  input: "Cast_1"
  input: "Const_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "gradients/Fill"
  op: "Fill"
  input: "gradients/Shape"
  input: "gradients/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul_2"
      }
    }
  }
}
node {
  name: "gradients/f_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/f_count_1"
  op: "Enter"
  input: "gradients/f_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge"
  op: "Merge"
  input: "gradients/f_count_1"
  input: "gradients/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "gradients/Switch"
  op: "Switch"
  input: "gradients/Merge"
  input: "lstm_1/while/LoopCond"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "gradients/Add/y"
  op: "Const"
  input: "^lstm_1/while/Identity"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Add"
  op: "Add"
  input: "gradients/Switch:1"
  input: "gradients/Add/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "gradients/NextIteration"
  op: "NextIteration"
  input: "gradients/Add"
  input: "^gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPush"
  input: "^gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/StackPush"
  input: "^gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/StackPush_1"
  input: "^gradients/lstm_1/while/mul_9_grad/mul/StackPush"
  input: "^gradients/lstm_1/while/mul_9_grad/mul_1/StackPush"
  input: "^gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPush"
  input: "^gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPush_1"
  input: "^gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPush"
  input: "^gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPush"
  input: "^gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPush_1"
  input: "^gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPush"
  input: "^gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPush"
  input: "^gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPush_1"
  input: "^gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPush"
  input: "^gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPush"
  input: "^gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPush_1"
  input: "^gradients/lstm_1/while/mul_4_grad/mul/StackPush"
  input: "^gradients/lstm_1/while/mul_4_grad/mul_1/StackPush"
  input: "^gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPush"
  input: "^gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPush_1"
  input: "^gradients/lstm_1/while/mul_6_grad/mul/StackPush"
  input: "^gradients/lstm_1/while/mul_6_grad/mul_1/StackPush"
  input: "^gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/StackPush"
  input: "^gradients/lstm_1/while/mul_8_grad/mul/StackPush"
  input: "^gradients/lstm_1/while/mul_8_grad/mul_1/StackPush"
  input: "^gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPush"
  input: "^gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPush_1"
  input: "^gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPush"
  input: "^gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPush"
  input: "^gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPush_1"
  input: "^gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPush"
  input: "^gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPush"
  input: "^gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPush_1"
  input: "^gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPush"
  input: "^gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPush_1"
  input: "^gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPush"
  input: "^gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPush"
  input: "^gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPush_1"
  input: "^gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPush"
  input: "^gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPush"
  input: "^gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPush_1"
  input: "^gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPush"
  input: "^gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPush_1"
  input: "^gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPush_2"
  input: "^gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPush_3"
  input: "^gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPush"
  input: "^gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPush"
  input: "^gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPush"
  input: "^gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPush"
  input: "^gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPush_1"
  input: "^gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPush_2"
  input: "^gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPush_3"
  input: "^gradients/lstm_1/while/MatMul_2_grad/MatMul_1/StackPush"
  input: "^gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/StackPush"
  input: "^gradients/lstm_1/while/mul_7_grad/mul/StackPush"
  input: "^gradients/lstm_1/while/mul_7_grad/mul_1/StackPush"
  input: "^gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPush"
  input: "^gradients/lstm_1/while/mul_3_grad/mul/StackPush"
  input: "^gradients/lstm_1/while/mul_3_grad/mul_1/StackPush"
  input: "^gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPush"
  input: "^gradients/lstm_1/while/mul_1_grad/mul/StackPush"
  input: "^gradients/lstm_1/while/mul_1_grad/mul_1/StackPush"
  input: "^gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPush"
  input: "^gradients/lstm_1/while/mul_5_grad/mul/StackPush"
  input: "^gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPush"
  input: "^gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPush_1"
  input: "^gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPush"
  input: "^gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPush_1"
  input: "^gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPush"
  input: "^gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPush_1"
  input: "^gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPush_2"
  input: "^gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPush_3"
  input: "^gradients/lstm_1/while/MatMul_1_grad/MatMul_1/StackPush"
  input: "^gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPush"
  input: "^gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPush_1"
  input: "^gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPush_2"
  input: "^gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPush_3"
  input: "^gradients/lstm_1/while/MatMul_grad/MatMul_1/StackPush"
  input: "^gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPush"
  input: "^gradients/lstm_1/while/mul_2_grad/mul/StackPush"
  input: "^gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPush"
  input: "^gradients/lstm_1/while/mul_grad/mul/StackPush"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "gradients/f_count_2"
  op: "Exit"
  input: "gradients/Switch"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "gradients/b_count"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/b_count_1"
  op: "Enter"
  input: "gradients/f_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/Merge_1"
  op: "Merge"
  input: "gradients/b_count_1"
  input: "gradients/NextIteration_1"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "gradients/GreaterEqual/Enter"
  op: "Enter"
  input: "gradients/b_count"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/Merge_1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "gradients/b_count_2"
  op: "LoopCond"
  input: "gradients/GreaterEqual"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "gradients/Switch_1"
  op: "Switch"
  input: "gradients/Merge_1"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "gradients/Sub"
  op: "Sub"
  input: "gradients/Switch_1:1"
  input: "gradients/GreaterEqual/Enter"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "gradients/NextIteration_1"
  op: "NextIteration"
  input: "gradients/Sub"
  input: "^gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "gradients/b_count_3"
  op: "Exit"
  input: "gradients/Switch_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mul_2_grad/Shape"
  input: "gradients/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul_2"
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/mul"
  op: "Mul"
  input: "gradients/Fill"
  input: "Mean_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul_2"
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/mul_2_grad/mul"
  input: "gradients/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/mul_2_grad/Sum"
  input: "gradients/mul_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul_2"
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/mul_1"
  op: "Mul"
  input: "mul_2/x"
  input: "gradients/Fill"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul_2"
      }
    }
  }
}
node {
  name: "gradients/mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/mul_2_grad/mul_1"
  input: "gradients/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mul_2_grad/Sum_1"
  input: "gradients/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul_2"
      }
    }
  }
}
node {
  name: "gradients/Mean_2_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/mul_2_grad/Reshape_1"
  input: "gradients/Mean_2_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean_2"
      }
    }
  }
}
node {
  name: "gradients/Mean_2_grad/Shape"
  op: "Shape"
  input: "truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_2_grad/Tile"
  op: "Tile"
  input: "gradients/Mean_2_grad/Reshape"
  input: "gradients/Mean_2_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean_2"
      }
    }
  }
}
node {
  name: "gradients/Mean_2_grad/Shape_1"
  op: "Shape"
  input: "truediv_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_2_grad/Shape_2"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Mean_2_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_2_grad/Prod"
  op: "Prod"
  input: "gradients/Mean_2_grad/Shape_1"
  input: "gradients/Mean_2_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_2_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_2_grad/Prod_1"
  op: "Prod"
  input: "gradients/Mean_2_grad/Shape_2"
  input: "gradients/Mean_2_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_2_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_2_grad/Maximum"
  op: "Maximum"
  input: "gradients/Mean_2_grad/Prod_1"
  input: "gradients/Mean_2_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean_2"
      }
    }
  }
}
node {
  name: "gradients/Mean_2_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/Mean_2_grad/Prod"
  input: "gradients/Mean_2_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean_2"
      }
    }
  }
}
node {
  name: "gradients/Mean_2_grad/Cast"
  op: "Cast"
  input: "gradients/Mean_2_grad/floordiv"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean_2"
      }
    }
  }
}
node {
  name: "gradients/Mean_2_grad/truediv"
  op: "RealDiv"
  input: "gradients/Mean_2_grad/Tile"
  input: "gradients/Mean_2_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean_2"
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Shape"
  op: "Shape"
  input: "mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/truediv_1_grad/Shape"
  input: "gradients/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_1"
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/Mean_2_grad/truediv"
  input: "Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_1"
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Sum"
  op: "Sum"
  input: "gradients/truediv_1_grad/RealDiv"
  input: "gradients/truediv_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/truediv_1_grad/Sum"
  input: "gradients/truediv_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_1"
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Neg"
  op: "Neg"
  input: "mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_1"
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/truediv_1_grad/Neg"
  input: "Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_1"
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/truediv_1_grad/RealDiv_1"
  input: "Mean_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_1"
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/mul"
  op: "Mul"
  input: "gradients/Mean_2_grad/truediv"
  input: "gradients/truediv_1_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_1"
      }
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/truediv_1_grad/mul"
  input: "gradients/truediv_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/truediv_1_grad/Sum_1"
  input: "gradients/truediv_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv_1"
      }
    }
  }
}
node {
  name: "gradients/mul_1_grad/Shape"
  op: "Shape"
  input: "Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mul_1_grad/Shape_1"
  op: "Shape"
  input: "dense_1_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mul_1_grad/Shape"
  input: "gradients/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul_1"
      }
    }
  }
}
node {
  name: "gradients/mul_1_grad/mul"
  op: "Mul"
  input: "gradients/truediv_1_grad/Reshape"
  input: "dense_1_sample_weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul_1"
      }
    }
  }
}
node {
  name: "gradients/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/mul_1_grad/mul"
  input: "gradients/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/mul_1_grad/Sum"
  input: "gradients/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul_1"
      }
    }
  }
}
node {
  name: "gradients/mul_1_grad/mul_1"
  op: "Mul"
  input: "Mean"
  input: "gradients/truediv_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul_1"
      }
    }
  }
}
node {
  name: "gradients/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/mul_1_grad/mul_1"
  input: "gradients/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mul_1_grad/Sum_1"
  input: "gradients/mul_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul_1"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape"
  op: "Shape"
  input: "Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/add"
  op: "Add"
  input: "Mean/reduction_indices"
  input: "gradients/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/mod"
  op: "FloorMod"
  input: "gradients/Mean_grad/add"
  input: "gradients/Mean_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/range"
  op: "Range"
  input: "gradients/Mean_grad/range/start"
  input: "gradients/Mean_grad/Size"
  input: "gradients/Mean_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Fill"
  op: "Fill"
  input: "gradients/Mean_grad/Shape_1"
  input: "gradients/Mean_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Mean_grad/range"
  input: "gradients/Mean_grad/mod"
  input: "gradients/Mean_grad/Shape"
  input: "gradients/Mean_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum"
  op: "Maximum"
  input: "gradients/Mean_grad/DynamicStitch"
  input: "gradients/Mean_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/Mean_grad/Shape"
  input: "gradients/Mean_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Reshape"
  op: "Reshape"
  input: "gradients/mul_1_grad/Reshape"
  input: "gradients/Mean_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Tile"
  op: "Tile"
  input: "gradients/Mean_grad/Reshape"
  input: "gradients/Mean_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_2"
  op: "Shape"
  input: "Neg"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Shape_3"
  op: "Shape"
  input: "Mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Mean_grad/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_2"
  input: "gradients/Mean_grad/Const"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Const_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Prod_1"
  op: "Prod"
  input: "gradients/Mean_grad/Shape_3"
  input: "gradients/Mean_grad/Const_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum_1/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Maximum_1"
  op: "Maximum"
  input: "gradients/Mean_grad/Prod_1"
  input: "gradients/Mean_grad/Maximum_1/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/floordiv_1"
  op: "FloorDiv"
  input: "gradients/Mean_grad/Prod"
  input: "gradients/Mean_grad/Maximum_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/Cast"
  op: "Cast"
  input: "gradients/Mean_grad/floordiv_1"
  attr {
    key: "DstT"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "SrcT"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
}
node {
  name: "gradients/Mean_grad/truediv"
  op: "RealDiv"
  input: "gradients/Mean_grad/Tile"
  input: "gradients/Mean_grad/Cast"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Mean"
      }
    }
  }
}
node {
  name: "gradients/Neg_grad/Neg"
  op: "Neg"
  input: "gradients/Mean_grad/truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Neg"
      }
    }
  }
}
node {
  name: "gradients/Sum_1_grad/Shape"
  op: "Shape"
  input: "mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_1_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/Sum_1_grad/add"
  op: "Add"
  input: "Sum_1/reduction_indices"
  input: "gradients/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum_1"
      }
    }
  }
}
node {
  name: "gradients/Sum_1_grad/mod"
  op: "FloorMod"
  input: "gradients/Sum_1_grad/add"
  input: "gradients/Sum_1_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum_1"
      }
    }
  }
}
node {
  name: "gradients/Sum_1_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_1_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Sum_1_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_1_grad/range"
  op: "Range"
  input: "gradients/Sum_1_grad/range/start"
  input: "gradients/Sum_1_grad/Size"
  input: "gradients/Sum_1_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum_1"
      }
    }
  }
}
node {
  name: "gradients/Sum_1_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_1_grad/Fill"
  op: "Fill"
  input: "gradients/Sum_1_grad/Shape_1"
  input: "gradients/Sum_1_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum_1"
      }
    }
  }
}
node {
  name: "gradients/Sum_1_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Sum_1_grad/range"
  input: "gradients/Sum_1_grad/mod"
  input: "gradients/Sum_1_grad/Shape"
  input: "gradients/Sum_1_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum_1"
      }
    }
  }
}
node {
  name: "gradients/Sum_1_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_1_grad/Maximum"
  op: "Maximum"
  input: "gradients/Sum_1_grad/DynamicStitch"
  input: "gradients/Sum_1_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum_1"
      }
    }
  }
}
node {
  name: "gradients/Sum_1_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/Sum_1_grad/Shape"
  input: "gradients/Sum_1_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum_1"
      }
    }
  }
}
node {
  name: "gradients/Sum_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/Neg_grad/Neg"
  input: "gradients/Sum_1_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum_1"
      }
    }
  }
}
node {
  name: "gradients/Sum_1_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_1_grad/Reshape"
  input: "gradients/Sum_1_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum_1"
      }
    }
  }
}
node {
  name: "gradients/mul_grad/Shape"
  op: "Shape"
  input: "dense_1_target"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mul_grad/Shape_1"
  op: "Shape"
  input: "Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/mul_grad/Shape"
  input: "gradients/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul"
      }
    }
  }
}
node {
  name: "gradients/mul_grad/mul"
  op: "Mul"
  input: "gradients/Sum_1_grad/Tile"
  input: "Log"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul"
      }
    }
  }
}
node {
  name: "gradients/mul_grad/Sum"
  op: "Sum"
  input: "gradients/mul_grad/mul"
  input: "gradients/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/mul_grad/Sum"
  input: "gradients/mul_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul"
      }
    }
  }
}
node {
  name: "gradients/mul_grad/mul_1"
  op: "Mul"
  input: "dense_1_target"
  input: "gradients/Sum_1_grad/Tile"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul"
      }
    }
  }
}
node {
  name: "gradients/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/mul_grad/mul_1"
  input: "gradients/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/mul_grad/Sum_1"
  input: "gradients/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@mul"
      }
    }
  }
}
node {
  name: "gradients/Log_grad/Reciprocal"
  op: "Reciprocal"
  input: "clip_by_value"
  input: "^gradients/mul_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Log"
      }
    }
  }
}
node {
  name: "gradients/Log_grad/mul"
  op: "Mul"
  input: "gradients/mul_grad/Reshape_1"
  input: "gradients/Log_grad/Reciprocal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Log"
      }
    }
  }
}
node {
  name: "gradients/clip_by_value_grad/Shape"
  op: "Shape"
  input: "clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/clip_by_value_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "gradients/Log_grad/mul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/clip_by_value_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/clip_by_value_grad/zeros"
  op: "Fill"
  input: "gradients/clip_by_value_grad/Shape_2"
  input: "gradients/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value"
      }
    }
  }
}
node {
  name: "gradients/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "clip_by_value/Minimum"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value"
      }
    }
  }
}
node {
  name: "gradients/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/clip_by_value_grad/Shape"
  input: "gradients/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value"
      }
    }
  }
}
node {
  name: "gradients/clip_by_value_grad/Select"
  op: "Select"
  input: "gradients/clip_by_value_grad/GreaterEqual"
  input: "gradients/Log_grad/mul"
  input: "gradients/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value"
      }
    }
  }
}
node {
  name: "gradients/clip_by_value_grad/LogicalNot"
  op: "LogicalNot"
  input: "gradients/clip_by_value_grad/GreaterEqual"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value"
      }
    }
  }
}
node {
  name: "gradients/clip_by_value_grad/Select_1"
  op: "Select"
  input: "gradients/clip_by_value_grad/LogicalNot"
  input: "gradients/Log_grad/mul"
  input: "gradients/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value"
      }
    }
  }
}
node {
  name: "gradients/clip_by_value_grad/Sum"
  op: "Sum"
  input: "gradients/clip_by_value_grad/Select"
  input: "gradients/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "gradients/clip_by_value_grad/Sum"
  input: "gradients/clip_by_value_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value"
      }
    }
  }
}
node {
  name: "gradients/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "gradients/clip_by_value_grad/Select_1"
  input: "gradients/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/clip_by_value_grad/Sum_1"
  input: "gradients/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value"
      }
    }
  }
}
node {
  name: "gradients/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "truediv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "gradients/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "gradients/clip_by_value/Minimum_grad/Shape_2"
  input: "gradients/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "gradients/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "truediv"
  input: "sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "gradients/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/clip_by_value/Minimum_grad/Shape"
  input: "gradients/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "gradients/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "gradients/clip_by_value/Minimum_grad/LessEqual"
  input: "gradients/clip_by_value_grad/Reshape"
  input: "gradients/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "gradients/clip_by_value/Minimum_grad/LogicalNot"
  op: "LogicalNot"
  input: "gradients/clip_by_value/Minimum_grad/LessEqual"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "gradients/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "gradients/clip_by_value/Minimum_grad/LogicalNot"
  input: "gradients/clip_by_value_grad/Reshape"
  input: "gradients/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "gradients/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "gradients/clip_by_value/Minimum_grad/Select"
  input: "gradients/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "gradients/clip_by_value/Minimum_grad/Sum"
  input: "gradients/clip_by_value/Minimum_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "gradients/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "gradients/clip_by_value/Minimum_grad/Select_1"
  input: "gradients/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/clip_by_value/Minimum_grad/Sum_1"
  input: "gradients/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/Shape"
  op: "Shape"
  input: "dense_1/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/truediv_grad/Shape_1"
  op: "Shape"
  input: "Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/truediv_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/truediv_grad/Shape"
  input: "gradients/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/RealDiv"
  op: "RealDiv"
  input: "gradients/clip_by_value/Minimum_grad/Reshape"
  input: "Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/Sum"
  op: "Sum"
  input: "gradients/truediv_grad/RealDiv"
  input: "gradients/truediv_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_grad/Reshape"
  op: "Reshape"
  input: "gradients/truediv_grad/Sum"
  input: "gradients/truediv_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/Neg"
  op: "Neg"
  input: "dense_1/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/RealDiv_1"
  op: "RealDiv"
  input: "gradients/truediv_grad/Neg"
  input: "Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/RealDiv_2"
  op: "RealDiv"
  input: "gradients/truediv_grad/RealDiv_1"
  input: "Sum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/mul"
  op: "Mul"
  input: "gradients/clip_by_value/Minimum_grad/Reshape"
  input: "gradients/truediv_grad/RealDiv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
}
node {
  name: "gradients/truediv_grad/Sum_1"
  op: "Sum"
  input: "gradients/truediv_grad/mul"
  input: "gradients/truediv_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/truediv_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/truediv_grad/Sum_1"
  input: "gradients/truediv_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Shape"
  op: "Shape"
  input: "dense_1/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/Sum_grad/Size"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 2
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/add"
  op: "Add"
  input: "Sum/reduction_indices"
  input: "gradients/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum"
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/mod"
  op: "FloorMod"
  input: "gradients/Sum_grad/add"
  input: "gradients/Sum_grad/Size"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum"
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Shape_1"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/range/start"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/range/delta"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/range"
  op: "Range"
  input: "gradients/Sum_grad/range/start"
  input: "gradients/Sum_grad/Size"
  input: "gradients/Sum_grad/range/delta"
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum"
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Fill/value"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Fill"
  op: "Fill"
  input: "gradients/Sum_grad/Shape_1"
  input: "gradients/Sum_grad/Fill/value"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum"
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/DynamicStitch"
  op: "DynamicStitch"
  input: "gradients/Sum_grad/range"
  input: "gradients/Sum_grad/mod"
  input: "gradients/Sum_grad/Shape"
  input: "gradients/Sum_grad/Fill"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum"
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Maximum/y"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Maximum"
  op: "Maximum"
  input: "gradients/Sum_grad/DynamicStitch"
  input: "gradients/Sum_grad/Maximum/y"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum"
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/floordiv"
  op: "FloorDiv"
  input: "gradients/Sum_grad/Shape"
  input: "gradients/Sum_grad/Maximum"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum"
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Reshape"
  op: "Reshape"
  input: "gradients/truediv_grad/Reshape_1"
  input: "gradients/Sum_grad/DynamicStitch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum"
      }
    }
  }
}
node {
  name: "gradients/Sum_grad/Tile"
  op: "Tile"
  input: "gradients/Sum_grad/Reshape"
  input: "gradients/Sum_grad/floordiv"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tmultiples"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Sum"
      }
    }
  }
}
node {
  name: "gradients/AddN"
  op: "AddN"
  input: "gradients/truediv_grad/Reshape"
  input: "gradients/Sum_grad/Tile"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@truediv"
      }
    }
  }
}
node {
  name: "gradients/dense_1/Softmax_grad/mul"
  op: "Mul"
  input: "gradients/AddN"
  input: "dense_1/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/Softmax"
      }
    }
  }
}
node {
  name: "gradients/dense_1/Softmax_grad/Sum/reduction_indices"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/Softmax"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "gradients/dense_1/Softmax_grad/Sum"
  op: "Sum"
  input: "gradients/dense_1/Softmax_grad/mul"
  input: "gradients/dense_1/Softmax_grad/Sum/reduction_indices"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/Softmax"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/dense_1/Softmax_grad/Reshape/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/Softmax"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\377\377\377\377\001\000\000\000"
      }
    }
  }
}
node {
  name: "gradients/dense_1/Softmax_grad/Reshape"
  op: "Reshape"
  input: "gradients/dense_1/Softmax_grad/Sum"
  input: "gradients/dense_1/Softmax_grad/Reshape/shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/Softmax"
      }
    }
  }
}
node {
  name: "gradients/dense_1/Softmax_grad/sub"
  op: "Sub"
  input: "gradients/AddN"
  input: "gradients/dense_1/Softmax_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/Softmax"
      }
    }
  }
}
node {
  name: "gradients/dense_1/Softmax_grad/mul_1"
  op: "Mul"
  input: "gradients/dense_1/Softmax_grad/sub"
  input: "dense_1/Softmax"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/Softmax"
      }
    }
  }
}
node {
  name: "gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/dense_1/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/dense_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/dense_1/Softmax_grad/mul_1"
  input: "dense_1/kernel/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/dense_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "lstm_1/TensorArrayReadV3"
  input: "gradients/dense_1/Softmax_grad/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_1/TensorArray"
  input: "lstm_1/while/Exit_1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
        s: "loc:@lstm_1/TensorArrayReadV3"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "lstm_1/while/Exit_1"
  input: "^gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray"
        s: "loc:@lstm_1/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_1/sub"
  input: "gradients/dense_1/MatMul_grad/MatMul"
  input: "gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "gradients/zeros_like"
  op: "ZerosLike"
  input: "lstm_1/while/Exit_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/zeros_like_1"
  op: "ZerosLike"
  input: "lstm_1/while/Exit_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/Exit_1_grad/b_exit"
  op: "Enter"
  input: "gradients/lstm_1/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/Exit_2_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/Exit_3_grad/b_exit"
  op: "Enter"
  input: "gradients/zeros_like_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Exit_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/Switch_1_grad/b_switch"
  op: "Merge"
  input: "gradients/lstm_1/while/Exit_1_grad/b_exit"
  input: "gradients/lstm_1/while/Switch_1_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Switch_2_grad/b_switch"
  op: "Merge"
  input: "gradients/lstm_1/while/Exit_2_grad/b_exit"
  input: "gradients/lstm_1/while/Switch_2_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Switch_3_grad/b_switch"
  op: "Merge"
  input: "gradients/lstm_1/while/Exit_3_grad/b_exit"
  input: "gradients/lstm_1/while/Switch_3_grad_1/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Merge_1_grad/Switch"
  op: "Switch"
  input: "gradients/lstm_1/while/Switch_1_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Merge_2_grad/Switch"
  op: "Switch"
  input: "gradients/lstm_1/while/Switch_2_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Merge_3_grad/Switch"
  op: "Switch"
  input: "gradients/lstm_1/while/Switch_3_grad/b_switch"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Enter_1_grad/Exit"
  op: "Exit"
  input: "gradients/lstm_1/while/Merge_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_1"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Enter_2_grad/Exit"
  op: "Exit"
  input: "gradients/lstm_1/while/Merge_2_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_2"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Enter_3_grad/Exit"
  op: "Exit"
  input: "gradients/lstm_1/while/Merge_3_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Enter_3"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/lstm_1/while/Merge_1_grad/Switch:1"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/lstm_1/while/Merge_1_grad/Switch:1"
  input: "^gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity"
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity"
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/RefEnter"
  input: "lstm_1/while/Identity"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity"
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity"
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity"
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/b_sync"
  op: "ControlTrigger"
  input: "^gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "^gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/StackPop"
  input: "^gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/StackPop_1"
  input: "^gradients/lstm_1/while/mul_9_grad/mul/StackPop"
  input: "^gradients/lstm_1/while/mul_9_grad/mul_1/StackPop"
  input: "^gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPop"
  input: "^gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPop_1"
  input: "^gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPop"
  input: "^gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPop"
  input: "^gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPop_1"
  input: "^gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPop"
  input: "^gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPop"
  input: "^gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPop_1"
  input: "^gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPop"
  input: "^gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPop"
  input: "^gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPop_1"
  input: "^gradients/lstm_1/while/mul_4_grad/mul/StackPop"
  input: "^gradients/lstm_1/while/mul_4_grad/mul_1/StackPop"
  input: "^gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPop"
  input: "^gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPop_1"
  input: "^gradients/lstm_1/while/mul_6_grad/mul/StackPop"
  input: "^gradients/lstm_1/while/mul_6_grad/mul_1/StackPop"
  input: "^gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/StackPop"
  input: "^gradients/lstm_1/while/mul_8_grad/mul/StackPop"
  input: "^gradients/lstm_1/while/mul_8_grad/mul_1/StackPop"
  input: "^gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPop"
  input: "^gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPop_1"
  input: "^gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPop"
  input: "^gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPop"
  input: "^gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPop_1"
  input: "^gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPop"
  input: "^gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPop"
  input: "^gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPop_1"
  input: "^gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPop"
  input: "^gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPop_1"
  input: "^gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPop"
  input: "^gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPop"
  input: "^gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPop_1"
  input: "^gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPop"
  input: "^gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPop"
  input: "^gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPop_1"
  input: "^gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPop"
  input: "^gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPop_1"
  input: "^gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPop_2"
  input: "^gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPop_3"
  input: "^gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPop"
  input: "^gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPop"
  input: "^gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPop"
  input: "^gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPop"
  input: "^gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPop_1"
  input: "^gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPop_2"
  input: "^gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPop_3"
  input: "^gradients/lstm_1/while/MatMul_2_grad/MatMul_1/StackPop"
  input: "^gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/StackPop"
  input: "^gradients/lstm_1/while/mul_7_grad/mul/StackPop"
  input: "^gradients/lstm_1/while/mul_7_grad/mul_1/StackPop"
  input: "^gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPop"
  input: "^gradients/lstm_1/while/mul_3_grad/mul/StackPop"
  input: "^gradients/lstm_1/while/mul_3_grad/mul_1/StackPop"
  input: "^gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPop"
  input: "^gradients/lstm_1/while/mul_1_grad/mul/StackPop"
  input: "^gradients/lstm_1/while/mul_1_grad/mul_1/StackPop"
  input: "^gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPop"
  input: "^gradients/lstm_1/while/mul_5_grad/mul/StackPop"
  input: "^gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPop"
  input: "^gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPop_1"
  input: "^gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPop"
  input: "^gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPop_1"
  input: "^gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPop"
  input: "^gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPop_1"
  input: "^gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPop_2"
  input: "^gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPop_3"
  input: "^gradients/lstm_1/while/MatMul_1_grad/MatMul_1/StackPop"
  input: "^gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPop"
  input: "^gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPop_1"
  input: "^gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPop_2"
  input: "^gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPop_3"
  input: "^gradients/lstm_1/while/MatMul_grad/MatMul_1/StackPop"
  input: "^gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPop"
  input: "^gradients/lstm_1/while/mul_2_grad/mul/StackPop"
  input: "^gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPop"
  input: "^gradients/lstm_1/while/mul_grad/mul/StackPop"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  op: "TensorArrayReadV3"
  input: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/AddN_1"
  op: "AddN"
  input: "gradients/lstm_1/while/Merge_2_grad/Switch:1"
  input: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Tanh_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/RefEnter"
  input: "gradients/lstm_1/while/mul_9_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/f_acc_1"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/RefEnter_1"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/StackPush_1"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/RefEnter_1"
  input: "gradients/lstm_1/while/mul_9_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/StackPop_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/StackPop_1"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/StackPop_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/StackPop"
  input: "gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/StackPop_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_9_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_9_grad/mul/RefEnter"
  input: "lstm_1/while/Tanh_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_9_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_9_grad/mul/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/mul"
  op: "Mul"
  input: "gradients/AddN_1"
  input: "gradients/lstm_1/while/mul_9_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_9_grad/mul"
  input: "gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_9_grad/Sum"
  input: "gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_9_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_9_grad/mul_1/RefEnter"
  input: "lstm_1/while/clip_by_value_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_9_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_9_grad/mul_1/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/mul_1"
  op: "Mul"
  input: "gradients/lstm_1/while/mul_9_grad/mul_1/StackPop"
  input: "gradients/AddN_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_9_grad/mul_1"
  input: "gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_9_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_9_grad/Sum_1"
  input: "gradients/lstm_1/while/mul_9_grad/BroadcastGradientArgs/StackPop_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_9"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/Shape_2"
  op: "Shape"
  input: "gradients/lstm_1/while/mul_9_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/zeros/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  op: "Fill"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/Shape_2"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/RefEnter"
  input: "lstm_1/while/clip_by_value_2/Minimum"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc_1"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const_4"
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/RefEnter_1"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const_4"
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPush_1"
  op: "StackPush"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/RefEnter_1"
  input: "lstm_1/while/Const_4"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const_4"
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPop_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const_4"
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPop_1"
  op: "StackPop"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPop_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const_4"
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPop"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual/StackPop_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPop"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/Select"
  op: "Select"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  input: "gradients/lstm_1/while/mul_9_grad/Reshape"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/LogicalNot"
  op: "LogicalNot"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/GreaterEqual"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/Select_1"
  op: "Select"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/LogicalNot"
  input: "gradients/lstm_1/while/mul_9_grad/Reshape"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/Select"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/Sum"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/Select_1"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/Sum_1"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Tanh_1_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/lstm_1/while/mul_9_grad/mul/StackPop"
  input: "gradients/lstm_1/while/mul_9_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh_1"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Switch_1_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/lstm_1/while/Merge_1_grad/Switch:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_1"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  op: "Shape"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  op: "Fill"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_2"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/RefEnter"
  input: "lstm_1/while/add_7"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc_1"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const_5"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/RefEnter_1"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const_5"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPush_1"
  op: "StackPush"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/RefEnter_1"
  input: "lstm_1/while/Const_5"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const_5"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPop_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const_5"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPop_1"
  op: "StackPop"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPop_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const_5"
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPop"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual/StackPop_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPop"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select"
  op: "Select"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LogicalNot"
  op: "LogicalNot"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LessEqual"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select_1"
  op: "Select"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/LogicalNot"
  input: "gradients/lstm_1/while/clip_by_value_2_grad/Reshape"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Select_1"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Sum_1"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_2/Minimum"
      }
    }
  }
}
node {
  name: "gradients/AddN_2"
  op: "AddN"
  input: "gradients/lstm_1/while/Merge_3_grad/Switch:1"
  input: "gradients/lstm_1/while/Tanh_1_grad/TanhGrad"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/mul_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/RefEnter"
  input: "gradients/lstm_1/while/add_5_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/RefEnter_1"
  op: "RefEnter"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPush_1"
  op: "StackPush"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/RefEnter_1"
  input: "gradients/lstm_1/while/add_5_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPop_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPop_1"
  op: "StackPop"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPop_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPop"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPop_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/Sum"
  op: "Sum"
  input: "gradients/AddN_2"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_5_grad/Sum"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/Sum_1"
  op: "Sum"
  input: "gradients/AddN_2"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_5_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_5_grad/Sum_1"
  input: "gradients/lstm_1/while/add_5_grad/BroadcastGradientArgs/StackPop_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_5"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/RefEnter"
  input: "gradients/lstm_1/while/add_7_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPop"
  input: "gradients/lstm_1/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_7_grad/Sum"
  input: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_2/Minimum_grad/Reshape"
  input: "gradients/lstm_1/while/add_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_7_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_7_grad/Sum_1"
  input: "gradients/lstm_1/while/add_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_7"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Identity_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/RefEnter"
  input: "gradients/lstm_1/while/mul_4_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/RefEnter_1"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPush_1"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/RefEnter_1"
  input: "gradients/lstm_1/while/mul_4_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPop_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPop_1"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPop_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPop"
  input: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPop_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_3"
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_3"
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_4_grad/mul/RefEnter"
  input: "lstm_1/while/Identity_3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_3"
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_4_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_3"
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_4_grad/mul/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_3"
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/mul"
  op: "Mul"
  input: "gradients/lstm_1/while/add_5_grad/Reshape"
  input: "gradients/lstm_1/while/mul_4_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_4_grad/mul"
  input: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_4_grad/Sum"
  input: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_4_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_4_grad/mul_1/RefEnter"
  input: "lstm_1/while/clip_by_value_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_4_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_4_grad/mul_1/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/mul_1"
  op: "Mul"
  input: "gradients/lstm_1/while/mul_4_grad/mul_1/StackPop"
  input: "gradients/lstm_1/while/add_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_4_grad/mul_1"
  input: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_4_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_4_grad/Sum_1"
  input: "gradients/lstm_1/while/mul_4_grad/BroadcastGradientArgs/StackPop_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_4"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/Tanh"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/RefEnter"
  input: "gradients/lstm_1/while/mul_6_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/RefEnter_1"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPush_1"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/RefEnter_1"
  input: "gradients/lstm_1/while/mul_6_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPop_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPop_1"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPop_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPop"
  input: "gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPop_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_6_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_6_grad/mul/RefEnter"
  input: "lstm_1/while/Tanh"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_6_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_6_grad/mul/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/mul"
  op: "Mul"
  input: "gradients/lstm_1/while/add_5_grad/Reshape_1"
  input: "gradients/lstm_1/while/mul_6_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_6_grad/mul"
  input: "gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_6_grad/Sum"
  input: "gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_6_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_6_grad/mul_1/RefEnter"
  input: "lstm_1/while/clip_by_value"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_6_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_6_grad/mul_1/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/mul_1"
  op: "Mul"
  input: "gradients/lstm_1/while/mul_6_grad/mul_1/StackPop"
  input: "gradients/lstm_1/while/add_5_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_6_grad/mul_1"
  input: "gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_6_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_6_grad/Sum_1"
  input: "gradients/lstm_1/while/mul_6_grad/BroadcastGradientArgs/StackPop_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_6"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_8_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_8_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/RefEnter"
  input: "gradients/lstm_1/while/mul_8_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/mul_8_grad/Shape"
  input: "gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_8_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_8_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_8_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_8_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_8_grad/mul/RefEnter"
  input: "lstm_1/while/add_6"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_8_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_8_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_8_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_8_grad/mul/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_8_grad/mul"
  op: "Mul"
  input: "gradients/lstm_1/while/add_7_grad/Reshape"
  input: "gradients/lstm_1/while/mul_8_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_8_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_8_grad/mul"
  input: "gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_8_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_8_grad/Sum"
  input: "gradients/lstm_1/while/mul_8_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_8_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
        s: "loc:@lstm_1/while/mul_8/x"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_8_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_8_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
        s: "loc:@lstm_1/while/mul_8/x"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_8_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_8_grad/mul_1/RefEnter"
  input: "lstm_1/while/mul_8/x"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
        s: "loc:@lstm_1/while/mul_8/x"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_8_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_8_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
        s: "loc:@lstm_1/while/mul_8/x"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_8_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_8_grad/mul_1/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
        s: "loc:@lstm_1/while/mul_8/x"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_8_grad/mul_1"
  op: "Mul"
  input: "gradients/lstm_1/while/mul_8_grad/mul_1/StackPop"
  input: "gradients/lstm_1/while/add_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_8_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_8_grad/mul_1"
  input: "gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_8_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_8_grad/Sum_1"
  input: "gradients/lstm_1/while/mul_8_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_8"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/Shape_2"
  op: "Shape"
  input: "gradients/lstm_1/while/mul_4_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/zeros/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  op: "Fill"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/Shape_2"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/RefEnter"
  input: "lstm_1/while/clip_by_value_1/Minimum"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc_1"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const_2"
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/RefEnter_1"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const_2"
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPush_1"
  op: "StackPush"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/RefEnter_1"
  input: "lstm_1/while/Const_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const_2"
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPop_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const_2"
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPop_1"
  op: "StackPop"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPop_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const_2"
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPop"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual/StackPop_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPop"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/Select"
  op: "Select"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  input: "gradients/lstm_1/while/mul_4_grad/Reshape"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/LogicalNot"
  op: "LogicalNot"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/GreaterEqual"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/Select_1"
  op: "Select"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/LogicalNot"
  input: "gradients/lstm_1/while/mul_4_grad/Reshape"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/Select"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/Sum"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/Select_1"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/Sum_1"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/clip_by_value/Minimum"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/Shape_2"
  op: "Shape"
  input: "gradients/lstm_1/while/mul_6_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/zeros/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/zeros"
  op: "Fill"
  input: "gradients/lstm_1/while/clip_by_value_grad/Shape_2"
  input: "gradients/lstm_1/while/clip_by_value_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/RefEnter"
  input: "lstm_1/while/clip_by_value/Minimum"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc_1"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const"
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/RefEnter_1"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const"
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPush_1"
  op: "StackPush"
  input: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/RefEnter_1"
  input: "lstm_1/while/Const"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const"
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPop_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const"
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPop_1"
  op: "StackPop"
  input: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPop_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const"
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  op: "GreaterEqual"
  input: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPop"
  input: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual/StackPop_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPop"
  input: "gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/Select"
  op: "Select"
  input: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  input: "gradients/lstm_1/while/mul_6_grad/Reshape"
  input: "gradients/lstm_1/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/LogicalNot"
  op: "LogicalNot"
  input: "gradients/lstm_1/while/clip_by_value_grad/GreaterEqual"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/Select_1"
  op: "Select"
  input: "gradients/lstm_1/while/clip_by_value_grad/LogicalNot"
  input: "gradients/lstm_1/while/mul_6_grad/Reshape"
  input: "gradients/lstm_1/while/clip_by_value_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_grad/Select"
  input: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/clip_by_value_grad/Sum"
  input: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_grad/Select_1"
  input: "gradients/lstm_1/while/clip_by_value_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/clip_by_value_grad/Sum_1"
  input: "gradients/lstm_1/while/clip_by_value_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Tanh_grad/TanhGrad"
  op: "TanhGrad"
  input: "gradients/lstm_1/while/mul_6_grad/mul/StackPop"
  input: "gradients/lstm_1/while/mul_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Tanh"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/RefEnter"
  input: "gradients/lstm_1/while/add_6_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/RefEnter_1"
  op: "RefEnter"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPush_1"
  op: "StackPush"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/RefEnter_1"
  input: "gradients/lstm_1/while/add_6_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPop_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPop_1"
  op: "StackPop"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPop_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPop"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPop_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_8_grad/Reshape_1"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_6_grad/Sum"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_8_grad/Reshape_1"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_6_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_6_grad/Sum_1"
  input: "gradients/lstm_1/while/add_6_grad/BroadcastGradientArgs/StackPop_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_6"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  op: "Shape"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  op: "Fill"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_2"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/RefEnter"
  input: "lstm_1/while/add_3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc_1"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const_3"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/RefEnter_1"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const_3"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPush_1"
  op: "StackPush"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/RefEnter_1"
  input: "lstm_1/while/Const_3"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const_3"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPop_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const_3"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPop_1"
  op: "StackPop"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPop_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const_3"
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPop"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual/StackPop_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPop"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select"
  op: "Select"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LogicalNot"
  op: "LogicalNot"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LessEqual"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select_1"
  op: "Select"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/LogicalNot"
  input: "gradients/lstm_1/while/clip_by_value_1_grad/Reshape"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Select_1"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Sum_1"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value_1/Minimum"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Switch_3_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/lstm_1/while/mul_4_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_3"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_2"
  op: "Shape"
  input: "gradients/lstm_1/while/clip_by_value_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros/Const"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  op: "Fill"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_2"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros/Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/RefEnter"
  input: "lstm_1/while/add_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc_1"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const_1"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/RefEnter_1"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const_1"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPush_1"
  op: "StackPush"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/RefEnter_1"
  input: "lstm_1/while/Const_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const_1"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPop_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const_1"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPop_1"
  op: "StackPop"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPop_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Const_1"
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  op: "LessEqual"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPop"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual/StackPop_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/RefEnter"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPop"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Select"
  op: "Select"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  input: "gradients/lstm_1/while/clip_by_value_grad/Reshape"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LogicalNot"
  op: "LogicalNot"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LessEqual"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Select_1"
  op: "Select"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/LogicalNot"
  input: "gradients/lstm_1/while/clip_by_value_grad/Reshape"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/zeros"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Select"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Select_1"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Sum_1"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/clip_by_value/Minimum"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/RefEnter"
  input: "gradients/lstm_1/while/add_4_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/RefEnter_1"
  op: "RefEnter"
  input: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPush_1"
  op: "StackPush"
  input: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/RefEnter_1"
  input: "gradients/lstm_1/while/add_4_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPop_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPop_1"
  op: "StackPop"
  input: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPop_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPop"
  input: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPop_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/Tanh_grad/TanhGrad"
  input: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_4_grad/Sum"
  input: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/Tanh_grad/TanhGrad"
  input: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_4_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_4_grad/Sum_1"
  input: "gradients/lstm_1/while/add_4_grad/BroadcastGradientArgs/StackPop_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_4"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_3_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/RefEnter"
  input: "gradients/lstm_1/while/strided_slice_3_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/f_acc_1"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_3"
        s: "loc:@lstm_1/while/strided_slice_3/stack"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/RefEnter_1"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_3"
        s: "loc:@lstm_1/while/strided_slice_3/stack"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPush_1"
  op: "StackPush"
  input: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/RefEnter_1"
  input: "lstm_1/while/strided_slice_3/stack"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_3"
        s: "loc:@lstm_1/while/strided_slice_3/stack"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPop_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_3"
        s: "loc:@lstm_1/while/strided_slice_3/stack"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPop_1"
  op: "StackPop"
  input: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPop_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_3"
        s: "loc:@lstm_1/while/strided_slice_3/stack"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/f_acc_2"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_3"
        s: "loc:@lstm_1/while/strided_slice_3/stack_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/RefEnter_2"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_3"
        s: "loc:@lstm_1/while/strided_slice_3/stack_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPush_2"
  op: "StackPush"
  input: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/RefEnter_2"
  input: "lstm_1/while/strided_slice_3/stack_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_3"
        s: "loc:@lstm_1/while/strided_slice_3/stack_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPop_2/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_3"
        s: "loc:@lstm_1/while/strided_slice_3/stack_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPop_2"
  op: "StackPop"
  input: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPop_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_3"
        s: "loc:@lstm_1/while/strided_slice_3/stack_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/f_acc_3"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_3"
        s: "loc:@lstm_1/while/strided_slice_3/stack_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/RefEnter_3"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/f_acc_3"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_3"
        s: "loc:@lstm_1/while/strided_slice_3/stack_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPush_3"
  op: "StackPush"
  input: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/RefEnter_3"
  input: "lstm_1/while/strided_slice_3/stack_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_3"
        s: "loc:@lstm_1/while/strided_slice_3/stack_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPop_3/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/f_acc_3"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_3"
        s: "loc:@lstm_1/while/strided_slice_3/stack_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPop_3"
  op: "StackPop"
  input: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPop_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_3"
        s: "loc:@lstm_1/while/strided_slice_3/stack_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPop"
  input: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPop_1"
  input: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPop_2"
  input: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad/StackPop_3"
  input: "gradients/lstm_1/while/add_6_grad/Reshape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "gradients/lstm_1/while/add_6_grad/Reshape_1"
  input: "gradients/lstm_1/while/MatMul_3_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1/RefEnter"
  input: "lstm_1/while/mul_7"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1/StackPop"
  input: "gradients/lstm_1/while/add_6_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/RefEnter"
  input: "gradients/lstm_1/while/add_3_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPop"
  input: "gradients/lstm_1/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_3_grad/Sum"
  input: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value_1/Minimum_grad/Reshape"
  input: "gradients/lstm_1/while/add_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_3_grad/Sum_1"
  input: "gradients/lstm_1/while/add_3_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_3"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/mul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/RefEnter"
  input: "gradients/lstm_1/while/add_1_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPop"
  input: "gradients/lstm_1/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_1_grad/Sum"
  input: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/clip_by_value/Minimum_grad/Reshape"
  input: "gradients/lstm_1/while/add_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_1_grad/Sum_1"
  input: "gradients/lstm_1/while/add_1_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_1"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/RefEnter"
  input: "gradients/lstm_1/while/strided_slice_2_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/f_acc_1"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_2"
        s: "loc:@lstm_1/while/strided_slice_2/stack"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/RefEnter_1"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_2"
        s: "loc:@lstm_1/while/strided_slice_2/stack"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPush_1"
  op: "StackPush"
  input: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/RefEnter_1"
  input: "lstm_1/while/strided_slice_2/stack"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_2"
        s: "loc:@lstm_1/while/strided_slice_2/stack"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPop_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_2"
        s: "loc:@lstm_1/while/strided_slice_2/stack"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPop_1"
  op: "StackPop"
  input: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPop_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_2"
        s: "loc:@lstm_1/while/strided_slice_2/stack"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/f_acc_2"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_2"
        s: "loc:@lstm_1/while/strided_slice_2/stack_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/RefEnter_2"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_2"
        s: "loc:@lstm_1/while/strided_slice_2/stack_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPush_2"
  op: "StackPush"
  input: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/RefEnter_2"
  input: "lstm_1/while/strided_slice_2/stack_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_2"
        s: "loc:@lstm_1/while/strided_slice_2/stack_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPop_2/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_2"
        s: "loc:@lstm_1/while/strided_slice_2/stack_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPop_2"
  op: "StackPop"
  input: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPop_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_2"
        s: "loc:@lstm_1/while/strided_slice_2/stack_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/f_acc_3"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_2"
        s: "loc:@lstm_1/while/strided_slice_2/stack_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/RefEnter_3"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/f_acc_3"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_2"
        s: "loc:@lstm_1/while/strided_slice_2/stack_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPush_3"
  op: "StackPush"
  input: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/RefEnter_3"
  input: "lstm_1/while/strided_slice_2/stack_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_2"
        s: "loc:@lstm_1/while/strided_slice_2/stack_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPop_3/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/f_acc_3"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_2"
        s: "loc:@lstm_1/while/strided_slice_2/stack_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPop_3"
  op: "StackPop"
  input: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPop_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_2"
        s: "loc:@lstm_1/while/strided_slice_2/stack_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPop"
  input: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPop_1"
  input: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPop_2"
  input: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad/StackPop_3"
  input: "gradients/lstm_1/while/add_4_grad/Reshape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "gradients/lstm_1/while/add_4_grad/Reshape_1"
  input: "gradients/lstm_1/while/MatMul_2_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2_grad/MatMul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2_grad/MatMul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/MatMul_2_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2_grad/MatMul_1/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/MatMul_2_grad/MatMul_1/RefEnter"
  input: "lstm_1/while/mul_5"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2_grad/MatMul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/MatMul_2_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2_grad/MatMul_1/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/MatMul_2_grad/MatMul_1/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/lstm_1/while/MatMul_2_grad/MatMul_1/StackPop"
  input: "gradients/lstm_1/while/add_4_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_7_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_7_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/RefEnter"
  input: "gradients/lstm_1/while/mul_7_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/StackPop"
  input: "gradients/lstm_1/while/mul_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_7_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
        s: "loc:@lstm_1/while/mul_7/y"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_7_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_7_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
        s: "loc:@lstm_1/while/mul_7/y"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_7_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_7_grad/mul/RefEnter"
  input: "lstm_1/while/mul_7/y"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
        s: "loc:@lstm_1/while/mul_7/y"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_7_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_7_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
        s: "loc:@lstm_1/while/mul_7/y"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_7_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_7_grad/mul/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
        s: "loc:@lstm_1/while/mul_7/y"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_7_grad/mul"
  op: "Mul"
  input: "gradients/lstm_1/while/MatMul_3_grad/MatMul"
  input: "gradients/lstm_1/while/mul_7_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_7_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_7_grad/mul"
  input: "gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_7_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_7_grad/Sum"
  input: "gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_7_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_2"
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_7_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_7_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_2"
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_7_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_7_grad/mul_1/RefEnter"
  input: "lstm_1/while/Identity_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_2"
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_7_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_7_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_2"
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_7_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_7_grad/mul_1/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Identity_2"
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_7_grad/mul_1"
  op: "Mul"
  input: "gradients/lstm_1/while/mul_7_grad/mul_1/StackPop"
  input: "gradients/lstm_1/while/MatMul_3_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_7_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_7_grad/mul_1"
  input: "gradients/lstm_1/while/mul_7_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_7_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_7_grad/Sum_1"
  input: "gradients/lstm_1/while/mul_7_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_1"
  input: "gradients/lstm_1/while/MatMul_3/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3/Enter_grad/Add"
  op: "Add"
  input: "gradients/lstm_1/while/MatMul_3/Enter_grad/Switch:1"
  input: "gradients/lstm_1/while/MatMul_3_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/lstm_1/while/MatMul_3/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/lstm_1/while/MatMul_3/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_3/Enter"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/RefEnter"
  input: "gradients/lstm_1/while/mul_3_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/mul_3_grad/Shape"
  input: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_3_grad/mul/RefEnter"
  input: "lstm_1/while/add_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_3_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_3_grad/mul/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/mul"
  op: "Mul"
  input: "gradients/lstm_1/while/add_3_grad/Reshape"
  input: "gradients/lstm_1/while/mul_3_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_3_grad/mul"
  input: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_3_grad/Sum"
  input: "gradients/lstm_1/while/mul_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
        s: "loc:@lstm_1/while/mul_3/x"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
        s: "loc:@lstm_1/while/mul_3/x"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_3_grad/mul_1/RefEnter"
  input: "lstm_1/while/mul_3/x"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
        s: "loc:@lstm_1/while/mul_3/x"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_3_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
        s: "loc:@lstm_1/while/mul_3/x"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_3_grad/mul_1/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
        s: "loc:@lstm_1/while/mul_3/x"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/mul_1"
  op: "Mul"
  input: "gradients/lstm_1/while/mul_3_grad/mul_1/StackPop"
  input: "gradients/lstm_1/while/add_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_3_grad/mul_1"
  input: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_3_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_3_grad/Sum_1"
  input: "gradients/lstm_1/while/mul_3_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_3"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/Shape"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/RefEnter"
  input: "gradients/lstm_1/while/mul_1_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/mul_1_grad/Shape"
  input: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_1_grad/mul/RefEnter"
  input: "lstm_1/while/add"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_1_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_1_grad/mul/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/mul"
  op: "Mul"
  input: "gradients/lstm_1/while/add_1_grad/Reshape"
  input: "gradients/lstm_1/while/mul_1_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_1_grad/mul"
  input: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_1_grad/Sum"
  input: "gradients/lstm_1/while/mul_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/mul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
        s: "loc:@lstm_1/while/mul_1/x"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/mul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
        s: "loc:@lstm_1/while/mul_1/x"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/mul_1/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_1_grad/mul_1/RefEnter"
  input: "lstm_1/while/mul_1/x"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
        s: "loc:@lstm_1/while/mul_1/x"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/mul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_1_grad/mul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
        s: "loc:@lstm_1/while/mul_1/x"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/mul_1/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_1_grad/mul_1/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
        s: "loc:@lstm_1/while/mul_1/x"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/mul_1"
  op: "Mul"
  input: "gradients/lstm_1/while/mul_1_grad/mul_1/StackPop"
  input: "gradients/lstm_1/while/add_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_1_grad/mul_1"
  input: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_1_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_1_grad/Sum_1"
  input: "gradients/lstm_1/while/mul_1_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_1"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/RefEnter"
  input: "gradients/lstm_1/while/mul_5_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPop"
  input: "gradients/lstm_1/while/mul_5_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
        s: "loc:@lstm_1/while/mul_5/y"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
        s: "loc:@lstm_1/while/mul_5/y"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_5_grad/mul/RefEnter"
  input: "lstm_1/while/mul_5/y"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
        s: "loc:@lstm_1/while/mul_5/y"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_5_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
        s: "loc:@lstm_1/while/mul_5/y"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_5_grad/mul/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
        s: "loc:@lstm_1/while/mul_5/y"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/mul"
  op: "Mul"
  input: "gradients/lstm_1/while/MatMul_2_grad/MatMul"
  input: "gradients/lstm_1/while/mul_5_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_5_grad/mul"
  input: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_5_grad/Sum"
  input: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/mul_1"
  op: "Mul"
  input: "gradients/lstm_1/while/mul_7_grad/mul_1/StackPop"
  input: "gradients/lstm_1/while/MatMul_2_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_5_grad/mul_1"
  input: "gradients/lstm_1/while/mul_5_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_5_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_5_grad/Sum_1"
  input: "gradients/lstm_1/while/mul_5_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_5"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_1"
  input: "gradients/lstm_1/while/MatMul_2/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2/Enter_grad/Add"
  op: "Add"
  input: "gradients/lstm_1/while/MatMul_2/Enter_grad/Switch:1"
  input: "gradients/lstm_1/while/MatMul_2_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/lstm_1/while/MatMul_2/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/lstm_1/while/MatMul_2/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_2/Enter"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_7_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_7_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_7_grad/Shape"
  input: "lstm_1/strided_slice_7/stack"
  input: "lstm_1/strided_slice_7/stack_1"
  input: "lstm_1/strided_slice_7/stack_2"
  input: "gradients/lstm_1/while/MatMul_3/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/RefEnter"
  input: "gradients/lstm_1/while/add_2_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/RefEnter_1"
  op: "RefEnter"
  input: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPush_1"
  op: "StackPush"
  input: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/RefEnter_1"
  input: "gradients/lstm_1/while/add_2_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPop_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPop_1"
  op: "StackPop"
  input: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPop_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPop"
  input: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPop_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_3_grad/Reshape_1"
  input: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_2_grad/Sum"
  input: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_3_grad/Reshape_1"
  input: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_2_grad/Sum_1"
  input: "gradients/lstm_1/while/add_2_grad/BroadcastGradientArgs/StackPop_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add_2"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_grad/Shape_1"
  op: "Shape"
  input: "lstm_1/while/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_grad/BroadcastGradientArgs/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/add_grad/BroadcastGradientArgs/RefEnter"
  input: "gradients/lstm_1/while/add_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc_1"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_grad/BroadcastGradientArgs/RefEnter_1"
  op: "RefEnter"
  input: "gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPush_1"
  op: "StackPush"
  input: "gradients/lstm_1/while/add_grad/BroadcastGradientArgs/RefEnter_1"
  input: "gradients/lstm_1/while/add_grad/Shape_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPop_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/add_grad/BroadcastGradientArgs/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPop_1"
  op: "StackPop"
  input: "gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPop_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPop"
  input: "gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPop_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_1_grad/Reshape_1"
  input: "gradients/lstm_1/while/add_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_grad/Sum"
  input: "gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_1_grad/Reshape_1"
  input: "gradients/lstm_1/while/add_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/add_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/add_grad/Sum_1"
  input: "gradients/lstm_1/while/add_grad/BroadcastGradientArgs/StackPop_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/add"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_6_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_6_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_6_grad/Shape"
  input: "lstm_1/strided_slice_6/stack"
  input: "lstm_1/strided_slice_6/stack_1"
  input: "lstm_1/strided_slice_6/stack_2"
  input: "gradients/lstm_1/while/MatMul_2/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_6"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_1_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/RefEnter"
  input: "gradients/lstm_1/while/strided_slice_1_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/f_acc_1"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_1"
        s: "loc:@lstm_1/while/strided_slice_1/stack"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/RefEnter_1"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_1"
        s: "loc:@lstm_1/while/strided_slice_1/stack"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPush_1"
  op: "StackPush"
  input: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/RefEnter_1"
  input: "lstm_1/while/strided_slice_1/stack"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_1"
        s: "loc:@lstm_1/while/strided_slice_1/stack"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPop_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_1"
        s: "loc:@lstm_1/while/strided_slice_1/stack"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPop_1"
  op: "StackPop"
  input: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPop_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_1"
        s: "loc:@lstm_1/while/strided_slice_1/stack"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/f_acc_2"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_1"
        s: "loc:@lstm_1/while/strided_slice_1/stack_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/RefEnter_2"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_1"
        s: "loc:@lstm_1/while/strided_slice_1/stack_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPush_2"
  op: "StackPush"
  input: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/RefEnter_2"
  input: "lstm_1/while/strided_slice_1/stack_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_1"
        s: "loc:@lstm_1/while/strided_slice_1/stack_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPop_2/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_1"
        s: "loc:@lstm_1/while/strided_slice_1/stack_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPop_2"
  op: "StackPop"
  input: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPop_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_1"
        s: "loc:@lstm_1/while/strided_slice_1/stack_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/f_acc_3"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_1"
        s: "loc:@lstm_1/while/strided_slice_1/stack_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/RefEnter_3"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/f_acc_3"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_1"
        s: "loc:@lstm_1/while/strided_slice_1/stack_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPush_3"
  op: "StackPush"
  input: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/RefEnter_3"
  input: "lstm_1/while/strided_slice_1/stack_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_1"
        s: "loc:@lstm_1/while/strided_slice_1/stack_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPop_3/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/f_acc_3"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_1"
        s: "loc:@lstm_1/while/strided_slice_1/stack_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPop_3"
  op: "StackPop"
  input: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPop_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_1"
        s: "loc:@lstm_1/while/strided_slice_1/stack_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPop"
  input: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPop_1"
  input: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPop_2"
  input: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad/StackPop_3"
  input: "gradients/lstm_1/while/add_2_grad/Reshape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "gradients/lstm_1/while/add_2_grad/Reshape_1"
  input: "gradients/lstm_1/while/MatMul_1_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1_grad/MatMul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1_grad/MatMul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/MatMul_1_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1_grad/MatMul_1/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/MatMul_1_grad/MatMul_1/RefEnter"
  input: "lstm_1/while/mul_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1_grad/MatMul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/MatMul_1_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1_grad/MatMul_1/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/MatMul_1_grad/MatMul_1/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/lstm_1/while/MatMul_1_grad/MatMul_1/StackPop"
  input: "gradients/lstm_1/while/add_2_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/TensorArrayReadV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/RefEnter"
  input: "gradients/lstm_1/while/strided_slice_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/f_acc_1"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice"
        s: "loc:@lstm_1/while/strided_slice/stack"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/RefEnter_1"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice"
        s: "loc:@lstm_1/while/strided_slice/stack"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPush_1"
  op: "StackPush"
  input: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/RefEnter_1"
  input: "lstm_1/while/strided_slice/stack"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice"
        s: "loc:@lstm_1/while/strided_slice/stack"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPop_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/f_acc_1"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice"
        s: "loc:@lstm_1/while/strided_slice/stack"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPop_1"
  op: "StackPop"
  input: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPop_1/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice"
        s: "loc:@lstm_1/while/strided_slice/stack"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/f_acc_2"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice"
        s: "loc:@lstm_1/while/strided_slice/stack_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/RefEnter_2"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice"
        s: "loc:@lstm_1/while/strided_slice/stack_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPush_2"
  op: "StackPush"
  input: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/RefEnter_2"
  input: "lstm_1/while/strided_slice/stack_1"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice"
        s: "loc:@lstm_1/while/strided_slice/stack_1"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPop_2/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/f_acc_2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice"
        s: "loc:@lstm_1/while/strided_slice/stack_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPop_2"
  op: "StackPop"
  input: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPop_2/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice"
        s: "loc:@lstm_1/while/strided_slice/stack_1"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/f_acc_3"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice"
        s: "loc:@lstm_1/while/strided_slice/stack_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/RefEnter_3"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/f_acc_3"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice"
        s: "loc:@lstm_1/while/strided_slice/stack_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPush_3"
  op: "StackPush"
  input: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/RefEnter_3"
  input: "lstm_1/while/strided_slice/stack_2"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice"
        s: "loc:@lstm_1/while/strided_slice/stack_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPop_3/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/f_acc_3"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice"
        s: "loc:@lstm_1/while/strided_slice/stack_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPop_3"
  op: "StackPop"
  input: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPop_3/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice"
        s: "loc:@lstm_1/while/strided_slice/stack_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPop"
  input: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPop_1"
  input: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPop_2"
  input: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad/StackPop_3"
  input: "gradients/lstm_1/while/add_grad/Reshape"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_grad/MatMul/Enter"
  op: "Enter"
  input: "lstm_1/strided_slice_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/lstm_1/while/add_grad/Reshape_1"
  input: "gradients/lstm_1/while/MatMul_grad/MatMul/Enter"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_grad/MatMul_1/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_grad/MatMul_1/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_grad/MatMul_1/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/MatMul_grad/MatMul_1/RefEnter"
  input: "lstm_1/while/mul"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_grad/MatMul_1/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/MatMul_grad/MatMul_1/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_grad/MatMul_1/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/MatMul_grad/MatMul_1/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "gradients/lstm_1/while/MatMul_grad/MatMul_1/StackPop"
  input: "gradients/lstm_1/while/add_grad/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/RefEnter"
  input: "gradients/lstm_1/while/mul_2_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPop"
  input: "gradients/lstm_1/while/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
        s: "loc:@lstm_1/while/mul_2/y"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
        s: "loc:@lstm_1/while/mul_2/y"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_2_grad/mul/RefEnter"
  input: "lstm_1/while/mul_2/y"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
        s: "loc:@lstm_1/while/mul_2/y"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_2_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
        s: "loc:@lstm_1/while/mul_2/y"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_2_grad/mul/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
        s: "loc:@lstm_1/while/mul_2/y"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/mul"
  op: "Mul"
  input: "gradients/lstm_1/while/MatMul_1_grad/MatMul"
  input: "gradients/lstm_1/while/mul_2_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_2_grad/mul"
  input: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_2_grad/Sum"
  input: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/mul_1"
  op: "Mul"
  input: "gradients/lstm_1/while/mul_7_grad/mul_1/StackPop"
  input: "gradients/lstm_1/while/MatMul_1_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_2_grad/mul_1"
  input: "gradients/lstm_1/while/mul_2_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_2_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_2_grad/Sum_1"
  input: "gradients/lstm_1/while/mul_2_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_2"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_1"
  input: "gradients/lstm_1/while/MatMul_1/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1/Enter_grad/Add"
  op: "Add"
  input: "gradients/lstm_1/while/MatMul_1/Enter_grad/Switch:1"
  input: "gradients/lstm_1/while/MatMul_1_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/lstm_1/while/MatMul_1/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/lstm_1/while/MatMul_1/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul_1/Enter"
      }
    }
  }
}
node {
  name: "gradients/AddN_3"
  op: "AddN"
  input: "gradients/lstm_1/while/strided_slice_3_grad/StridedSliceGrad"
  input: "gradients/lstm_1/while/strided_slice_2_grad/StridedSliceGrad"
  input: "gradients/lstm_1/while/strided_slice_1_grad/StridedSliceGrad"
  input: "gradients/lstm_1/while/strided_slice_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/strided_slice_3"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  op: "Enter"
  input: "lstm_1/TensorArray_1"
  attr {
    key: "T"
    value {
      type: DT_RESOURCE
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  op: "Enter"
  input: "lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter"
  input: "gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3/Enter_1"
  input: "^gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  op: "TensorArrayWriteV3"
  input: "gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "gradients/lstm_1/while/TensorArrayWrite/TensorArrayWriteV3_grad/TensorArrayReadV3/StackPop"
  input: "gradients/AddN_3"
  input: "gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/Shape"
  op: "Shape"
  input: "lstm_1/while/Identity_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/Shape_1"
  op: "Const"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
          }
        }
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/RefEnter"
  input: "gradients/lstm_1/while/mul_grad/Shape"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs"
  op: "BroadcastGradientArgs"
  input: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPop"
  input: "gradients/lstm_1/while/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/mul/f_acc"
  op: "Stack"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
        s: "loc:@lstm_1/while/mul/y"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "stack_name"
    value {
      s: ""
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/mul/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
        s: "loc:@lstm_1/while/mul/y"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/mul/StackPush"
  op: "StackPush"
  input: "gradients/lstm_1/while/mul_grad/mul/RefEnter"
  input: "lstm_1/while/mul/y"
  input: "^gradients/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
        s: "loc:@lstm_1/while/mul/y"
      }
    }
  }
  attr {
    key: "swap_memory"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/mul/StackPop/RefEnter"
  op: "RefEnter"
  input: "gradients/lstm_1/while/mul_grad/mul/f_acc"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
        s: "loc:@lstm_1/while/mul/y"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: true
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/mul/StackPop"
  op: "StackPop"
  input: "gradients/lstm_1/while/mul_grad/mul/StackPop/RefEnter"
  input: "^gradients/Sub"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
        s: "loc:@lstm_1/while/mul/y"
      }
    }
  }
  attr {
    key: "elem_type"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/mul"
  op: "Mul"
  input: "gradients/lstm_1/while/MatMul_grad/MatMul"
  input: "gradients/lstm_1/while/mul_grad/mul/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/Sum"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_grad/mul"
  input: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_grad/Sum"
  input: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs/StackPop"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/mul_1"
  op: "Mul"
  input: "gradients/lstm_1/while/mul_7_grad/mul_1/StackPop"
  input: "gradients/lstm_1/while/MatMul_grad/MatMul"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/Sum_1"
  op: "Sum"
  input: "gradients/lstm_1/while/mul_grad/mul_1"
  input: "gradients/lstm_1/while/mul_grad/BroadcastGradientArgs:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/while/mul_grad/Reshape_1"
  op: "Reshape"
  input: "gradients/lstm_1/while/mul_grad/Sum_1"
  input: "gradients/lstm_1/while/mul_grad/Shape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul/Enter_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 64
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul/Enter_grad/b_acc_1"
  op: "Enter"
  input: "gradients/lstm_1/while/MatMul/Enter_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul/Enter_grad/b_acc_2"
  op: "Merge"
  input: "gradients/lstm_1/while/MatMul/Enter_grad/b_acc_1"
  input: "gradients/lstm_1/while/MatMul/Enter_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul/Enter_grad/Switch"
  op: "Switch"
  input: "gradients/lstm_1/while/MatMul/Enter_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul/Enter_grad/Add"
  op: "Add"
  input: "gradients/lstm_1/while/MatMul/Enter_grad/Switch:1"
  input: "gradients/lstm_1/while/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul/Enter_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/lstm_1/while/MatMul/Enter_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/MatMul/Enter_grad/b_acc_3"
  op: "Exit"
  input: "gradients/lstm_1/while/MatMul/Enter_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/MatMul/Enter"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_5_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_5_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_5_grad/Shape"
  input: "lstm_1/strided_slice_5/stack"
  input: "lstm_1/strided_slice_5/stack_1"
  input: "lstm_1/strided_slice_5/stack_2"
  input: "gradients/lstm_1/while/MatMul_1/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_5"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  op: "Enter"
  input: "gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
  attr {
    key: "frame_name"
    value {
      s: "gradients/lstm_1/while/lstm_1/while/"
    }
  }
  attr {
    key: "is_constant"
    value {
      b: false
    }
  }
  attr {
    key: "parallel_iterations"
    value {
      i: 32
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  op: "Merge"
  input: "gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_1"
  input: "gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/Switch"
  op: "Switch"
  input: "gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_2"
  input: "gradients/b_count_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/Add"
  op: "Add"
  input: "gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/Switch:1"
  input: "gradients/lstm_1/while/TensorArrayReadV3_grad/TensorArrayWrite/TensorArrayWriteV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/NextIteration"
  op: "NextIteration"
  input: "gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/Add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  op: "Exit"
  input: "gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/Switch"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/TensorArrayReadV3/Enter_1"
      }
    }
  }
}
node {
  name: "gradients/AddN_4"
  op: "AddN"
  input: "gradients/lstm_1/while/mul_7_grad/Reshape"
  input: "gradients/lstm_1/while/mul_5_grad/Reshape"
  input: "gradients/lstm_1/while/mul_2_grad/Reshape"
  input: "gradients/lstm_1/while/mul_grad/Reshape"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/mul_7"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_4_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_4_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_4_grad/Shape"
  input: "lstm_1/strided_slice_4/stack"
  input: "lstm_1/strided_slice_4/stack_1"
  input: "lstm_1/strided_slice_4/stack_2"
  input: "gradients/lstm_1/while/MatMul/Enter_grad/b_acc_3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_4"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  op: "TensorArrayGradV3"
  input: "lstm_1/TensorArray_1"
  input: "gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray_1"
        s: "loc:@lstm_1/transpose"
      }
    }
  }
  attr {
    key: "source"
    value {
      s: "gradients"
    }
  }
}
node {
  name: "gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  op: "Identity"
  input: "gradients/lstm_1/while/TensorArrayReadV3/Enter_1_grad/b_acc_3"
  input: "^gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/TensorArray_1"
        s: "loc:@lstm_1/transpose"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  op: "TensorArrayGatherV3"
  input: "gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/TensorArrayGradV3"
  input: "lstm_1/TensorArrayUnstack/range"
  input: "gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGrad/gradient_flow"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "element_shape"
    value {
      shape {
        unknown_rank: true
      }
    }
  }
}
node {
  name: "gradients/lstm_1/while/Switch_2_grad_1/NextIteration"
  op: "NextIteration"
  input: "gradients/AddN_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/while/Merge_2"
      }
    }
  }
}
node {
  name: "gradients/AddN_5"
  op: "AddN"
  input: "gradients/lstm_1/strided_slice_7_grad/StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_6_grad/StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_5_grad/StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_4_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_7"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/transpose_grad/InvertPermutation"
  op: "InvertPermutation"
  input: "lstm_1/transpose/perm"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/transpose_grad/transpose"
  op: "Transpose"
  input: "gradients/lstm_1/TensorArrayUnstack/TensorArrayScatter/TensorArrayScatterV3_grad/TensorArrayGatherV3"
  input: "gradients/lstm_1/transpose_grad/InvertPermutation"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tperm"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/transpose"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/concat_grad/Rank"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/concat"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: 3
      }
    }
  }
}
node {
  name: "gradients/lstm_1/concat_grad/mod"
  op: "FloorMod"
  input: "lstm_1/concat/axis"
  input: "gradients/lstm_1/concat_grad/Rank"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/concat"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/concat_grad/Shape"
  op: "Shape"
  input: "lstm_1/Reshape_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/concat"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/concat_grad/ShapeN"
  op: "ShapeN"
  input: "lstm_1/Reshape_1"
  input: "lstm_1/Reshape_3"
  input: "lstm_1/Reshape_5"
  input: "lstm_1/Reshape_7"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/concat"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/concat_grad/ConcatOffset"
  op: "ConcatOffset"
  input: "gradients/lstm_1/concat_grad/mod"
  input: "gradients/lstm_1/concat_grad/ShapeN"
  input: "gradients/lstm_1/concat_grad/ShapeN:1"
  input: "gradients/lstm_1/concat_grad/ShapeN:2"
  input: "gradients/lstm_1/concat_grad/ShapeN:3"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/concat"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/concat_grad/Slice"
  op: "Slice"
  input: "gradients/lstm_1/transpose_grad/transpose"
  input: "gradients/lstm_1/concat_grad/ConcatOffset"
  input: "gradients/lstm_1/concat_grad/ShapeN"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/concat"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/concat_grad/Slice_1"
  op: "Slice"
  input: "gradients/lstm_1/transpose_grad/transpose"
  input: "gradients/lstm_1/concat_grad/ConcatOffset:1"
  input: "gradients/lstm_1/concat_grad/ShapeN:1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/concat"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/concat_grad/Slice_2"
  op: "Slice"
  input: "gradients/lstm_1/transpose_grad/transpose"
  input: "gradients/lstm_1/concat_grad/ConcatOffset:2"
  input: "gradients/lstm_1/concat_grad/ShapeN:2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/concat"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/concat_grad/Slice_3"
  op: "Slice"
  input: "gradients/lstm_1/transpose_grad/transpose"
  input: "gradients/lstm_1/concat_grad/ConcatOffset:3"
  input: "gradients/lstm_1/concat_grad/ShapeN:3"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/concat"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/Reshape_1_grad/Shape"
  op: "Shape"
  input: "lstm_1/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Reshape_1"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/Reshape_1_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/concat_grad/Slice"
  input: "gradients/lstm_1/Reshape_1_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Reshape_1"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/Reshape_3_grad/Shape"
  op: "Shape"
  input: "lstm_1/BiasAdd_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Reshape_3"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/Reshape_3_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/concat_grad/Slice_1"
  input: "gradients/lstm_1/Reshape_3_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Reshape_3"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/Reshape_5_grad/Shape"
  op: "Shape"
  input: "lstm_1/BiasAdd_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Reshape_5"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/Reshape_5_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/concat_grad/Slice_2"
  input: "gradients/lstm_1/Reshape_5_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Reshape_5"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/Reshape_7_grad/Shape"
  op: "Shape"
  input: "lstm_1/BiasAdd_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Reshape_7"
      }
    }
  }
  attr {
    key: "out_type"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "gradients/lstm_1/Reshape_7_grad/Reshape"
  op: "Reshape"
  input: "gradients/lstm_1/concat_grad/Slice_3"
  input: "gradients/lstm_1/Reshape_7_grad/Shape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tshape"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/Reshape_7"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/BiasAdd_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/lstm_1/Reshape_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/BiasAdd"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/lstm_1/BiasAdd_1_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/lstm_1/Reshape_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/BiasAdd_1"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/lstm_1/BiasAdd_2_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/lstm_1/Reshape_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/BiasAdd_2"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/lstm_1/BiasAdd_3_grad/BiasAddGrad"
  op: "BiasAddGrad"
  input: "gradients/lstm_1/Reshape_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/BiasAdd_3"
      }
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "gradients/lstm_1/MatMul_grad/MatMul"
  op: "MatMul"
  input: "gradients/lstm_1/Reshape_1_grad/Reshape"
  input: "lstm_1/strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/MatMul_grad/MatMul_1"
  op: "MatMul"
  input: "lstm_1/Reshape"
  input: "gradients/lstm_1/Reshape_1_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/MatMul"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_8_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_8_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_8_grad/Shape"
  input: "lstm_1/strided_slice_8/stack"
  input: "lstm_1/strided_slice_8/stack_1"
  input: "lstm_1/strided_slice_8/stack_2"
  input: "gradients/lstm_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_8"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lstm_1/MatMul_1_grad/MatMul"
  op: "MatMul"
  input: "gradients/lstm_1/Reshape_3_grad/Reshape"
  input: "lstm_1/strided_slice_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/MatMul_1_grad/MatMul_1"
  op: "MatMul"
  input: "lstm_1/Reshape_2"
  input: "gradients/lstm_1/Reshape_3_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/MatMul_1"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_9_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_9_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_9_grad/Shape"
  input: "lstm_1/strided_slice_9/stack"
  input: "lstm_1/strided_slice_9/stack_1"
  input: "lstm_1/strided_slice_9/stack_2"
  input: "gradients/lstm_1/BiasAdd_1_grad/BiasAddGrad"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_9"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lstm_1/MatMul_2_grad/MatMul"
  op: "MatMul"
  input: "gradients/lstm_1/Reshape_5_grad/Reshape"
  input: "lstm_1/strided_slice_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/MatMul_2_grad/MatMul_1"
  op: "MatMul"
  input: "lstm_1/Reshape_4"
  input: "gradients/lstm_1/Reshape_5_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/MatMul_2"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_10_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_10_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_10_grad/Shape"
  input: "lstm_1/strided_slice_10/stack"
  input: "lstm_1/strided_slice_10/stack_1"
  input: "lstm_1/strided_slice_10/stack_2"
  input: "gradients/lstm_1/BiasAdd_2_grad/BiasAddGrad"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_10"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lstm_1/MatMul_3_grad/MatMul"
  op: "MatMul"
  input: "gradients/lstm_1/Reshape_7_grad/Reshape"
  input: "lstm_1/strided_slice_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: false
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: true
    }
  }
}
node {
  name: "gradients/lstm_1/MatMul_3_grad/MatMul_1"
  op: "MatMul"
  input: "lstm_1/Reshape_6"
  input: "gradients/lstm_1/Reshape_7_grad/Reshape"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/MatMul_3"
      }
    }
  }
  attr {
    key: "transpose_a"
    value {
      b: true
    }
  }
  attr {
    key: "transpose_b"
    value {
      b: false
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_11_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 256
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_11_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_11_grad/Shape"
  input: "lstm_1/strided_slice_11/stack"
  input: "lstm_1/strided_slice_11/stack_1"
  input: "lstm_1/strided_slice_11/stack_2"
  input: "gradients/lstm_1/BiasAdd_3_grad/BiasAddGrad"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_11"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_grad/Shape"
  input: "lstm_1/strided_slice/stack"
  input: "lstm_1/strided_slice/stack_1"
  input: "lstm_1/strided_slice/stack_2"
  input: "gradients/lstm_1/MatMul_grad/MatMul_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_1_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_1_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_1_grad/Shape"
  input: "lstm_1/strided_slice_1/stack"
  input: "lstm_1/strided_slice_1/stack_1"
  input: "lstm_1/strided_slice_1/stack_2"
  input: "gradients/lstm_1/MatMul_1_grad/MatMul_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_1"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_2_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_2_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_2_grad/Shape"
  input: "lstm_1/strided_slice_2/stack"
  input: "lstm_1/strided_slice_2/stack_1"
  input: "lstm_1/strided_slice_2/stack_2"
  input: "gradients/lstm_1/MatMul_2_grad/MatMul_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_2"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_3_grad/Shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\003\000\000\000\000\001\000\000"
      }
    }
  }
}
node {
  name: "gradients/lstm_1/strided_slice_3_grad/StridedSliceGrad"
  op: "StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_3_grad/Shape"
  input: "lstm_1/strided_slice_3/stack"
  input: "lstm_1/strided_slice_3/stack_1"
  input: "lstm_1/strided_slice_3/stack_2"
  input: "gradients/lstm_1/MatMul_3_grad/MatMul_1"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_3"
      }
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 1
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 3
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 0
    }
  }
}
node {
  name: "gradients/AddN_6"
  op: "AddN"
  input: "gradients/lstm_1/strided_slice_8_grad/StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_9_grad/StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_10_grad/StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_11_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice_8"
      }
    }
  }
}
node {
  name: "gradients/AddN_7"
  op: "AddN"
  input: "gradients/lstm_1/strided_slice_grad/StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_1_grad/StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_2_grad/StridedSliceGrad"
  input: "gradients/lstm_1/strided_slice_3_grad/StridedSliceGrad"
  attr {
    key: "N"
    value {
      i: 4
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/strided_slice"
      }
    }
  }
}
node {
  name: "Const_4"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Variable"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Variable/Assign"
  op: "Assign"
  input: "Variable"
  input: "Const_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Variable/read"
  op: "Identity"
  input: "Variable"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
}
node {
  name: "Const_5"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 20
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Variable_1"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 20
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Variable_1/Assign"
  op: "Assign"
  input: "Variable_1"
  input: "Const_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Variable_1/read"
  op: "Identity"
  input: "Variable_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable_1"
      }
    }
  }
}
node {
  name: "Const_6"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Variable_2"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Variable_2/Assign"
  op: "Assign"
  input: "Variable_2"
  input: "Const_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Variable_2/read"
  op: "Identity"
  input: "Variable_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable_2"
      }
    }
  }
}
node {
  name: "Const_7"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 3
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Variable_3"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Variable_3/Assign"
  op: "Assign"
  input: "Variable_3"
  input: "Const_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Variable_3/read"
  op: "Identity"
  input: "Variable_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable_3"
      }
    }
  }
}
node {
  name: "Const_8"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
          dim {
            size: 64
          }
          dim {
            size: 256
          }
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Variable_4"
  op: "VariableV2"
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "Variable_4/Assign"
  op: "Assign"
  input: "Variable_4"
  input: "Const_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Variable_4/read"
  op: "Identity"
  input: "Variable_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable_4"
      }
    }
  }
}
node {
  name: "mul_3"
  op: "Mul"
  input: "rho/read"
  input: "Variable/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sub_1/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "sub_1"
  op: "Sub"
  input: "sub_1/x"
  input: "rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Square"
  op: "Square"
  input: "gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul_4"
  op: "Mul"
  input: "sub_1"
  input: "Square"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add"
  op: "Add"
  input: "mul_3"
  input: "mul_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Assign_4"
  op: "Assign"
  input: "Variable"
  input: "add"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mul_5"
  op: "Mul"
  input: "lr/read"
  input: "gradients/dense_1/BiasAdd_grad/BiasAddGrad"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const_9"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Const_10"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "clip_by_value_1/Minimum"
  op: "Minimum"
  input: "add"
  input: "Const_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_value_1"
  op: "Maximum"
  input: "clip_by_value_1/Minimum"
  input: "Const_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Sqrt"
  op: "Sqrt"
  input: "clip_by_value_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add_1/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "add_1"
  op: "Add"
  input: "Sqrt"
  input: "add_1/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "truediv_2"
  op: "RealDiv"
  input: "mul_5"
  input: "add_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sub_2"
  op: "Sub"
  input: "dense_1/bias/read"
  input: "truediv_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Assign_5"
  op: "Assign"
  input: "dense_1/bias"
  input: "sub_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mul_6"
  op: "Mul"
  input: "rho/read"
  input: "Variable_1/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sub_3/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "sub_3"
  op: "Sub"
  input: "sub_3/x"
  input: "rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Square_1"
  op: "Square"
  input: "gradients/dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul_7"
  op: "Mul"
  input: "sub_3"
  input: "Square_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add_2"
  op: "Add"
  input: "mul_6"
  input: "mul_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Assign_6"
  op: "Assign"
  input: "Variable_1"
  input: "add_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mul_8"
  op: "Mul"
  input: "lr/read"
  input: "gradients/dense_1/MatMul_grad/MatMul_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const_11"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Const_12"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "clip_by_value_2/Minimum"
  op: "Minimum"
  input: "add_2"
  input: "Const_12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_value_2"
  op: "Maximum"
  input: "clip_by_value_2/Minimum"
  input: "Const_11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Sqrt_1"
  op: "Sqrt"
  input: "clip_by_value_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add_3/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "add_3"
  op: "Add"
  input: "Sqrt_1"
  input: "add_3/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "truediv_3"
  op: "RealDiv"
  input: "mul_8"
  input: "add_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sub_4"
  op: "Sub"
  input: "dense_1/kernel/read"
  input: "truediv_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Assign_7"
  op: "Assign"
  input: "dense_1/kernel"
  input: "sub_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@dense_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mul_9"
  op: "Mul"
  input: "rho/read"
  input: "Variable_2/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sub_5/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "sub_5"
  op: "Sub"
  input: "sub_5/x"
  input: "rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Square_2"
  op: "Square"
  input: "gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul_10"
  op: "Mul"
  input: "sub_5"
  input: "Square_2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add_4"
  op: "Add"
  input: "mul_9"
  input: "mul_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Assign_8"
  op: "Assign"
  input: "Variable_2"
  input: "add_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mul_11"
  op: "Mul"
  input: "lr/read"
  input: "gradients/AddN_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const_13"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Const_14"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "clip_by_value_3/Minimum"
  op: "Minimum"
  input: "add_4"
  input: "Const_14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_value_3"
  op: "Maximum"
  input: "clip_by_value_3/Minimum"
  input: "Const_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Sqrt_2"
  op: "Sqrt"
  input: "clip_by_value_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add_5/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "add_5"
  op: "Add"
  input: "Sqrt_2"
  input: "add_5/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "truediv_4"
  op: "RealDiv"
  input: "mul_11"
  input: "add_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sub_6"
  op: "Sub"
  input: "lstm_1/bias/read"
  input: "truediv_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Assign_9"
  op: "Assign"
  input: "lstm_1/bias"
  input: "sub_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/bias"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mul_12"
  op: "Mul"
  input: "rho/read"
  input: "Variable_3/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sub_7/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "sub_7"
  op: "Sub"
  input: "sub_7/x"
  input: "rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Square_3"
  op: "Square"
  input: "gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul_13"
  op: "Mul"
  input: "sub_7"
  input: "Square_3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add_6"
  op: "Add"
  input: "mul_12"
  input: "mul_13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Assign_10"
  op: "Assign"
  input: "Variable_3"
  input: "add_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mul_14"
  op: "Mul"
  input: "lr/read"
  input: "gradients/AddN_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const_15"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Const_16"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "clip_by_value_4/Minimum"
  op: "Minimum"
  input: "add_6"
  input: "Const_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_value_4"
  op: "Maximum"
  input: "clip_by_value_4/Minimum"
  input: "Const_15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Sqrt_3"
  op: "Sqrt"
  input: "clip_by_value_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add_7/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "add_7"
  op: "Add"
  input: "Sqrt_3"
  input: "add_7/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "truediv_5"
  op: "RealDiv"
  input: "mul_14"
  input: "add_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sub_8"
  op: "Sub"
  input: "lstm_1/kernel/read"
  input: "truediv_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Assign_11"
  op: "Assign"
  input: "lstm_1/kernel"
  input: "sub_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mul_15"
  op: "Mul"
  input: "rho/read"
  input: "Variable_4/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sub_9/x"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "sub_9"
  op: "Sub"
  input: "sub_9/x"
  input: "rho/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Square_4"
  op: "Square"
  input: "gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "mul_16"
  op: "Mul"
  input: "sub_9"
  input: "Square_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add_8"
  op: "Add"
  input: "mul_15"
  input: "mul_16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Assign_12"
  op: "Assign"
  input: "Variable_4"
  input: "add_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "mul_17"
  op: "Mul"
  input: "lr/read"
  input: "gradients/AddN_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const_17"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "Const_18"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: inf
      }
    }
  }
}
node {
  name: "clip_by_value_5/Minimum"
  op: "Minimum"
  input: "add_8"
  input: "Const_18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "clip_by_value_5"
  op: "Maximum"
  input: "clip_by_value_5/Minimum"
  input: "Const_17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Sqrt_4"
  op: "Sqrt"
  input: "clip_by_value_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "add_9/y"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 9.99999993922529e-09
      }
    }
  }
}
node {
  name: "add_9"
  op: "Add"
  input: "Sqrt_4"
  input: "add_9/y"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "truediv_6"
  op: "RealDiv"
  input: "mul_17"
  input: "add_9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sub_10"
  op: "Sub"
  input: "lstm_1/recurrent_kernel/read"
  input: "truediv_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Assign_13"
  op: "Assign"
  input: "lstm_1/recurrent_kernel"
  input: "sub_10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@lstm_1/recurrent_kernel"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "group_deps"
  op: "NoOp"
  input: "^mul_2"
  input: "^Mean_3"
  input: "^Assign_4"
  input: "^Assign_5"
  input: "^Assign_6"
  input: "^Assign_7"
  input: "^Assign_8"
  input: "^Assign_9"
  input: "^Assign_10"
  input: "^Assign_11"
  input: "^Assign_12"
  input: "^Assign_13"
}
node {
  name: "init_1"
  op: "NoOp"
  input: "^lr/Assign"
  input: "^rho/Assign"
  input: "^decay/Assign"
  input: "^iterations/Assign"
  input: "^Variable/Assign"
  input: "^Variable_1/Assign"
  input: "^Variable_2/Assign"
  input: "^Variable_3/Assign"
  input: "^Variable_4/Assign"
}
node {
  name: "Placeholder_4"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 20
        }
      }
    }
  }
}
node {
  name: "Assign_14"
  op: "Assign"
  input: "Variable"
  input: "Placeholder_4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_5"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 20
        }
      }
    }
  }
}
node {
  name: "Assign_15"
  op: "Assign"
  input: "Variable_1"
  input: "Placeholder_5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable_1"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_6"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "Assign_16"
  op: "Assign"
  input: "Variable_2"
  input: "Placeholder_6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable_2"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_7"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "Assign_17"
  op: "Assign"
  input: "Variable_3"
  input: "Placeholder_7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable_3"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "Placeholder_8"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
        dim {
          size: 256
        }
      }
    }
  }
}
node {
  name: "Assign_18"
  op: "Assign"
  input: "Variable_4"
  input: "Placeholder_8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@Variable_4"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: false
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "strided_slice/stack"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 0
      }
    }
  }
}
node {
  name: "strided_slice/stack_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice/stack_2"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "strided_slice"
  op: "StridedSlice"
  input: "dense_1/Softmax"
  input: "strided_slice/stack"
  input: "strided_slice/stack_1"
  input: "strided_slice/stack_2"
  attr {
    key: "Index"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "begin_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "ellipsis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "end_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "new_axis_mask"
    value {
      i: 0
    }
  }
  attr {
    key: "shrink_axis_mask"
    value {
      i: 1
    }
  }
}
node {
  name: "output_node0"
  op: "Identity"
  input: "strided_slice"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
versions {
  producer: 22
}
